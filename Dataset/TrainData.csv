class,Q,A
BeastAttack.cs,What is the purpose of the BeastAttack class?,"The BeastAttack class controls the beast's attack behavior, managing when and how the beast attacks the player."
BeastAttack.cs,What is the purpose of the strength field in the BeastAttack class?,The strength field determines the force with which the beast attacks the player.
BeastAttack.cs,What component does the 'attackAudioClip' variable store?,"The attackAudioClip variable stores an AudioClip, which is played when the beast attacks."
BeastAttack.cs,What does the OnTriggerEnter method do?,"The OnTriggerEnter method is called when the BeastAttack collider collides with another object, and it checks if the other object is the player. If it is, the beast attacks the player."
BeastAttack.cs,"What is the _collider field, and what is its purpose?",The _collider field is a reference to the BeastAttack collider component. It is used to disable and enable the collider during the beast's attack cooldown.
BeastAttack.cs,What happens when the BeastAttack collider collides with the player?,"When the BeastAttack collider collides with the player, the player is knocked back, an event is broadcast to notify other scripts that the player was hit, and a cooldown period begins before the beast can attack again."
BeastAttack.cs,How is the player pushed back when attacked?,"The player is pushed back by calculating the direction from the beast to the player and applying a force to the player in the opposite direction, multiplied by the strength field."
BeastAttack.cs,What is the purpose of the DOTween sequence in the BeastAttack class?,"The DOTween sequence is used to reset the BeastAttack cooldown after the beast has attacked. It waits for 2 seconds and then enables the BeastAttack collider, allowing the beast to attack again."
BeastAttack.cs,What is the purpose of the 'impulseSource' variable?,"The impulseSource variable stores a reference to a CinemachineImpulseSource component, which is used to generate a camera shake effect when the beast attacks."
BeastAttack.cs,What happens when the beast attacks?,"When the beast attacks, it plays an attack sound effect, generates a camera shake effect, knocks back the player, and enters a cooldown period before it can attack again."
BeastAttack.cs,when does the beast attack enter 'OnCoolDown' state?," ```csharp
public bool IsOnCoolDown => !_collider.enabled;
``` "
BeastAttack.cs,"when the beast hits the player, what is the code used to trigger the 'PushBack' force to the player?"," ```csharp
playerKnockBack.AddForce(pushDir * strength);
``` "
BeastAttack.cs,what is the sound effect played when the beast hits the player?," ```csharp
audioSource.PlayOneShot(attackAudioClip);
``` "
BeastAttack.cs,what is the interval between beast hits before it can hit again?," ```csharp
DOTween.Sequence().AppendInterval(2).AppendCallback(() => { _collider.enabled = true; });
``` "
BeastAttack.cs,what unity component does this class use to create a screen shake effect?," ```csharp
[SerializeField] private CinemachineImpulseSource impulseSource;
``` "
BeastAttack.cs,"in the OnTriggerEnter method, what component is used to check if the player got hit?"," ```csharp
if (other.TryGetComponent<PlayerKnockBack>(out PlayerKnockBack playerKnockBack)) {
``` "
BeastAttack.cs,what Unity event sends 'PlayerGotHit' event?," ```csharp
PlayerBehaviourEventHub.PlayerGotHit();
``` "
BeastAttack.cs,what is the state that the beast behavior have when it tries to attack?," ```csharp
if (beastManager.CurrentState.State == BeastManager.State.Escaping) return;
``` "
BeastAttack.cs,what is the component that gets disabled when the beast enters cool down state?," ```csharp
_collider.enabled = false;
``` "
BeastAttack.cs,what is the value of the strength variable that gets multipled to the pushback force?," ```csharp
[SerializeField] private float strength = 10;
``` "
BeastKillsPlayerSequenceAnimator,What is the purpose of the BeastKillsPlayerSequenceAnimator class?,The BeastKillsPlayerSequenceAnimator class manages the animation sequence that plays when the beast kills the player.
BeastKillsPlayerSequenceAnimator,What is the purpose of the director field in BeastKillsPlayerSequenceAnimator?,The director field is a reference to the PlayableDirector component that is responsible for playing the animation sequence.
BeastKillsPlayerSequenceAnimator,What is the purpose of the StartSequence method in BeastKillsPlayerSequenceAnimator?,The StartSequence method is called by the DeathRespawnManager when the player is killed. It activates the animation sequence and sets the director's position and rotation to the player's position and rotation.
BeastKillsPlayerSequenceAnimator,What is the purpose of the OnRespawnClicked method in BeastKillsPlayerSequenceAnimator?,The OnRespawnClicked method is called by the DeathRespawnManager when the player clicks on the respawn button. It deactivates the animation sequence.
BeastKillsPlayerSequenceAnimator,When is the StartSequence method called?,The StartSequence method is called by the DeathRespawnManager when the player is killed.
BeastKillsPlayerSequenceAnimator,When is the OnRespawnClicked method called?,The OnRespawnClicked method is called by the DeathRespawnManager when the player clicks on the respawn button.
BeastKillsPlayerSequenceAnimator,What does the StartSequence method do?,The StartSequence method activates the animation sequence and sets the director's position and rotation to the player's position and rotation.
BeastKillsPlayerSequenceAnimator,What does the OnRespawnClicked method do?,The OnRespawnClicked method deactivates the animation sequence.
BeastKillsPlayerSequenceAnimator,What is the name of the PlayableDirector component that is responsible for playing the animation sequence?,director
BeastKillsPlayerSequenceAnimator,What is the name of the method that is called when the player is killed?,StartSequence
BeastKillsPlayerSequenceAnimator.cs,what is the name of the PlayableDirector used to control the animation clip?," ```csharp
public PlayableDirector director;
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the name of the function that activates the animation clip and sets the director position and rotation?," ```csharp
public void StartSequence(Vector3 position, Quaternion rotation)
``` "
BeastKillsPlayerSequenceAnimator.cs,what is the code to set the director position and rotation?," ```csharp
director.transform.position = position;
director.transform.rotation = rotation;
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the code used to activate the director?," ```csharp
director.gameObject.SetActive(true);
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the name of the function that deactivates the animation clip?," ```csharp
public void OnRespawnClicked()
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the code used to deactivate the director?," ```csharp
director.gameObject.SetActive(false);
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the code used to play the animation clip?," ```csharp
director.Play();
``` "
BeastKillsPlayerSequenceAnimator.cs,where is the StartSequence function called from?," ```csharp
called by DeathRespawnManager when the player is killed
``` "
BeastKillsPlayerSequenceAnimator.cs,where is the OnRespawnClicked function called from?," ```csharp
called by DeathRespawnManager when the player clicks on the respawn button
``` "
BeastKillsPlayerSequenceAnimator.cs,What is the type of the director variable?," ```csharp
public PlayableDirector director;
``` "
BeastManager.cs,What does BeastManager.cs actually do?,BeastManager.cs is the main controller of the beast. It manages the beast's state and transitions between states.
BeastManager.cs,What design pattern is BeastManager.cs implementing?,"BeastManager.cs implements the Singleton design pattern, ensuring there is only one instance of the BeastManager object in the scene."
BeastManager.cs,What is BeastManager.State?,BeastManager.State is an enum that contains all possible states of the beast. Each child class of BeastState.cs must have one of these states.
BeastManager.cs,What are the different states defined in BeastManager.State?,"The different states in BeastManager.State are Sleep, OnTarget, Roaming, RoamingOnTarget, Escaping, and Killing."
BeastManager.cs,What is the purpose of the _sleepState variable in BeastManager.cs?,"The _sleepState variable is an instance of the BeastStateSleep class, which represents the beast's sleep state. It manages the behavior and transitions related to the sleep state."
BeastManager.cs,What is the role of navMeshAgent in BeastManager.cs?,navMeshAgent is responsible for controlling the beast's movement. It is initially disabled and enabled when the beast reaches BeastSpawnOnMeshPos.
BeastManager.cs,What event is broadcasted when the beast's state changes?,LevelEventHub.BeastStateUpdate is broadcasted whenever the beast's state changes.
BeastManager.cs,How does BeastManager.cs synchronize the beast's current state with the different beast state classes?,"Through the ChangeState method, BeastManager.cs updates the CurrentState property and activates the new state while passing the previous state as an argument."
BeastManager.cs,What method is called by PowerOutageBeastReleaseManager.cs to activate the beast?,The method called by PowerOutageBeastReleaseManager.cs to activate the beast is ActivateBeast.
BeastManager.cs,What is the purpose of the LightsBackOn method in BeastManager.cs?,The LightsBackOn method is responsible for changing the beast's state to Escaping when the lights are back on.
BeastManager.cs,Is the beast active at the beginning of the scene?," ```csharp
gameObject.SetActive(false);
``` "
BeastManager.cs,What is 'BeastSleepPos' and how can one set it?," ```csharp
public static Transform BeastSleepPos {
    get => Instance._beastSleepPos;
    set {
        Instance._beastSleepPos = value;
        Instance.transform.position = value.position;
    }
}
``` "
BeastManager.cs,What is the code used in BeastManager.cs to set the initial state?," ```csharp
CurrentState = _sleepState;
``` "
BeastManager.cs,What is the method to change the beast state?," ```csharp
private void ChangeState(State state) {
    //broadcast LevelEventHub.BeastStateUpdate
    LevelEventHub.BeastStateUpdate(state);
    var temp = CurrentState.State;
    Debug.Log(state);
    //update CurrentState accordingly
    CurrentState = state switch {
        State.Sleep => _sleepState,
        State.OnTarget => _onTargetState,
        State.Roaming => _roamingState,
        State.Escaping => _scapingState,
        State.Killing => _killingState,
        _ => throw new ArgumentOutOfRangeException(nameof(state), state, null)
    };
    //activate new state and pass the previous state to it
    CurrentState.OnStateActivated(temp);
}
``` "
BeastManager.cs,What is the code used in BeastManager.cs to activate the beast?," ```csharp
[ContextMenu(""ActivateBeast"")]
public void ActivateBeast() {
    gameObject.SetActive(true);
    //manually move the beast to BeastSpawnOnMeshPos so that it can be controlled by navMeshAgent of Unity
    transform.DOMove(BeastSpawnOnMeshPos.position, 1f).OnComplete(() => {
        //when at BeastSpawnOnMeshPos, active the navMeshAgent and change the state to State.Roaming
        navMeshAgent.enabled = true;
        ChangeState(State.Roaming);
    });
}
``` "
BeastManager.cs,What is the code used in BeastManager.cs to handle the player getting killed?," ```csharp
public void KillPlayer() {
    ChangeState(State.Killing);
}
``` "
BeastManager.cs,What is the code used in BeastManager.cs to handle the lights being back on?," ```csharp
private void LightsBackOn() {
    ChangeState(State.Escaping);
}
``` "
BeastManager.cs,What events does BeastManager subscribe to?," ```csharp
private void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnLightsBackOn += LightsBackOn;
}
``` "
BeastManager.cs,What events does BeastManager unsubscribe to?," ```csharp
private void OnDisable() {
    //unsubscribing to some events
    LevelEventHub.OnLightsBackOn -= LightsBackOn;
}
``` "
BeastManager.cs,What is the BeastState enum used for?," ```csharp
public enum State {
    Sleep,
    OnTarget,
    Roaming,
    RoamingOnTarget,
    Escaping,
    Killing
}
``` "
BeastState.cs,What is the purpose of the BeastState.cs class?,The BeastState.cs class is the abstract base class for the beast states. It defines a state and contains common variables and methods used by all beast states.
BeastState.cs,What is the purpose of the 'changeState' variable in BeastState.cs?,The 'changeState' variable is an action that is passed to the beast state. It allows the state to change the state of the beast.
BeastState.cs,What is the purpose of the 'player' variable in BeastState.cs?,The 'player' variable is a reference to the player's transform. It is used by the beast state to track the player's position.
BeastState.cs,What is the purpose of the 'head' variable in BeastState.cs?,The 'head' variable is a reference to the beast's head transform. It is used by the beast state to look at the player.
BeastState.cs,What is the purpose of the 'navMeshAgent' variable in BeastState.cs?,The 'navMeshAgent' variable is a reference to the beast's NavMeshAgent component. It is used by the beast state to move the beast around the environment.
BeastState.cs,What is the purpose of the 'beastTransform' variable in BeastState.cs?,The 'beastTransform' variable is a reference to the beast's transform. It is used by the beast state to access the beast's position and rotation.
BeastState.cs,What is the purpose of the 'layerMask' variable in BeastState.cs?,The 'layerMask' variable is a layer mask that is used by the beast state to ignore certain objects in the environment.
BeastState.cs,What is the purpose of the 'normalSpeed' variable in BeastState.cs?,The 'normalSpeed' variable is the normal speed of the beast. It is used by the beast state to control the beast's movement speed.
BeastState.cs,What is the purpose of the 'State' property in BeastState.cs?,The 'State' property is the current state of the beast. It is an abstract property that must be implemented by each beast state.
BeastState.cs,What is the purpose of the 'Init' method in BeastState.cs?,The 'Init' method is called when the beast state is activated. It is used to set the dependencies of the beast state.
BeastState.cs,In 'BeastState.cs' what variables are used to define the beast's rotation to look at the target?,"```csharp
var lookVector = pos - head.position;
var targetRotation = Quaternion.LookRotation(lookVector);
```"
BeastState.cs,"In 'BeastState.cs', what does OnStateActivated method do?","```csharp
public abstract void OnStateActivated(BeastManager.State lastState);
```"
BeastState.cs,"In 'BeastState.cs', what is injected with the Init method?","```csharp
public void Init(Transform beastTransform, Transform player, Transform head, NavMeshAgent navMeshAgent,
        Action<BeastManager.State> changeState, LayerMask layerMask) {

```"
BeastState.cs,"In 'BeastState.cs', what is the base class of the beast states?","```csharp
public abstract class BeastState {

```"
BeastState.cs,"In 'BeastState.cs', what is the name of the state variable?","```csharp
public abstract BeastManager.State State { get; protected set; }
```"
BeastState.cs,"In 'BeastState.cs', what is the name of the Update method?","```csharp
public abstract void Update();
```"
BeastState.cs,"In 'BeastState.cs', how is the player's position used in the lookAt method?","```csharp
LookAt(Vector3 pos) {
    //get the direction to look at (in Quaternion)
    var lookVector = pos - head.position;
```"
BeastState.cs,"In 'BeastState.cs', what is the purpose of the changeState variable?","```csharp
// ChangeState() from BeastManager is always passed as changeState, so that the state can change the state of the beast
```"
BeastState.cs,"In 'BeastState.cs', how is the lookVector used to determine the beast's target rotation?","```csharp
var targetRotation = Quaternion.LookRotation(lookVector);
```"
BeastState.cs,"In 'BeastState.cs', what is the name of the method that is called when the state is activated?","```csharp
public abstract void OnStateActivated(BeastManager.State lastState);
```"
BeastStateKilling.cs,what kind of a state is 'Killing' state?,"Killing state is the state that the beast takes over when the player's health reaches 0, during this state the beast is killing the player and is not able to move."
BeastStateKilling.cs,what\'s the purpose of '_timeLeft'?,"_timeLeft is the time that the beast has left before it moves to the Roaming state, this time starts when the killing state starts and ends cuando la animación de muerte del jugador acaba."
BeastStateKilling.cs,What does the beast do while it's in the 'Killing' state?,The beast looks at the player and does nothing.
BeastStateKilling.cs,"what does it mean when a class inherits ""BeastState""?",It means that the class implements all the methods and variables that are in the BeastState class.
BeastStateKilling.cs,how long does the killing animation last?,The killing animation lasts for \_killAnimationDuration\ seconds.
BeastStateKilling.cs,how does the beast change its state to 'Roaming'?,The beast changes its state to \'Roaming\' when the variable \'_timeLeft\' becomes less than 0.
BeastStateKilling.cs,what is the value of \'_killAnimationDuration\'?,\'_killAnimationDuration\' is 4 seconds.
BeastStateKilling.cs,what is the current state in the BeastManager?,The current state in the BeastManager is the state that is set in the \'State\' variable.
BeastStateKilling.cs,what is the value of the \'State\' variable?,The value of the \'State\' variable is BeastManager.State.Killing.
BeastStateKilling.cs,when does 'beast' call the 'LookAt' function?,The \'beast\' calls the \'LookAt\' function in the \'Update\' method.
BeastStateKilling.cs,How long does the beast take to kill the player?,"```csharp
private float _killAnimationDuration = 4f;
```"
BeastStateKilling.cs,What is the code used to make the beast look at the player in 'BeastStateKilling.cs'?,"```csharp
LookAt(player.position);
```"
BeastStateKilling.cs,How does the Beast change it's state in 'BeastStateKilling.cs'?,"```csharp
changeState(BeastManager.State.Roaming);
```"
BeastStateKilling.cs,What is the name of the variable that holds the time left for the killing animation in 'BeastStateKilling.cs'?,"```csharp
private float _timeLeft;
```"
BeastStateKilling.cs,How does the Beast reset its path in 'BeastStateKilling.cs'?,"```csharp
navMeshAgent.ResetPath();
```"
BeastStateKilling.cs,What does the Beast do when it's in the killing state?,"```csharp
// look at the player and do nothing, then change state to roaming
```"
BeastStateKilling.cs,What is the duration of the killing animation?,"```csharp
private float _killAnimationDuration = 4f;
```"
BeastStateKilling.cs,What is the name of the function that is called when the state is activated?,"```csharp
public override void OnStateActivated(BeastManager.State lastState) {
    // reset some variables 
    navMeshAgent.speed = normalSpeed;
    _timeLeft = _killAnimationDuration;
    navMeshAgent.ResetPath();
}
```"
BeastStateKilling.cs,What is the name of the private variable that holds the normal speed of the beast?,"```csharp
private float normalSpeed;
```"
BeastStateKilling.cs,What is the name of the function that is called every frame while the beast is in the killing state?,"```csharp
public override void Update() {
    // look at the player and do nothing, then change state to roaming
    LookAt(player.position);
    _timeLeft -= Time.deltaTime;
    if (_timeLeft < 0) {
        changeState(BeastManager.State.Roaming);
    }
}
```"
BeastStateOnTarget.cs,What does the BeastStateOnTarget class represent in the Beast state machine?,"The BeastStateOnTarget class represents the state in which the beast is actively chasing a target, specifically the player."
BeastStateOnTarget.cs,What is the purpose of the eyeSightDistance field in the BeastStateOnTarget class?,The eyeSightDistance field specifies the maximum distance at which the beast can see the player.
BeastStateOnTarget.cs,What is the purpose of the distanceToPlayerThatBeastRuns field in the BeastStateOnTarget class?,The distanceToPlayerThatBeastRuns field determines the distance at which the beast starts running towards the player.
BeastStateOnTarget.cs,What is the purpose of the beastAttack field in the BeastStateOnTarget class?,"The beastAttack field is a reference to the BeastAttack component, which manages the beast's attacks."
BeastStateOnTarget.cs,What is the purpose of the State property in the BeastStateOnTarget class?,"The State property represents the current state of the beast, which in this case is BeastManager.State.OnTarget."
BeastStateOnTarget.cs,What does the _lastValidPath variable represent in the BeastStateOnTarget class?,The _lastValidPath variable stores the most recent valid path generated by the navigation mesh agent towards the player.
BeastStateOnTarget.cs,What happens if the CalculatePath method returns an invalid path?,"If the CalculatePath method returns an invalid path, the BeastStateOnTarget class will use the last valid path as a fallback."
BeastStateOnTarget.cs,What is the purpose of the Update method in the BeastStateOnTarget class?,"The Update method handles the behavior of the beast while it is in the OnTarget state. It checks if the player is in sight, pursues the player if visible, and transitions to the Roaming state if the player is not visible."
BeastStateOnTarget.cs,What is the purpose of the CheckForPlayerInSight method in the BeastStateOnTarget class?,The CheckForPlayerInSight method determines if the player is within the beast's line of sight.
BeastStateOnTarget.cs,What is the purpose of the OnStateActivated method in the BeastStateOnTarget class?,The OnStateActivated method is called when the BeastStateOnTarget is first activated. It performs a sanity check on the normalSpeed field to ensure it has a valid value.
BeastStateOnTarget.cs,"In the 'BeastStateOnTarget' state, if the player is not in sight, what is the condition for the beast to change to the 'Roaming' state?"," ```csharp
//player is not in sight, change state to roaming state
changeState(BeastManager.State.Roaming);
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', what is the formula to calculate the direction that the beast should look at to see the player?"," ```csharp
Vector3 direction = (player.position - new Vector3(0, 0.5f, 0)) - beastTransform.position;
``` "
BeastStateOnTarget.cs,What is the name of the state that the beast will transition to if the player is not in sight?," ```csharp
changeState(BeastManager.State.Roaming);
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', under what condition will the beast run at the player?"," ```csharp
if (navMeshAgent.remainingDistance > distanceToPlayerThatBeastRuns)
    navMeshAgent.speed = Constants.BeastFastSpeed;
else navMeshAgent.speed = normalSpeed;
``` "
BeastStateOnTarget.cs,"When checking if the player is in sight, what is the distance that the raycast is shot out to?"," ```csharp
if (Physics.Raycast(beastTransform.position, direction, out hit, eyeSightDistance, layerMask)) {
  if (hit.collider.CompareTag(""Player"")) {
    return true;
  }
}
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', how does the beast determine if the player is in its line of sight?"," ```csharp
Vector3 direction = (player.position - new Vector3(0, 0.5f, 0)) - beastTransform.position;
if (Physics.Raycast(beastTransform.position, direction, out hit, eyeSightDistance, layerMask)) {
  if (hit.collider.CompareTag(""Player"")) {
    return true;
  }
}
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', how is the beast's speed determined?"," ```csharp
if (navMeshAgent.remainingDistance > distanceToPlayerThatBeastRuns)
    navMeshAgent.speed = Constants.BeastFastSpeed;
else navMeshAgent.speed = normalSpeed;
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', how does the beast look at the player?"," ```csharp
LookAt(player.position);
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', how does the beast determine if the path to the player is valid?"," ```csharp
NavMeshPath path = new NavMeshPath();
var isPathValid = navMeshAgent.CalculatePath(player.position, path);
if (isPathValid) {
    _lastValidPath = path;
}
else if (_lastValidPath != null) {
    path = _lastValidPath;
}
``` "
BeastStateOnTarget.cs,"In 'BeastStateOnTarget', how does the beast set the path to the player?"," ```csharp
navMeshAgent.SetPath(path);
``` "
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the 'walkHearRadius' and 'runHearRadius' fields?","These fields determine the radius at which the beast can hear player footsteps. If the player is within the walkHearRadius, the beast can hear them walking. If the player is within the runHearRadius, the beast can hear them running."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what does the 'CheckForPlayerInSight()' method do?","This method checks if the player is in the beast's line of sight. It casts a ray from the beast to the player and checks if it hits the player's collider. If the ray hits the player's collider and the angle between the direction to the player and the beast's forward direction is less than 'detectionAngle', then the player is in the beast's line of sight."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the 'detectionAngle' field?","This field determines the angle at which the beast can see players. If the player is within the beast's line of sight and the angle between the direction to the player and the beast's forward direction is less than 'detectionAngle', then the player is in the beast's field of view."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what does the 'OnStateActivated()' method do?","This method is called when the beast enters the Roaming state. If the previous state was not the OnTarget state, the beast updates its destination to a new roaming position. If the previous state was the OnTarget state, the beast updates its destination to the player's last seen position and enters the RoamingOnTarget sub-state."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the '_currentPoint' and '_currentPointIndex' fields?","These fields keep track of the beast's current roaming position. '_currentPoint' stores the position of the current roaming point, and '_currentPointIndex' stores the index of the current roaming point in the 'BeastRoamingPositions' array."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what does the 'UpdateDestination()' method do?","This method is called when a new roaming position is needed. It resets the 'detectionAngle' to 45 degrees, updates the '_currentPoint' and '_currentPointIndex' fields to the next roaming position in the 'BeastRoamingPositions' array, and sends an event to update and broadcast the beast's state."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the 'Update()' method?","This method is called every frame while the beast is in the Roaming state. It checks if the player is in sight or making sound, and if so, it changes the beast's state accordingly. It also checks if the beast has reached its current roaming point, and if so, it updates its destination to a new roaming point."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what does the 'CheckForPlayerFootstepSound()' method do?","This method checks if the player is making sound. It checks the player's speed and the distance between the player and the beast. If the player is walking or running and is within the 'walkHearRadius' or 'runHearRadius', then the player is making sound."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the 'eyeSightDistance' field?","This field determines the distance at which the beast can see players. If the player is within this distance, the beast can see them."
BeastStateRoaming.cs,"In the BeastStateRoaming class, what is the purpose of the 'State' field?","This field stores the current state of the beast. It is of type 'BeastManager.State', which is an enum that defines the different states that the beast can be in."
BeastStateRoaming.cs,What is the name of the class implementing the state when the beast is roaming?," ```csharp
public class BeastStateRoaming : BeastState {
    [SerializeField] private float walkHearRadius = 5f;
    [SerializeField] private float runHearRadius = 10f;
    [SerializeField] private float eyeSightDistance;
    private float detectionAngle = 45f;
    private Vector3 _currentPoint;
    private int _currentPointIndex;
    public override BeastManager.State State { get; protected set; } = BeastManager.State.Roaming;

    //check for player in sight or player making sound, if no keep roaming
    public override void Update() {
        //...
    }

    //check if the player is the beasts hear radius
    private bool CheckForSoundProximity(float hearRadius) {
        //...
    }

    //check if the player is in the beasts line of sight
    private bool CheckForPlayerInSight() {
        //...
    }

    //state is just activated - set correct roaming position
    public override void OnStateActivated(BeastManager.State lastState) {
        //...
    }

    //called when new roaming position is needed
    private void UpdateDestination() {
        //...
    }

}
``` "
BeastStateRoaming.cs,"In the 'BeastStateRoaming' class, how does the beast check if the player is in sight?"," ```csharp
private bool CheckForPlayerInSight() {
        //calculate the direction to look at (from beast to player) (player position - beast position)
        RaycastHit hit;
        Vector3 direction = (player.position - new Vector3(0, 0.5f, 0)) - beastTransform.position;

        //...

        //raycast to find the player
        if (Physics.Raycast(beastTransform.position, direction, out hit, eyeSightDistance, layerMask)) {
            //check if what the ray hit is the player
            if (hit.collider.CompareTag(""Player"")) {
                //check if the player is also in the beasts field of view
                var angle = Vector3.Angle(direction, beastTransform.forward);

                //...

                if (angle < detectionAngle) {
                    //player is insight and in the beasts field of view
                    Debug.Log(""beast saw player"");
                    return true;
                }
            }
        }

        //player is not in sight or not in the beasts field of view
        return false;
    }
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, what is the function used to check if the player is making a sound?"," ```csharp
private bool CheckForPlayerFootstepSound() {
        switch (FirstPersonController.PlayerSpeed) {
            case <= Constants.PlayerSpeedCrouch:
                //player is crouching, beast cant hear it
                return false;
            case < Constants.PlayerSpeedRun:
                //player is walking
                return CheckForSoundProximity(walkHearRadius);
            default:
                //player is running
                return CheckForSoundProximity(runHearRadius);
        }
    }

    //check if the player is the beasts hear radius
    private bool CheckForSoundProximity(float hearRadius) {
        //...
    }
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, what is the function called when the state is just activated?"," ```csharp
public override void OnStateActivated(BeastManager.State lastState) {
        //...
    }
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, how does the beast calculate the distance between the player and the beast?"," ```csharp
private bool CheckForSoundProximity(float hearRadius) {
        var distance = Vector3.Distance(beastTransform.position, player.position);
``` "
BeastStateRoaming.cs,How does 'BeastStateRoaming' class set the beast's destination to the current roaming position?," ```csharp
//set the navMeshAgent destination to the current roaming point
navMeshAgent.SetDestination(_currentPoint);
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, how does the beast check if it has reached the current roaming point?"," ```csharp
if (navMeshAgent.velocity == Vector3.zero && navMeshAgent.remainingDistance < 5f) {
            //beast reached the current roaming point, get a new roaming point
            Debug.Log(""beast new roaming position"");
            UpdateDestination();
        }
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, what is the name of the function responsible for finding a new roaming position for the beast?"," ```csharp
private void UpdateDestination() {
        //...
    }
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, what is the value of the 'walkHearRadius' field?"," ```csharp
private float walkHearRadius = 5f;
``` "
BeastStateRoaming.cs,"In 'BeastStateRoaming' class, what is the value of the 'runHearRadius' field?"," ```csharp
private float runHearRadius = 10f;
``` "
BeastStateScaping.cs,What is the purpose of the BeastStateScaping.cs class?,"The BeastStateScaping.cs class represents the escaping state of the Beast. In this state, the Beast is trying to escape to its hiding place. Once it reaches its hiding place, it will enter the sleep state."
BeastStateScaping.cs,What is the State variable in the BeastStateScaping.cs class?,"The State variable in the BeastStateScaping.cs class represents the current state of the Beast. In this case, it is set to BeastManager.State.Escaping, indicating that the Beast is in the escaping state."
BeastStateScaping.cs,What is the Update() method in the BeastStateScaping.cs class responsible for?,The Update() method in the BeastStateScaping.cs class is responsible for updating the state of the Beast. It checks if the Beast has reached its hiding place and sets the destination and speed of the Beast's navigation agent accordingly.
BeastStateScaping.cs,What happens when the Beast reaches its hiding place in the BeastStateScaping.cs class?,"When the Beast reaches its hiding place in the BeastStateScaping.cs class, it changes its state to BeastManager.State.Sleep, indicating that it has entered the sleep state."
BeastStateScaping.cs,What is the purpose of the OnStateActivated() method in the BeastStateScaping.cs class?,The OnStateActivated() method in the BeastStateScaping.cs class is called when the escaping state is first activated. It sets the destination and speed of the Beast's navigation agent to make it run towards its hiding place.
BeastStateScaping.cs,What is the BeastSpawnOnMeshPos variable in the BeastStateScaping.cs class?,The BeastSpawnOnMeshPos variable in the BeastStateScaping.cs class represents the position on the navigation mesh where the Beast spawns. This is typically near the Beast's hiding place.
BeastStateScaping.cs,What does the Constants.BeastFastSpeed represent in the BeastStateScaping.cs class?,The Constants.BeastFastSpeed in the BeastStateScaping.cs class is the speed at which the Beast runs when it is trying to escape to its hiding place.
BeastStateScaping.cs,What is the purpose of the navMeshAgent.SetDestination() method in the BeastStateScaping.cs class?,The navMeshAgent.SetDestination() method in the BeastStateScaping.cs class sets the destination for the Beast's navigation agent. This is used to make the Beast move towards its hiding place.
BeastStateScaping.cs,What is the navMeshAgent.speed property in the BeastStateScaping.cs class used for?,The navMeshAgent.speed property in the BeastStateScaping.cs class is used to set the speed at which the Beast moves. This is typically set to a faster speed when the Beast is escaping to its hiding place.
BeastStateScaping.cs,What is the purpose of the changeState(BeastManager.State.Sleep) method in the BeastStateScaping.cs class?,The changeState(BeastManager.State.Sleep) method in the BeastStateScaping.cs class is used to change the Beast's state to the sleep state. This is called when the Beast reaches its hiding place.
BeastStateScaping.cs,What is the state of the Beast after it escapes from the player?," ```csharp
//beast reached its hideout, change state to sleep
changeState(BeastManager.State.Sleep);
``` "
BeastStateScaping.cs,What is the condition for the beast to switch to the Sleep state after escaping?," ```csharp
if (navMeshAgent.remainingDistance < 3.1f) {
    //beast reached its hideout, change state to sleep
    changeState(BeastManager.State.Sleep);
    return;
}
``` "
BeastStateScaping.cs,"In the BeastStateScaping class, What is the navMeshAgent set to when the state is activated?"," ```csharp
navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
navMeshAgent.speed = Constants.BeastFastSpeed;
``` "
BeastStateScaping.cs,What does the function 'OnStateActivated' do in BeastStateScaping class?," ```csharp
public override void OnStateActivated(BeastManager.State lastState) {
    //set the destination to the beast's spawn position (it is near the hideout)
    navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
    //set the navMeshAgent speed to fast(beast runs to its hiding place)
    navMeshAgent.speed = Constants.BeastFastSpeed;
}
``` "
BeastStateScaping.cs,What is the name of the field that stores the current state of Beast?," ```csharp
public override BeastManager.State State { get; protected set; } = BeastManager.State.Escaping;
``` "
BeastStateScaping.cs,Why does the beast have a 'speed' variable?," ```csharp
//set the navMeshAgent speed to fast(beast runs to its hiding place)
navMeshAgent.speed = Constants.BeastFastSpeed;
``` "
BeastStateScaping.cs,How does the BeastStateScaping class set the destination that the Beast will move to?," ```csharp
//set the destination to the beast's spawn position (it is near the hideout)
navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
``` "
BeastStateScaping.cs,What is the update interval for the BeastStateScaping state?," ```csharp
public override void Update() {
        LookAt(beastTransform.forward);

        //check if the beast reached its hiding place
        if (navMeshAgent.remainingDistance < 3.1f) {
            //beast reached its hideout, change state to sleep
            changeState(BeastManager.State.Sleep);
            return;
        }


        //set the destination to the beast's spawn position (it is near the hideout)
        navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
    }
``` "
BeastStateScaping.cs,"In the BeastStateScaping class, How does the beast look around?"," ```csharp
LookAt(beastTransform.forward);
``` "
BeastStateScaping.cs,What happens if the navMeshAgent.remainingDistance is greater than 3.1f?," ```csharp
navMeshAgent.speed = Constants.BeastFastSpeed;
``` "
BeastStateSleep.cs,What is the purpose of the BeastStateSleep class?,"BeastStateSleep class represents the sleep state of the beast. When the power is on, the beast enters the sleep state and becomes inactive"
BeastStateSleep.cs,What does the State property represent?,"The State property is an override of the State property in the BeastState base class. It returns the current state of the beast, which, for the BeastStateSleep class, is BeastManager.State.Sleep."
BeastStateSleep.cs,What happens in the Update method of the BeastStateSleep class?,"In the Update method, the beast looks at the BeastManager's BeastSleepPos position, always keeping its gaze towards it."
BeastStateSleep.cs,What occurs when the BeastStateSleep state is activated?,"When the BeastStateSleep state is activated, certain variables are reset, the navMeshAgent component is disabled, and the beast moves to its hideout position. Once it reaches the hideout, the beast becomes inactive and its game object is deactivated."
BeastStateSleep.cs,What is the purpose of the BeastManager.BeastSleepPos.position property?,BeastManager.BeastSleepPos.position represents the position where the beast should move to when entering the sleep state.
BeastStateSleep.cs,How does the beast move to its hideout position?,"The beast uses DOTween utility to move to its hideout position smoothly, with an ease-in cubic animation. The movement takes one second to complete."
BeastStateSleep.cs,What happens after the beast reaches its hideout position?,"Once the beast reaches its hideout position, its game object is deactivated, effectively hiding it from the player's view."
BeastStateSleep.cs,How does the beast's speed and navMeshAgent component behave in the BeastStateSleep state?,"In the BeastStateSleep state, the beast's speed is reset to its normal value, and the navMeshAgent component is disabled, preventing the beast from moving autonomously."
BeastStateSleep.cs,Can the beast transition from the BeastStateSleep state to other states?,This information is not available in the given context.
BeastStateSleep.cs,Does the speed of the beast's movement to the hideout position affect the gameplay?,This information is not available in the given context.
BeastStateSleep.cs,What is the enum that represents the current state of the beast in 'BeastStateSleep.cs' ?," ```csharp
public override BeastManager.State State { get; protected set; } = BeastManager.State.Sleep;
``` "
BeastStateSleep.cs,How does the beast prevent the player from seeing it after the power is turned on in 'BeastStateSleep.cs' ?," ```csharp
beastTransform.DOMove(BeastManager.BeastSleepPos.position, 1f).SetEase(Ease.InCubic).OnComplete((() => {
beastTransform.gameObject.SetActive(false);
}));
``` "
BeastStateSleep.cs,What is the purpose of the Update method in 'BeastStateSleep.cs' ?," ```csharp
public override void Update() {
LookAt(BeastManager.BeastSleepPos.position);
}
``` "
BeastStateSleep.cs,What is the code used to set the speed of the beast's movement in 'BeastStateSleep.cs' ?," ```csharp
navMeshAgent.speed = normalSpeed;
``` "
BeastStateSleep.cs,Which code is executed when the beast is activated in 'BeastStateSleep.cs' ?," ```csharp
public override void OnStateActivated(BeastManager.State lastState) {
//reset some variables and deactivate the navMeshAgent component
navMeshAgent.speed = normalSpeed;
navMeshAgent.enabled = false;

//move the beast to its hideout position, out of the player's sight and deactivate it there
beastTransform.DOMove(BeastManager.BeastSleepPos.position, 1f).SetEase(Ease.InCubic).OnComplete((() => {
beastTransform.gameObject.SetActive(false);
}));
}
``` "
BeastStateSleep.cs,How does the beast look at the player in 'BeastStateSleep.cs' ?," ```csharp
LookAt(BeastManager.BeastSleepPos.position);
``` "
BeastStateSleep.cs,In what state does the beast start when the power is on in 'BeastStateSleep.cs' ?," ```csharp
public override BeastManager.State State { get; protected set; } = BeastManager.State.Sleep;
``` "
BeastStateSleep.cs,Which code is executed when the beast is deactivated in 'BeastStateSleep.cs' ?," ```csharp
beastTransform.gameObject.SetActive(false);
``` "
BeastStateSleep.cs,What is the name of the method that is called when the beast is activated in 'BeastStateSleep.cs' ?," ```csharp
public override void OnStateActivated(BeastManager.State lastState) {
//reset some variables and deactivate the navMeshAgent component
navMeshAgent.speed = normalSpeed;
navMeshAgent.enabled = false;

//move the beast to its hideout position, out of the player's sight and deactivate it there
beastTransform.DOMove(BeastManager.BeastSleepPos.position, 1f).SetEase(Ease.InCubic).OnComplete((() => {
beastTransform.gameObject.SetActive(false);
}));
}
``` "
BeastStateSleep.cs,What is the name of the method that is called when the beast is updated in 'BeastStateSleep.cs' ?," ```csharp
public override void Update() {
LookAt(BeastManager.BeastSleepPos.position);
}
``` "
GlobalEventHub.cs,What is the purpose of the GlobalEventHub class?,"The GlobalEventHub.cs class implements the EventHub design pattern, which allows communication between components without referencing each other."
GlobalEventHub.cs,How does the EventHub design pattern work?,"The EventHub design pattern has two parts: an event (a delegate) that holds references to methods to be executed when the event is triggered, and a static method that invokes the event delegate."
GlobalEventHub.cs,What is the purpose of the OnGameStart event?,The OnGameStart event is a global game event triggered by the GameStarter class to signify the start of the game.
GlobalEventHub.cs,How do other classes subscribe to the OnGameStart event?,"To subscribe to the OnGameStart event, a class can add a delegate pointing to the method it wants to execute when the event is triggered."
GlobalEventHub.cs,How do classes trigger the OnGameStart event?,"To trigger the OnGameStart event, a class can call the GameStart() static method."
GlobalEventHub.cs,What is the purpose of the eventName?.Invoke() syntax in the GameStart() method?,"The eventName?.Invoke() checks if the OnGameStart event has any subscribers (methods added to it) and, if so, invokes them."
GlobalEventHub.cs,Is the EventHub design pattern limited to the GameStart event?,"No, the EventHub design pattern can be used to create other global game events for various purposes."
GlobalEventHub.cs,What are the advantages of using the EventHub design pattern?,Using the EventHub design pattern allows for loosely coupled communication between components and provides flexibility for adding or removing event listeners dynamically.
GlobalEventHub.cs,Can the EventHub design pattern be used in other programming contexts outside Unity?,"Yes, the EventHub design pattern is a general design pattern applicable to any programming environment that supports events."
GlobalEventHub.cs,What other design patterns might complement the EventHub design pattern?,"Other design patterns that can work well with the EventHub design pattern include the Observer pattern, the Delegate pattern, and the Publish/Subscribe pattern."
GlobalEventHub.cs,How does the 'GlobalEventHub' class allow the event to be triggered?," ```csharp
public static void EventName() => eventName?.Invoke();
``` "
GlobalEventHub.cs,What is the name of the event that this class creates?," ```csharp
public static event Action OnGameStart;
``` "
GlobalEventHub.cs,How do you call/trigger the 'OnGameStart' event of the 'GlobalEventHub' class?," ```csharp
GlobalEventHub.GameStart();
``` "
GlobalEventHub.cs,What is the design pattern called that allows communication between components without having to reference each other?," ```csharp
EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
``` "
GlobalEventHub.cs,What is a delegate (C# Action)?," ```csharp
first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
``` "
GlobalEventHub.cs,How can any class subscribe to the event?," ```csharp
any class can subscribe to the event by adding a method to the event delegate
``` "
GlobalEventHub.cs,How do you define an event?," ```csharp
public static event Action eventName;
``` "
GlobalEventHub.cs,What does 'OnGameStart' event hold in the 'GlobalEventHub' class?," ```csharp
public static event Action OnGameStart;
``` "
GlobalEventHub.cs,How does a class trigger the event?," ```csharp
public static void EventName() => eventName?.Invoke();
``` "
GlobalEventHub.cs,How does 'GlobalEventHub' class trigger the 'OnGameStart' event?," ```csharp
public static void GameStart() => OnGameStart?.Invoke();
``` "
LevelEventHub.cs,in 'LevelEventHub.cs' What happens when the OnPowerCoreInserted event is triggered?,"When the OnPowerCoreInserted event is triggered, it invokes the delegate connected to it, which in turn calls the PowerCoreInserted method with the power core id as a parameter."
LevelEventHub.cs,What event in 'LevelEventHub.cs' is called when the power core is ejected from the power station?,OnPowerCoreEjected event.
LevelEventHub.cs,in 'LevelEventHub.cs' What happens when the OnLightsOut event is called?,"When the OnLightsOut event is called, any subscribed method to this event is executed."
LevelEventHub.cs,which class calls the OnLightsBackOn event in 'LevelEventHub.cs'?,LevelLightsManager.cs.
LevelEventHub.cs,"in 'LevelEventHub.cs' Which event handles light updates for lightGun lights, such as new light injection or light being sucked out?",OnLightGunLightInjected .
LevelEventHub.cs,in 'LevelEventHub.cs' Give the event that is called when the Beast's state is updated and what parameters does it take?,"OnBeastStateUpdate event, which takes the BeastManager's State as a parameter."
LevelEventHub.cs,What does the 'LevelEventHub.cs' class usually do?,"LevelEventHub.cs is a class that implements the EventHubs design pattern in the context of a level. EventHubs are used for inter-component communication, allowing components to subscribe and publish events without direct references to each other."
LevelEventHub.cs,in 'LevelEventHub.cs' Who or what calls the OnPlayerDetectedTriggered event?,PlayerDetector.cs of Player Detector objects.
LevelEventHub.cs,in 'LevelEventHub.cs' How is the OnPowerSwitchActivated event called?,The OnPowerSwitchActivated event is called by PowerSwitch.cs when the power switch is activated.
LevelEventHub.cs,Which class calls the OnPlayerCollectedCollectable event in 'LevelEventHub.cs'?,CollectableInteractable.cs.
LevelEventHub.cs,"What is the code that triggers the ""OnPowerSwitchActivated"" event in ""LevelEventHub.cs""? "," ```csharp
public static void PowerSwitchActivated(int id) => OnPowerSwitchActivated?.Invoke(id);
``` "
LevelEventHub.cs,"What parameters does the ""OnPowerCoreInserted"" event take in ""LevelEventHub.cs""? "," ```csharp
public static event Action<int> OnPowerCoreInserted;
``` "
LevelEventHub.cs,"What code triggers the ""OnBeastStateUpdate"" event in ""LevelEventHub.cs""? "," ```csharp
public static void BeastStateUpdate(BeastManager.State state) => OnBeastStateUpdate?.Invoke(state);
``` "
LevelEventHub.cs,"What is the code that is called when the lighting goes out in ""LevelEventHub.cs""? "," ```csharp
public static event Action OnLightsOut;
public static void LightsOut() => OnLightsOut?.Invoke();
``` "
LevelEventHub.cs,"What parameter does the ""PlayerDetectorTriggered"" event take in ""LevelEventHub.cs""? "," ```csharp
public static event Action<int> OnPlayerDetectorTriggered;
``` "
LevelEventHub.cs,"What method in ""LevelEventHub.cs"" is called when the player collects a collectable?"," ```csharp
public static void PlayerCollectedCollectable(int id) => OnPlayerCollectedCollectable?.Invoke(id);
``` "
LevelEventHub.cs,"What is the code that triggers the ""LightGunLightInjected"" event in ""LevelEventHub.cs""? "," ```csharp
public static void LightGunLightInjected(int id, LightColor lightType) => OnLightGunLightInjected?.Invoke(id, lightType);
``` "
LevelEventHub.cs,"What parameters does the ""OnLightsBackOn"" event take in ""LevelEventHub.cs""? "," ```csharp
public static event Action OnLightsBackOn;
``` "
LevelEventHub.cs,"What method in ""LevelEventHub.cs"" is called when the power core is ejected from the power station?"," ```csharp
public static void PowerCoreEjected(int id) => OnPowerCoreEjected?.Invoke(id);
``` "
LevelEventHub.cs,"What parameters does the ""OnPlayerCollectedCollectable"" event take in ""LevelEventHub.cs""? "," ```csharp
public static event Action<int> OnPlayerCollectedCollectable;
``` "
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of OnGrabbableObjectInteracted event and what triggers it ?,OnGrabbableObjectInteracted event is called when the player interacts with a grabbable object. It is called by 'GrabbableObjects.cs' method the interactible object is in contact with a collider which has the player tag.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of the OnPlayerGrabbedAnObject event and what triggers it ?,OnPlayerGrabbedAnObject event is called when the player fully grabs an object. It is called by 'GrabbableObjects.cs' method when the object is fully in the player's hands.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of the OnPlayerUnGrabbedAnObject event and what triggers it ?,OnPlayerUnGrabbedAnObject is called when the player fully un grabs an object. It is called by 'GrabbableObjects.cs' when the object is fully out of the player's hands.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of the OnPlayerGotHit event and what triggers it ?,OnPlayerGotHit event is called when the player gets hit by the beast. It is called by 'BeastAttack.cs' when the player's collider collides with a collider which has the beast tag.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of the OnPlayerHealthEnded event and what triggers it ?,OnPlayerHealthEnded event is called when the player health reaches 0. It is called by 'PlayerHealthManager.cs' when the player health is zero.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the purpose of the OnPlayerRespawned event and what triggers it ?,OnPlayerRespawned event is called when the player fully respawns. It is called by 'DeathRespawnManager.cs' when the player reaches the respawner.
PlayerBehaviorEventHub.cs,In 'PlayerBehaviorEventHub.cs' what is the scope of the class ?,The class is public and static.
PlayerBehaviorEventHub.cs,in 'PlayerBehaviorEventHub.cs' what is the purpose of events in this class ? How they are implemented ?,"This class is following the EventHub pattern. For each type of event, it has 2 methods: a static event and a static method with the same name. Implementing it this way allows any class to listen to an event by adding its method to the event's action, and trigger the event by calling the static method."
PlayerBehaviorEventHub.cs,"in 'PlayerBehaviorEventHub.cs' any class can trigger an event by calling the static method, correct ? How ?","Yes, since the static method is public any class in the project can call it."
PlayerBehaviorEventHub.cs,"in 'PlayerBehaviorEventHub.cs' any class can listen to an event by adding its method to the event's action, correct ?","Yes, since the event is public any class in the project can add a method to its action and hence listen to it."
PlayerBehaviourEventHub,"In 'PlayerBehaviourEventHub.cs', what C# event is used to listen to the interaction between a player and a grabbable object?","```csharp
public static event Action<GrabbableObjects> OnGrabbableObjectInteracted;
```"
PlayerBehaviourEventHub,How is the 'PlayerGrabbedAnObject' event triggered in 'PlayerBehaviourEventHub.cs'?,"```csharp
public static void PlayerGrabbedAnObject() => OnPlayerGrabbedAnObject?.Invoke();
```"
PlayerBehaviourEventHub,"In 'PlayerBehaviourEventHub.cs', what event is called when the object is fully unGrabbed (player fully unGrabbed an object)?","```csharp
public static event Action OnPlayerUnGrabbedAnObject;
```"
PlayerBehaviourEventHub,"In 'PlayerBehaviourEventHub.cs', what is the name of the event that is triggered when the player gets hit by the beast?","```csharp
public static event Action OnPlayerGotHit;
```"
PlayerBehaviourEventHub,How is the 'PlayerHealthEnded' event invoked in 'PlayerBehaviourEventHub.cs'?,"```csharp
public static void PlayerHealthEnded() => OnPlayerHealthEnded?.Invoke();
```"
PlayerBehaviourEventHub,What C# event is used to listen to the player's respawn in 'PlayerBehaviourEventHub.cs'?,"```csharp
public static event Action OnPlayerRespawned;
```"
PlayerBehaviourEventHub,"In 'PlayerBehaviourEventHub.cs', how is the 'GrabbableObjectInteracted' event triggered?","```csharp
public static void GrabbableObjectInteracted(GrabbableObjects obj) => OnGrabbableObjectInteracted?.Invoke(obj);
```"
PlayerBehaviourEventHub,How is the 'PlayerUnGrabbedAnObject' event triggered in 'PlayerBehaviourEventHub.cs'?,"```csharp
public static void PlayerUnGrabbedAnObject() => OnPlayerUnGrabbedAnObject?.Invoke();
```"
PlayerBehaviourEventHub,"In 'PlayerBehaviourEventHub.cs', how is the 'OnPlayerGotHit' event triggered?","```csharp
public static void PlayerGotHit() => OnPlayerGotHit?.Invoke();
```"
PlayerBehaviourEventHub,What C# event is used to listen to the player's health reaching 0 in 'PlayerBehaviourEventHub.cs'?,"```csharp
public static event Action OnPlayerHealthEnded;
```"
UiEventHub.cs,What is the purpose of the UiEventHub class?,The UiEventHub class allows for communication between different components without requiring direct references. It implements the observer or listener design pattern.
UiEventHub.cs,How does the UiEventHub class facilitate communication between components?,"The UiEventHub class provides events that components can subscribe to, allowing them to receive notifications when specific actions occur."
UiEventHub.cs,What is the purpose of the OnMainHint event in the UiEventHub class?,The OnMainHint event is used by the InteractableObject class when the player is looking at an object with a hint message. It passes the hint text as a parameter to the event subscribers.
UiEventHub.cs,How do components subscribe to the OnMainHint event in the UiEventHub class?,"Components can subscribe to the OnMainHint event by adding a method to the event delegate, which is of type Action<string>."
UiEventHub.cs,What is the purpose of the MainHint method in the UiEventHub class?,"The MainHint method is used to trigger the OnMainHint event, passing the hint text as a parameter. It invokes the event delegate, which in turn calls the methods subscribed to the event."
UiEventHub.cs,What is the purpose of the OnCurrentObjectiveUpdate event in the UiEventHub class?,The OnCurrentObjectiveUpdate event is used to update the current main objective of the game. It passes the new objective text as a parameter to the event subscribers.
UiEventHub.cs,How do components subscribe to the OnCurrentObjectiveUpdate event in the UiEventHub class?,"Components can subscribe to the OnCurrentObjectiveUpdate event by adding a method to the event delegate, which is of type Action<string>."
UiEventHub.cs,What is the purpose of the CurrentObjectiveUpdate method in the UiEventHub class?,"The CurrentObjectiveUpdate method is used to trigger the OnCurrentObjectiveUpdate event, passing the new objective text as a parameter. It invokes the event delegate, which in turn calls the methods subscribed to the event."
UiEventHub.cs,What design pattern does the UiEventHub class implement?,The UiEventHub class implements the observer or listener design pattern.
UiEventHub.cs,What is the benefit of using the observer or listener design pattern in the UiEventHub class?,"The observer or listener design pattern allows components to communicate with each other without having direct references, making the code more flexible and maintainable."
UiEventHub.cs,"In \'UiEventHub.cs\', how does \'MainHint\' method call the \'OnMainHint\' event?"," ```csharp
public static void MainHint(string message) => OnMainHint?.Invoke(message);
``` "
UiEventHub.cs,Which Unity component calls \'MainHint\' in \'UiEventHub.cs\' when player is looking at an interactable object with hint message?," ```csharp
InteractableObject.cs
``` "
UiEventHub.cs,What is the purpose of \'OnCurrentObjectiveUpdate\' event in \'UiEventHub.cs\'?," ```csharp
The event is used to update the current main objective of the game.
``` "
UiEventHub.cs,Which method triggers \'OnCurrentObjectiveUpdate\' event in \'UiEventHub.cs\'?," ```csharp
public static void CurrentObjectiveUpdate(string message) => OnCurrentObjectiveUpdate?.Invoke(message);
``` "
UiEventHub.cs,"In \'UiEventHub.cs\', what is the method parameter type of \'MainHint\' event?"," ```csharp
string
``` "
UiEventHub.cs,What type of delegate is used to define \'OnCurrentObjectiveUpdate\' event in \'UiEventHub.cs\'?," ```csharp
Action<string>
``` "
UiEventHub.cs,In which Unity component does \'CurrentObjectiveUpdate\' method call \'OnCurrentObjectiveUpdate\' event?," ```csharp
PowerSwitchUiHelper.cs
``` "
UiEventHub.cs,"In \'UiEventHub.cs\', what is the name of the event that is triggered when player is looking at an interactable object with a hint message?"," ```csharp
OnMainHint
``` "
UiEventHub.cs,What is the method parameter type of \'OnCurrentObjectiveUpdate\' event in \'UiEventHub.cs\'?," ```csharp
string
``` "
UiEventHub.cs,What type of delegate is used to define \'OnMainHint\' event in \'UiEventHub.cs\'?," ```csharp
Action<string>
``` "
FallenToVoidObjectDestroyer.cs,What is the purpose of the FallenToVoidObjectDestroyer class?,To destroy any object that falls to the void.
FallenToVoidObjectDestroyer.cs,How does FallenToVoidObjectDestroyer achieve the purpose?,"The FallenToVoidObjectDestroyer class contains a trigger Collider. If any object enters the collider, which is at the bottom of the level, the object will be destroyed."
FallenToVoidObjectDestroyer.cs,What is the function body of the OnTriggerEnter() function?,"The OnTriggerEnter() function takes a Collider parameter, other. It destroys the object associated with the Collider, that is other.gameObject."
FallenToVoidObjectDestroyer.cs,Where is the FallenToVoidObjectDestroyer positioned in a level?,"The FallenToVoidObjectDestroyer is positioned at the very bottom of the level, making it effective in detecting any objects that fall to the void."
FallenToVoidObjectDestroyer.cs,What happens when an object enters the trigger Collider of FallenToVoidObjectDestroyer?,"When an object enters the trigger Collider of FallenToVoidObjectDestroyer, the object is destroyed."
FallenToVoidObjectDestroyer.cs,Is the position of FallenToVoidObjectDestroyer in the level crucial?,"Yes, the position of FallenToVoidObjectDestroyer is crucial. It must be placed at the very bottom of the level to be effective."
FallenToVoidObjectDestroyer.cs,What is the OnTriggerEnter() function?,The OnTriggerEnter() function detects when another Collider touches its trigger area.
FallenToVoidObjectDestroyer.cs,What does the object with the FallenToVoidObjectDestroyer component represent?,The object with the FallenToVoidObjectDestroyer component represents the bottom of the level.
FallenToVoidObjectDestroyer.cs,What is the purpose of the Destroy() function?,"The Destroy() function destroys the object specified as a parameter. In this case, it destroys the object that entered the trigger Collider."
FallenToVoidObjectDestroyer.cs,What happens when an object is destroyed by the fallenToVoidObjectDestroyer?,"When an object is destroyed by the fallenToVoidObjectDestroyer, it is removed from the scene and destroyed in memory."
FallenToVoidObjectDestroyer.cs,What is the purpose of the 'FallenToVoidObjectDestroyer' class?," ```csharp
//an object with this component is at the very bottom of any level, if anything hits it, it will be destroyed
``` "
FallenToVoidObjectDestroyer.cs,"In 'FallenToVoidObjectDestroyer.cs', what is the name of the function that gets called when an object enters the collider of the object that has this component attached to it?"," ```csharp
private void OnTriggerEnter(Collider other) {
  // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What happens in the 'OnTriggerEnter' method in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
Destroy(other.gameObject);
``` "
FallenToVoidObjectDestroyer.cs,"In 'FallenToVoidObjectDestroyer.cs', what does the variable 'other' represent?"," ```csharp
// code here
private void OnTriggerEnter(Collider other) {
    // code here
}
``` "
FallenToVoidObjectDestroyer.cs,"In 'FallenToVoidObjectDestroyer.cs', what is the data type of the 'other' variable?"," ```csharp
private void OnTriggerEnter(Collider other) {
    // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What is the purpose of the comment '// code here' in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
//an object with this component is at the very bottom of any level, if anything hits it, it will be destroyed
private void OnTriggerEnter(Collider other) {
  // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What is the accessibility of the 'OnTriggerEnter' method in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
private void OnTriggerEnter(Collider other) {
  // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What are the parameters of the 'OnTriggerEnter' method in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
private void OnTriggerEnter(Collider other) {
  // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What is the return type of the 'OnTriggerEnter' method in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
private void OnTriggerEnter(Collider other) {
  // code here
}
``` "
FallenToVoidObjectDestroyer.cs,What is the name of the class that is being used in 'FallenToVoidObjectDestroyer.cs'?," ```csharp
public class FallenToVoidObjectDestroyer : MonoBehaviour {
    // code here
}
``` "
PlayerDetector.cs,What is the function of PlayerDetector.cs?,"Detect when a player enters the PlayerDetector component's trigger zone, sending out a global event and triggering the onTriggerEnter event."
PlayerDetector.cs,What is the purpose of '_id' field in PlayerDetector.cs?,It acts as an identifier that is sent out along with the global event when the player triggers the detection zone.
PlayerDetector.cs,What is '_oneTime' purpose in PlayerDetector.cs?,"If '_oneTime' field is enabled, the PlayerDetector component will be destroyed after triggering the detection zone for the first time."
PlayerDetector.cs,What is the function of 'shoutOnTrigger' variable in PlayerDetector.cs?,It determines whether the global event is triggered when the player enters the detection zone.
PlayerDetector.cs,What is the 'onTriggerEnter' field for in PlayerDetector.cs?,It allows the user to add an event that will be triggered when the player enters the detection zone.
PlayerDetector.cs,What method is executed when a player enters the detection zone?,It executes the 'OnTriggerEnter' method.
PlayerDetector.cs,What is the purpose of 'LevelEventHub.PlayerDetectorTriggered(id);' in PlayerDetector.cs?,"It broadcasts a global event indicating that a player has triggered the detection zone, passing in the '_id' as identification."
PlayerDetector.cs,What happens if the 'oneTime' field is set to true?,"If 'oneTime' is enabled, the PlayerDetector component will be destroyed after the first time the player enters the detection zone."
PlayerDetector.cs,"In PlayerDetector.cs, what event is triggered when the player enters the trigger zone?","When the player enters the trigger zone, 'onTriggerEnter' event is triggered."
PlayerDetector.cs,What is the default value of '_shoutOnTrigger' field in PlayerDetector.cs?,"'_shoutOnTrigger' has a default value of 'true', meaning that the global event will be broadcast by default when the player enters the detection zone."
PlayerDetector.cs,"In the 'PlayerDetector' class, what is the code used to check if the object should be destroyed after the first trigger?","```csharp
if (oneTime) Destroy(gameObject);
```"
PlayerDetector.cs,How does the 'PlayerDetector' class determine if the object should broadcast globally?,"```csharp
if (shoutOnTrigger) LevelEventHub.PlayerDetectorTriggered(id);
```"
PlayerDetector.cs,"In the 'PlayerDetector' class, what is the code used to broadcast a global event?","```csharp
LevelEventHub.PlayerDetectorTriggered(id);
```"
PlayerDetector.cs,What code do you use if you want the 'PlayerDetector.cs' to be destroyed after the first trigger?,"```csharp
oneTime = true;
```"
PlayerDetector.cs,"In the 'PlayerDetector' class, what is the code used to invoke the onTriggerEnter event?","```csharp
onTriggerEnter?.Invoke();
```"
PlayerDetector.cs,"Within the 'PlayerDetector' class, what code should you use to stop broadcasting globally?","```csharp
shoutOnTrigger = false;
```"
PlayerDetector.cs,What is the name of the variable in 'PlayerDetector' class that stores a unique identifier for the object?,"```csharp
id
```"
PlayerDetector.cs,"In the 'PlayerDetector' class, what is the code that stores the id in the PlayerDetectorTriggered event?","```csharp
LevelEventHub.PlayerDetectorTriggered(id);
```"
PlayerDetector.cs,What is the purpose of the 'onTriggerEnter' variable in 'PlayerDetector' class?,"```csharp
The onTriggerEnter variable is a unity event that can be set in the inspector.
```"
PlayerDetector.cs,What is the syntax to invoke the 'onTriggerEnter' event in 'PlayerDetector' class?,"```csharp
onTriggerEnter?.Invoke();
```"
SimpleLight.cs,What is the purpose of the SimpleLight class in Unity projects? ,"The SimpleLight class manages simple lights in the scene, handling the turning on and off of these lights."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the materials field variable? ","The materials field variable stores a reference to the LightMaterialDatabaseSO Scriptable Object, which contains a database of materials used for different light types."
SimpleLight.cs,"In the SimpleLight class, how is the complexity of the light determined? ","The complexity of the light is determined by checking the child count of the light object. If the light has at least one child, it is considered a complex light."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the _meshRenderer variable? ","The _meshRenderer variable stores a reference to the Renderer component of the light object, which is used to change the material of the light."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the TurnOn method? ",The TurnOn method turns on the light by changing the material of the light to the appropriate material based on the specified light type and also handles turning on an additional light if the light is complex.
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the isForced parameter in the TurnOn method? ","The isForced parameter in the TurnOn method specifies whether the light should be turned on regardless of its current state. If it's set to false, the light will only be turned on if it's currently off."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the TurnOff method? ",The TurnOff method turns off the light by changing the material of the light to the off material and also handles turning off an additional light if the light is complex.
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the additional light and how is it handled? ","For complex lights, an additional child Unity Light component is used to enhance the lighting effect. When the light is turned on, the additional light is enabled, and its color is set to match the emissive color of the light's material."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the Awake method? ","The Awake method is called when the light object is instantiated and is used to initialize the light's properties. It sets up the material database, renderer reference, and checks if the light is complex by checking for child objects."
SimpleLight.cs,"In the SimpleLight class, what is the purpose of the GetLightByType method in the LightMaterialDatabaseSO Scriptable Object? ",The GetLightByType method in the LightMaterialDatabaseSO Scriptable Object is used to fetch the appropriate material for a specific light type. The SimpleLight class uses this method to obtain the material for turning on the light.
SimpleLight.cs,In 'SimpleLight.cs' how do we manage to enable/disable the light?,"```csharp
//turns the light on
public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
    //if the light is already on, don't turn it on again
    if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

    //update the material (from the database)
    var material = materials.GetLightByType(lightType);
    _meshRenderer.sharedMaterial = material;

    //if the light has an additional light, turn it on and set its color
    if (_isComplex) {
        _additionalLight.enabled = true;
        //get the emissive color from the material properties and set it as the additional light color
        Color color = material.GetColor(""_EmissiveColor"");
        _additionalLight.color = color.Normalize();
    }
}

//turns the light off
public void TurnOff() {
    //change the material to the off material
    var material = materials.GetLightByType(LightColor.Off);
    _meshRenderer.sharedMaterial = material;
    //if the light has an additional light, turn it off
    if (_isComplex) _additionalLight.enabled = false;
}
```"
SimpleLight.cs,In 'SimpleLight.cs' what does 'TurnOn()' do if the light is already on?,"```csharp
//turns the light on
public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
    //if the light is already on, don't turn it on again
    if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

    //update the material (from the database)
    var material = materials.GetLightByType(lightType);
    _meshRenderer.sharedMaterial = material;

    //if the light has an additional light, turn it on and set its color
    if (_isComplex) {
        _additionalLight.enabled = true;
        //get the emissive color from the material properties and set it as the additional light color
        Color color = material.GetColor(""_EmissiveColor"");
        _additionalLight.color = color.Normalize();
    }
}
```"
SimpleLight.cs,In 'SimpleLight.cs' what happens in 'Awake()'?,"```csharp
private void Awake() {
    _meshRenderer = GetComponent<Renderer>();

    //set _isComplex: if the light has a Unity Light child, it is a complex light
    _isComplex = transform.childCount != 0;
    if (_isComplex) _additionalLight = transform.GetComponentInChildren<Light>();
}
```"
SimpleLight.cs,In 'SimpleLight.cs' how is '_isComplex' set?,"```csharp
private void Awake() {
    _meshRenderer = GetComponent<Renderer>();

    //set _isComplex: if the light has a Unity Light child, it is a complex light
    _isComplex = transform.childCount != 0;
    if (_isComplex) _additionalLight = transform.GetComponentInChildren<Light>();
}
```"
SimpleLight.cs,In 'SimpleLight.cs' how do complex lights work?,"```csharp
//turns the light on
public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
    //if the light is already on, don't turn it on again
    if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

    //update the material (from the database)
    var material = materials.GetLightByType(lightType);
    _meshRenderer.sharedMaterial = material;

    //if the light has an additional light, turn it on and set its color
    if (_isComplex) {
        _additionalLight.enabled = true;
        //get the emissive color from the material properties and set it as the additional light color
        Color color = material.GetColor(""_EmissiveColor"");
        _additionalLight.color = color.Normalize();
    }
}
```"
SimpleLight.cs,In 'SimpleLight.cs' what does 'TurnOff()' do?,"```csharp
public void TurnOff() {
    //change the material to the off material
    var material = materials.GetLightByType(LightColor.Off);
    _meshRenderer.sharedMaterial = material;
    //if the light has an additional light, turn it off
    if (_isComplex) _additionalLight.enabled = false;
}
```"
SimpleLight.cs,In 'SimpleLight.cs' what does '_meshRenderer' have and what does it do with it?,"```csharp
private Renderer _meshRenderer;
```

```csharp
_meshRenderer = GetComponent<Renderer>();
```"
SimpleLight.cs,In 'SimpleLight.cs' what does 'GetLightByType(LightColor lightType)' do?,"```csharp
//turns the light on
public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
    //if the light is already on, don't turn it on again
    if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

    //update the material (from the database)
    var material = materials.GetLightByType(lightType);
    _meshRenderer.sharedMaterial = material;

    //if the light has an additional light, turn it on and set its color
    if (_isComplex) {
        _additionalLight.enabled = true;
        //get the emissive color from the material properties and set it as the additional light color
        Color color = material.GetColor(""_EmissiveColor"");
        _additionalLight.color = color.Normalize();
    }
}
```"
SimpleLight.cs,In 'SimpleLight.cs' how does the material database work?,"```csharp
//the material database
[SerializeField] private LightMaterialDatabaseSO materials;
```"
SimpleLight.cs,In 'SimpleLight.cs' how does a complex light get its color?,"```csharp
//turns the light on
public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
    //if the light is already on, don't turn it on again
    if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

    //update the material (from the database)
    var material = materials.GetLightByType(lightType);
    _meshRenderer.sharedMaterial = material;

    //if the light has an additional light, turn it on and set its color
    if (_isComplex) {
        _additionalLight.enabled = true;
        //get the emissive color from the material properties and set it as the additional light color
        Color color = material.GetColor(""_EmissiveColor"");
        _additionalLight.color = color.Normalize();
    }
}
```"
KitsController.cs,"In the 'KitsController.cs' class, what are the responsibilities of the '_lastFacing' variable?",The '_lastFacing' variable is used to calculate the rotation velocity of the Kits. It stores the current forward direction of the Kits and is updated in the 'UpdateAnimator' method.
KitsController.cs,What is the purpose of the 'UpdateAnimator' method in the 'KitsController.cs' class?,"The 'UpdateAnimator' method is responsible for updating the animator parameters of the Kits, specifically the 'Velocity' and 'RotationVelocity' parameters. These parameters control the animation of the Kits, such as its running speed and turning speed."
KitsController.cs,"In the 'KitsController.cs' script, what is the purpose of the 'GoThere' method?",The 'GoThere' method is used to start the Kits running towards a random destination. It sets the destination of the NavMeshAgent to a random child of the 'destinations' transform.
KitsController.cs,What is the difference between the 'LightsOut' and 'LightsBackOn' methods in the 'KitsController.cs' class?,"The 'LightsOut' method is called when the power goes out, causing the Kits' mask to light up. The 'LightsBackOn' method is called when the power is restored, causing the Kits' mask to turn off."
KitsController.cs,How does the 'KitsController.cs' class handle subscription and unsubscription to events?,The 'KitsController.cs' class subscribes to events in the 'OnEnable' method and unsubscribes from events in the 'OnDisable' method. This ensures that the class only listens to events while it is active.
KitsController.cs,What are the names of the two animator parameters that control the animation of the Kits?,The two animator parameters that control the animation of the Kits are 'Velocity' and 'RotationVelocity'.
KitsController.cs,What is the purpose of the 'destinations' transform in the 'KitsController.cs' class?,"The 'destinations' transform is used to store the possible destinations that the Kits can run to. When the 'GoThere' method is called, the Kits will choose a random child of the 'destinations' transform as its destination."
KitsController.cs,What is the name of the material that is used for the Kits' mask?,The name of the material that is used for the Kits' mask is 'kitsMaskMaterial'.
KitsController.cs,What is the value of the 'KitsRunAnimationConvertedToAgentSpeed' constant?,The value of the 'KitsRunAnimationConvertedToAgentSpeed' constant is 5.35f.
KitsController.cs,"In the 'KitsController.cs' script, what component is used to control the movement of the Kits?",The 'NavMeshAgent' component is used to control the movement of the Kits.
KitsController.cs,"In 'KitsController.cs', how does the 'UpdateAnimator()' function calculate and normalize velocity?"," ```csharp
float velocity = navMeshAgent.velocity.magnitude / KitsRunAnimationConvertedToAgentSpeed;
``` "
KitsController.cs,"In 'KitsController.cs', how does the 'UpdateAnimator()' function calculate the current angular velocity?"," ```csharp
Vector3 currentFacing = transform.forward;
var currentAngularVelocity =
  Vector3.SignedAngle(currentFacing, _lastFacing, Vector3.up) / (Time.deltaTime * 180); //degrees per second
``` "
KitsController.cs,"In 'KitsController.cs', how does the 'GoThere()' function set the navmesh destination?"," ```csharp
navMeshAgent.SetDestination(destinations.position);
``` "
KitsController.cs,"In 'KitsController.cs', how does the 'LightsOut()' function change the color of the Kits mask material?"," ```csharp
kitsMaskMaterial.SetColor(""_EmissiveColor"", new Color(17.1483746f, 17.1483746f, 17.1483746f));
``` "
KitsController.cs,"In 'KitsController.cs', how does 'OnEnable()' subscribe to the 'OnLightsOut' and 'OnLightsBackOn' events?"," ```csharp
LevelEventHub.OnLightsOut += LightsOut;
LevelEventHub.OnLightsBackOn += LightsBackOn;
``` "
KitsController.cs,"In 'KitsController.cs', how does 'OnDisable()' unsubscribe from the 'OnLightsOut' and 'OnLightsBackOn' events?"," ```csharp
LevelEventHub.OnLightsOut -= LightsOut;
LevelEventHub.OnLightsBackOn -= LightsBackOn;
``` "
KitsController.cs,"In 'KitsController.cs', what is the purpose of the '_lastFacing' variable?"," ```csharp
private Vector3 _lastFacing;
``` 
The '_lastFacing' variable is used to calculate the current angular velocity of the Kits, which is a parameter in the Kits animation's 2D blend tree."
KitsController.cs,"In 'KitsController.cs', what are the animator parameters used for the Kits animation's 2D blend tree?"," ```csharp
private static readonly int Velocity = Animator.StringToHash(""Velocity"");
private static readonly int RotationVelocity = Animator.StringToHash(""RotationVelocity"");
``` "
KitsController.cs,"In 'KitsController.cs', what is the purpose of the 'UpdateAnimator()' function?"," ```csharp
private void UpdateAnimator() {
    //calculate and normalize velocity
    float velocity = navMeshAgent.velocity.magnitude / KitsRunAnimationConvertedToAgentSpeed;

    //set velocity
    animator.SetFloat(Velocity, velocity);
........
``` 
The 'UpdateAnimator()' function is responsible for updating the animator parameters of the Kits animation's 2D blend tree. It calculates and normalizes the velocity and rotation velocity, and sets them as parameters in the animator."
KitsController.cs,"In 'KitsController.cs', what does the 'GoThere()' function do?"," ```csharp
[ContextMenu(""go there"")]
private void GoThere() {
    // navMeshAgent.SetDestination(destinations.GetChild(Random.Range(0,destinations.childCount-1)).position);
    navMeshAgent.SetDestination(destinations.position);
}
``` 
The 'GoThere()' function sets the navmesh destination for the Kits. It uses the 'navMeshAgent' to set the destination to a random child of the 'destinations' transform, or to the position of the 'destinations' transform."
LevelLightsManager.cs,what's the purpose of the LevelLightsManager.cs class?,"The LevelLightsManager class is used to manage the lighting of the level, including turning off the lights, turning them back on when all Power Switches are activated, and controlling emergency lights."
LevelLightsManager.cs,What is the lightMaterialDatabaseSo?,The lightMaterialDatabaseSo is a scriptable object that contains references to all of the different light materials that are used in the level.
LevelLightsManager.cs,how does turning off the lights happen?,"To turn off the lights, the class sets all emissive materials to 0 emissive(dimmed), plays a sound, and updates the UI."
LevelLightsManager.cs,How do the lights turn back on?,"To turn the lights back on, the class changes all emissive materials that were previously dimmed to full emissive, updates the UI, and turns off emergency lights."
LevelLightsManager.cs,How does the class handle power switch activation?,"When a power switch is activated, the class increments a power switch activated count and updates the UI. If all power switches are activated, the lights are turned back on and the power switch activated count is reset to 0."
LevelLightsManager.cs,What event is broadcast when the lights go out?,"When the lights go out, the LevelLightsManager class broadcasts the LightsOut event."
LevelLightsManager.cs,What event is broadcast when the lights come back on?,"When the lights turn back on, the LevelLightsManager class broadcasts the LightsBackOn event."
LevelLightsManager.cs,what happens when OnEnable() is called?,"When OnEnable is called, the LevelLightsManager class starts listening to events such as OnPowerSwitchActivated."
LevelLightsManager.cs,what happens when OnDisable() is called?,"When OnDisable is called, the LevelLightsManager class stops listening to events such as OnPowerSwitchActivated."
LevelLightsManager.cs,what does the powerSwitchUiHelper variable do?,The powerSwitchUiHelper variable is used to update the UI to show the status of the power switches and the lighting in the level.
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the code that turns off the lights, plays the power outage sound, broadcasts the LightsOut event, and activates emergency lights?"," ```csharp
public void LightsOut() {
        //play sound and update ui
        beastScreamSource.PlayOneShot(MusicSoundManager.Instance.BeastScream);
        powerSwitchUiHelper.LightsOut();

        //broadcast event
        LevelEventHub.LightsOut();
        GlobalInGameData.IsPowerOn = false;

        //set all emissive materials to 0 emissive(dimmed) (turning off the power)
        foreach (Material lightGunLightMaterial in lightMaterialDatabaseSo.GetAllLightGunLightsExceptOff()) {
            lightGunLightMaterial.DOFloat(0f, ""_MyEmissiveIntensity"", 2f).SetEase(Ease.OutExpo);
        }

        //turn on emergency lights
        emergencyLights.SetActive(true);
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the code that turns the power back on, updates the UI, broadcasts the LightsBackOn event, changes the emissive materials to full emissive, and turns off emergency lights?"," ```csharp
private void LightsBackOn() {
        //update ui 
        powerSwitchUiHelper.LightsBackOn();
        //broadcast event
        LevelEventHub.LightsBackOn();
        GlobalInGameData.IsPowerOn = true;

        //change all emissive materials that were previously dimmed to full emissive (bringing back the power)
        foreach (Material lightGunLightMaterial in lightMaterialDatabaseSo.GetAllLightGunLightsExceptOff()) {
            lightGunLightMaterial.DOFloat(Constants.LightGunLightEmissionAmount, ""_MyEmissiveIntensity"", 2f)
                .SetEase(Ease.InExpo);
        }

        //turn off emergency lights
        emergencyLights.SetActive(false);
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, how does the OnPowerSwitchActivated method increment the activated power switch count, update the UI, and check if all power switches are activated to turn back the power?"," ```csharp
private void OnPowerSwitchActivated(int id) {
        _powerSwitchActivated++;

        //update ui
        powerSwitchUiHelper.PowerSwitchActivated(_powerSwitchActivated);

        //if all power switches are activated - turn back the power
        if (_powerSwitchActivated == powerSwitchCount) {
            LightsBackOn();
            _powerSwitchActivated = 0;
        }
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the purpose of the Start method?"," ```csharp
private void Start() {
        powerSwitchUiHelper = new PowerSwitchUiHelper(powerSwitchCount);
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, how does the OnEnable method subscribe to the OnPowerSwitchActivated event?"," ```csharp
private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPowerSwitchActivated += OnPowerSwitchActivated;
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, how does the OnDisable method unsubscribe from the OnPowerSwitchActivated event?"," ```csharp
private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerSwitchActivated -= OnPowerSwitchActivated;
    }
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the name of the Material database that is used to store the light materials?"," ```csharp
[SerializeField] private LightMaterialDatabaseSO lightMaterialDatabaseSo; 
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the name of the GameObject that is used to store the emergency lights?"," ```csharp
[SerializeField] private GameObject emergencyLights;
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the name of the AudioSource that is used to play the beast scream sound?"," ```csharp
[SerializeField] private AudioSource beastScreamSource;
``` "
LevelLightsManager.cs,"In LevelLightsManager.cs, what is the name of the variable used to store the count of power switches in the level?"," ```csharp
[SerializeField] private int powerSwitchCount;
``` "
LevelManager.cs,What is the purpose of the 'LevelManager' class?,"The 'LevelManager' class is an abstract singleton class that manages the loading and unloading of levels, sets starting positions for player and beast, and handles some level-specific fields and behaviors."
LevelManager.cs,What are some of the generic level fields in the 'LevelManager' class?,"Some of the generic level fields in the 'LevelManager' class include the 'mainDoor', 'ambientSound', 'levelNumber', and 'playerRespawns'."
LevelManager.cs,What is the 'mainMenuCameraTransform' field in the 'LevelManager' class used for?,"The 'mainMenuCameraTransform' field stores the position and rotation of the main menu camera, which is used if the player is not in debug mode."
LevelManager.cs,How does the 'LevelManager' class handle the initialization of level-specific dependencies and data?,"In the 'Awake' method, the 'LevelManager' class injects some level-specific dependencies and data into various managers and global variables, such as player respawn positions, beast positions, and current level number."
LevelManager.cs,What is the purpose of the '_startTime' variable in the 'LevelManager' class?,"The '_startTime' variable stores the time when the level starts, which is used to calculate the time it takes the player to beat the level."
LevelManager.cs,How does the 'LevelManager' class handle unloading a level when the player enters the next level?,"When the player enters the next level, the 'LevelManager' class unloads the current level by moving the main door to a middle scene and calling the 'UnloadSceneAsync' method."
LevelManager.cs,What happens when the player finishes and exits a level?,"When the player finishes and exits a level, the 'LevelManager' class calculates the time taken to beat the level, locks the main door to prevent re-entry, and loads the next level using a coroutine."
LevelManager.cs,What is the purpose of the 'PlayerDetectorTriggered' method in the 'LevelManager' class?,The 'PlayerDetectorTriggered' method listens for events when a player detector is triggered. It handles both the case when the player exits the level and the case when the player fully enters the next level.
LevelManager.cs,How does the 'LevelManager' class enable the player and gameplay UI when the game starts?,"When the game starts, the 'LevelManager' class enables the player and gameplay UI by calling the 'SetActive' method on the 'PlayerManager' instance and calling the 'EnableGameplayUi' method on the 'GamePlayCanvasManager' instance."
LevelManager.cs,What methods does the 'LevelManager' class subscribe to and unsubscribe from?,The 'LevelManager' class subscribes to the 'OnPlayerDetectorTriggered' event from the 'LevelEventHub' and the 'OnGameStart' event from the 'GlobalEventHub'. It unsubscribes from these events when it is disabled.
LevelManager.cs,What is the name of the protected Transform field that references the position where the beast will sleep?," ```csharp\beastSleepPos
``` "
LevelManager.cs,What is the name of the method in which the ambient sound is played?," ```csharp\Start
``` "
LevelManager.cs,What is the name of the protected Transform field that references the position where the beast will spawn on the mesh?," ```csharp\beastSpawnOnMeshPos
``` "
LevelManager.cs,What is the name of the protected Transform field that references the main door?," ```csharp\mainDoor
``` "
LevelManager.cs,What is the name of the protected field that stores the total time taken by the player to complete the level?," ```csharp\_startTime
``` "
LevelManager.cs,What is the name of the protected Transform field that references the position where the player should spawn at the start of the level?," ```csharp\playerSpawn
``` "
LevelManager.cs,What is the name of the protected Transform field that references the positions where the player can respawn if they die?," ```csharp\playerRespawns
``` "
LevelManager.cs,What is the name of the protected Transform field that references the positions where the beast can roam?," ```csharp\beastRoamingPositions
``` "
LevelManager.cs,What is the name of the protected method that is called when the player fully enters the next level?," ```csharp\UnloadLevel
``` "
LevelManager.cs,What is the name of the protected method that is called when the player exits the level?," ```csharp\FinishedAndExitedLevel
``` "
LevelRoomPuzzleMaster,What is the purpose of the LevelRoomPuzzleMaster class?,The LevelRoomPuzzleMaster class is a base abstract class for all puzzle room managers in a Unity project.
LevelRoomPuzzleMaster,What is the significance of inheriting from the LevelRoomPuzzleMaster class?,Inheriting from the LevelRoomPuzzleMaster class enforces the implementation of the OnEnable and OnDisable methods.
LevelRoomPuzzleMaster,What is the purpose of the OnStart method in the LevelRoomPuzzleMaster class?,The OnStart method is a virtual method that provides an optional entry point for initialization code when the puzzle room manager is started.
LevelRoomPuzzleMaster,What is the primary responsibility of the OnEnable method in the LevelRoomPuzzleMaster class?,The OnEnable method is an abstract method that must be implemented in child classes and is intended for handling initialization logic when the puzzle room manager becomes active.
LevelRoomPuzzleMaster,What is the purpose of the OnDisable method in the LevelRoomPuzzleMaster class?,The OnDisable method is an abstract method that must be implemented in child classes and is intended for handling cleanup logic when the puzzle room manager is disabled.
LevelRoomPuzzleMaster,What is the significance of implementing the OnEnable and OnDisable methods in child classes?,Implementing the OnEnable and OnDisable methods in child classes ensures proper initialization and cleanup procedures when the puzzle room manager is activated or deactivated.
LevelRoomPuzzleMaster,Can the LevelRoomPuzzleMaster class be instantiated directly?,"No, the LevelRoomPuzzleMaster class cannot be instantiated directly because it is an abstract class."
LevelRoomPuzzleMaster,What is the purpose of defining the LevelRoomPuzzleMaster class as abstract?,"Defining the LevelRoomPuzzleMaster class as abstract serves as a base for other puzzle room manager classes to inherit from, enforcing the implementation of essential methods for proper functionality."
LevelRoomPuzzleMaster,What is the benefit of using an abstract class like LevelRoomPuzzleMaster?,"An abstract class like LevelRoomPuzzleMaster provides a standardized framework for child classes, ensuring consistent behavior and simplifying the development of puzzle room managers."
LevelRoomPuzzleMaster,What are some examples of concrete classes that might inherit from the LevelRoomPuzzleMaster class?,"Concrete classes inheriting from the LevelRoomPuzzleMaster class might include specific puzzle room manager classes, such as managers for different types of puzzles or rooms with unique mechanics."
LevelRoomPuzzleMaster,What is the name of the abstract method that is called when the object is first initialized?,"```csharp
public virtual void OnStart() { }
```"
LevelRoomPuzzleMaster,What is the name of the abstract method that is called when the object is first created?,"```csharp
public abstract void OnEnable();
```"
LevelRoomPuzzleMaster,What is the name of the abstract method that is called when the object is about to be deleted?,"```csharp
public abstract void OnDisable();
```"
LevelRoomPuzzleMaster,What is the type of the OnStart method?,"```csharp
public virtual void
```"
LevelRoomPuzzleMaster,What is the type of the OnEnable method?,"```csharp
public abstract void
```"
LevelRoomPuzzleMaster,What is the type of the OnDisable method?,"```csharp
public abstract void
```"
LevelRoomPuzzleMaster,What are the modifiers for the OnStart method?,"```csharp
public virtual
```"
LevelRoomPuzzleMaster,What are the modifiers for the OnEnable method?,"```csharp
public abstract
```"
LevelRoomPuzzleMaster,What are the modifiers for the OnDisable method?,"```csharp
public abstract
```"
LevelRoomPuzzleMaster,What is the base class of the LevelRoomPuzzleMaster class?,"```csharp
MonoBehaviour
```"
LevelSummaryAdapter.cs,What is the purpose of the LevelSummaryAdapter.cs class?,The LevelSummaryAdapter.cs class is responsible for displaying the previous level summary on the level summary screen.
LevelSummaryAdapter.cs,What is the purpose of the levelNumber variable in the LevelSummaryAdapter.cs class?,The levelNumber variable specifies the number of the level for which the summary is displayed.
LevelSummaryAdapter.cs,What is the purpose of the totalTime variable in the LevelSummaryAdapter.cs class?,The totalTime variable is a TextMeshPro component that displays the total time taken to complete the level.
LevelSummaryAdapter.cs,"In the Start() method of the LevelSummaryAdapter.cs class, what is the purpose of the PlayerPrefs.GetFloat() method?",The PlayerPrefs.GetFloat() method is used to retrieve the total time taken to complete the level from the player preferences.
LevelSummaryAdapter.cs,"In the Start() method of the LevelSummaryAdapter.cs class, what is the purpose of the Constants.PlayerPrefsKeys.LevelTime(levelNumber) string?",The Constants.PlayerPrefsKeys.LevelTime(levelNumber) string is used to specify the key under which the total time taken to complete the level is stored in the player preferences.
LevelSummaryAdapter.cs,What is the purpose of the ToString() method in the Start() method of the LevelSummaryAdapter.cs class?,The ToString() method is used to convert the total time taken to complete the level from a float to a string so that it can be displayed in the TextMeshPro component.
LevelSummaryAdapter.cs,What is the purpose of the Start() method in the LevelSummaryAdapter.cs class?,"The Start() method is called when the game object is initialized. In this class, it fetches the total time taken to complete the level from the player preferences and displays it in the TextMeshPro component."
LevelSummaryAdapter.cs,What is the purpose of the Update() method in the LevelSummaryAdapter.cs class?,"The Update() method is called once per frame. In this class, it does not appear to be used."
LevelSummaryAdapter.cs,What is the purpose of the FixedUpdate() method in the LevelSummaryAdapter.cs class?,"The FixedUpdate() method is called at a fixed time interval, typically used for physics calculations. In this class, it does not appear to be used."
LevelSummaryAdapter.cs,What is the purpose of the OnGUI() method in the LevelSummaryAdapter.cs class?,"The OnGUI() method is called for rendering and handling GUI events. In this class, it does not appear to be used."
LevelSummaryAdapter.cs,What is the purpose of 'LevelSummaryAdapter.cs' in unity?," ```csharp
LevelSummaryAdapter is a component that displays the previous level summary on the level summary screen.
``` "
LevelSummaryAdapter.cs,How does 'LevelSummaryAdapter.cs' display the previous level summary?," ```csharp
It gets the summary from the player preferences and sets it as the text of the 'totalTime' TextMeshPro object.
``` "
LevelSummaryAdapter.cs,Where does 'LevelSummaryAdapter.cs' get the previous level summary from?," ```csharp
It gets the summary from the player preferences using the 'Constants.PlayerPrefsKeys.LevelTime(levelNumber)' key.
``` "
LevelSummaryAdapter.cs,What is the data type of the 'levelNumber' field in 'LevelSummaryAdapter.cs'?," ```csharp
The 'levelNumber' field is of type 'int'.
``` "
LevelSummaryAdapter.cs,What is the name of the TextMeshPro object that displays the total time in 'LevelSummaryAdapter.cs'?," ```csharp
The name of the TextMeshPro object that displays the total time is 'totalTime'.
``` "
LevelSummaryAdapter.cs,When does 'LevelSummaryAdapter.cs' display the previous level summary?," ```csharp
The summary is displayed when the 'Start()' method is called, which is when the component is first activated.
``` "
LevelSummaryAdapter.cs,What is the name of the method that displays the previous level summary in 'LevelSummaryAdapter.cs'?," ```csharp
The method that displays the previous level summary is called 'Start()'.
``` "
LevelSummaryAdapter.cs,What is the purpose of the 'Constants.PlayerPrefsKeys.LevelTime(levelNumber)' key in 'LevelSummaryAdapter.cs'?," ```csharp
The 'Constants.PlayerPrefsKeys.LevelTime(levelNumber)' key is used to store the total time for a specific level.
``` "
LevelSummaryAdapter.cs,What is the data type of the 'totalTime' field in 'LevelSummaryAdapter.cs'?," ```csharp
The 'totalTime' field is of type 'TextMeshPro'.
``` "
LevelSummaryAdapter.cs,How does 'LevelSummaryAdapter.cs' set the text of the 'totalTime' TextMeshPro object?," ```csharp
It uses the 'SetText()' method to set the text of the TextMeshPro object.
``` "
PowerOutageBeastReleaseManager.cs,What is the purpose of the method ManagerForbiddenDoors() in the PowerOutageBeastReleaseManager class?,"The ManagerForbiddenDoors method locks the doors of the forbidden area and saves their previous lock state. It iterates through the forbidden area doors, saves their lock state, and if a door is not locked, it force closes and locks it."
PowerOutageBeastReleaseManager.cs,How does the PowerOutageBeastReleaseManager determine if it is ok to cut the power and release the beast?,"To determine if it is ok to cut the power and release the beast, the PowerOutageBeastReleaseManager class checks if the player is inside the forbidden area or holding something. If either condition is true, the power will not be cut and the beast will not be released."
PowerOutageBeastReleaseManager.cs,What is the purpose of the _oneSecondCounter variable?,"The _oneSecondCounter variable is used to create a custom update rate for performance reasons. It accumulates time and when it reaches 1 second, it calls the CustomFixedUpdate method."
PowerOutageBeastReleaseManager.cs,What is the purpose of the LevelEventHub.OnLightsBackOn event?,"The LevelEventHub.OnLightsBackOn event is used to listen for when the power is back on. When this event is triggered, the PowerOutageBeastReleaseManager class unlocks the previously locked forbidden area doors."
PowerOutageBeastReleaseManager.cs,How does the PowerOutageBeastReleaseManager check if the player is inside the forbidden area?,"The PowerOutageBeastReleaseManager class checks if the player is inside the forbidden area by checking if the player's position is inside any of the forbidden area colliders. If the player's position is inside any of these colliders, the method returns true, indicating that the player is inside the forbidden area."
PowerOutageBeastReleaseManager.cs,How does the PowerOutageBeastReleaseManager handle unlocking the forbidden area doors when the power is back on?,"When the power is back on, the PowerOutageBeastReleaseManager class unlocks the previously locked forbidden area doors by iterating through the doors and unlocking any door that was previously locked."
PowerOutageBeastReleaseManager.cs,What is the purpose of the ZeroOut() method?,"The ZeroOut method is used for debugging purposes. It sets the _timeUntilNextOutage variable to 0, which immediately triggers a power outage and releases the beast."
PowerOutageBeastReleaseManager.cs,What happens when the player enters the forbidden area?,"When the player enters the forbidden area, the PowerOutageBeastReleaseManager class checks if it is ok to cut the power and release the beast. If it is ok, the power is cut and the beast is released. If it is not ok, the power outage is prevented and the beast is not released."
PowerOutageBeastReleaseManager.cs,How does the PowerOutageBeastReleaseManager determine when to cut the power and release the beast?,"The PowerOutageBeastReleaseManager class has a variable called _timeUntilNextOutage. This variable is decremented by the time since the last update. When it reaches 0, the power is cut and the beast is released."
PowerOutageBeastReleaseManager.cs,What happens when the power is back on?,"When the power is back on, the PowerOutageBeastReleaseManager class unlocks the previously locked forbidden area doors by calling the LightsBackOn() method."
PowerOutageBeastReleaseManager,where do beast know where the player is located?," ```csharp
Vector3 playerPos = PlayerManager.Instance.playerHead.position;

//check if player is inside any forbidden area .
foreach (var forbiddenAreaCollider in forbiddenAreaColliders) {
  //each forbidden area has a box collider. check if player is inside any of them
  if (forbiddenAreaCollider.bounds.Contains(playerPos)) {
    Debug.Log(""time to cut the power but player inside forbidden area"");
    return true;
  }
}

return false;
``` "
PowerOutageBeastReleaseManager,What does the forbidden area contain?," ```csharp
[SerializeField] private SimpleDoor[] forbiddenAreaDoors;
[SerializeField] private Collider[] forbiddenAreaColliders;

private bool[] _forbiddenAreaDoorsIsLocked;
``` "
PowerOutageBeastReleaseManager,What happens when the beast is released?," ```csharp
//lock forbidden area doors
ManagerForbiddenDoors();
_timeUntilNextOutage = secondsBetweenPowerOutages;

//turn off the power
levelLightsManager.LightsOut();

//release the beast
BeastManager.Instance.ActivateBeast();
``` "
PowerOutageBeastReleaseManager,What is _timeUntilNextOutage used for?," ```csharp
private void CustomFixedUpdate() {
    //decrease time counter until next outage
    _timeUntilNextOutage -= _oneSecondCounter;
    _oneSecondCounter = 0;
``` "
PowerOutageBeastReleaseManager,What is IsItOkToCutThePowerAndReleaseBeast used for?," ```csharp
//if time is up and it is ok to cut the power and release the beast(player is not in forbidden area or holding something), do it
if (_timeUntilNextOutage < 0) {
  if (IsItOkToCutThePowerAndReleaseBeast()) CutPowerAndReleaseBeast();
}
``` "
PowerOutageBeastReleaseManager,How do you know if the player is inside a forbidden area?," ```csharp
//check if player is inside any forbidden area .
foreach (var forbiddenAreaCollider in forbiddenAreaColliders) {
  //each forbidden area has a box collider. check if player is inside any of them
  if (forbiddenAreaCollider.bounds.Contains(playerPos)) {
    Debug.Log(""time to cut the power but player inside forbidden area"");
    return true;
  }
}
``` "
PowerOutageBeastReleaseManager,How does the beast manager know when to activate the beast?," ```csharp
//release the beast
BeastManager.Instance.ActivateBeast();
``` "
PowerOutageBeastReleaseManager,What is done with forbidden doors when the power is back on?," ```csharp
private void LightsBackOn() {
    //unlock all previously locked forbidden area doors
    for (int i = 0; i < forbiddenAreaDoors.Length; i++) {
      if (!_forbiddenAreaDoorsIsLocked[i]) forbiddenAreaDoors[i].Unlock();
    }
}
``` "
PowerOutageBeastReleaseManager,What is done when cutPowerAndReleaseBeast is called?," ```csharp
private void CutPowerAndReleaseBeast() {
    //lock forbidden area doors
    ManagerForbiddenDoors();
    _timeUntilNextOutage = secondsBetweenPowerOutages;

    //turn off the power
    levelLightsManager.LightsOut();

    //release the beast
    BeastManager.Instance.ActivateBeast();
}
``` "
PowerOutageBeastReleaseManager,What is the value of secondsBetweenPowerOutages?," ```csharp
[SerializeField] private float secondsBetweenPowerOutages = 60 * 5; // 5 minutes in seconds
``` "
PowerSwitchUiHelper.cs,What is the purpose of the PowerSwitchUiHelper class?,The PowerSwitchUiHelper class handles the user interface (UI) for the power switches in the level.
PowerSwitchUiHelper.cs,How does the PowerSwitchUiHelper class update the UI?,The PowerSwitchUiHelper class updates the UI by calling the UiEventHub.CurrentObjectiveUpdate method.
PowerSwitchUiHelper.cs,What information does the PowerSwitchUiHelper class display in the UI?,The PowerSwitchUiHelper class displays the number of power switches that have been activated and the total number of power switches in the level.
PowerSwitchUiHelper.cs,What is the purpose of the \_powerSwitchCount\ variable?,The \_powerSwitchCount\ variable stores the total number of power switches in the level.
PowerSwitchUiHelper.cs,What is the purpose of the LightsOut method?,The LightsOut method is called when the power is turned off in the level. It updates the UI to show that all power switches need to be activated.
PowerSwitchUiHelper.cs,What is the purpose of the LightsBackOn method?,The LightsBackOn method is called when the power is turned back on in the level. It updates the UI to remove the objective text.
PowerSwitchUiHelper.cs,What is the purpose of the PowerSwitchActivated method?,The PowerSwitchActivated method is called when a power switch is activated in the level. It updates the UI to show the number of activated power switches.
PowerSwitchUiHelper.cs,What method is called by the LevelLightsManager class when power is turned off?,The LightsOut method is called by the LevelLightsManager class when power is turned off.
PowerSwitchUiHelper.cs,What method is called by the LevelLightsManager class when power is turned back on?,The LightsBackOn method is called by the LevelLightsManager class when power is turned back on.
PowerSwitchUiHelper.cs,What method is called by the LevelLightsManager class when a power switch is activated?,The PowerSwitchActivated method is called by the LevelLightsManager class when a power switch is activated.
PowerSwitchUiHelper.cs,What does this class handle?,"```csharp
it handles the user interface for the power switches in the level.
```"
PowerSwitchUiHelper.cs,What does '_powerSwitchCount' represent?,"```csharp
it represents the number of power switches in the level.
```"
PowerSwitchUiHelper.cs,When is the 'LightsOut()' method called?,"```csharp
it is called by LevelLightsManager.cs when power is turned off.
```"
PowerSwitchUiHelper.cs,What does the 'LightsOut()' method do?,"```csharp
it updates the user interface to show how many power switches are to activate.
```"
PowerSwitchUiHelper.cs,When is the 'LightsBackOn()' method called?,"```csharp
it is called by LevelLightsManager.cs when power is turned back on.
```"
PowerSwitchUiHelper.cs,What does the 'LightsBackOn()' method do?,"```csharp
it updates the user interface and removes the current objective text.
```"
PowerSwitchUiHelper.cs,When is the 'PowerSwitchActivated()' method called?,"```csharp
it is called by LevelLightsManager.cs when a power switch is activated.
```"
PowerSwitchUiHelper.cs,What does the 'PowerSwitchActivated()' method do?,"```csharp
it update the activated power switches count in the user interface.
```"
PowerSwitchUiHelper.cs,What is the purpose of '_powerSwitchCount' field?,"```csharp
it is used to keep track of the total number of power switches in the level.
```"
PowerSwitchUiHelper.cs,How does the 'UiEventHub.CurrentObjective' method work?,"```csharp
it is used to update the current objective text in the user interface.
```"
Level1EventHub.cs,Level1EventHub is an implementation of what design pattern?,Level1EventHub is an implementation of the event hub design pattern.
Level1EventHub.cs,What is the purpose of the 'OnRoom1PoolUpdate' event?,The 'OnRoom1PoolUpdate' event is called when an object is added or removed from the pool in Level 1 Room 1.
Level1EventHub.cs,What parameters are passed to the 'OnRoom1PoolUpdate' event?,The 'OnRoom1PoolUpdate' event takes two parameters: the object ID and a boolean indicating whether the pool is full.
Level1EventHub.cs,Who triggers the 'OnRoom1PoolUpdate' event?,The 'OnRoom1PoolUpdate' event is triggered by the 'Lvl1R1ObjectDetector.cs' class.
Level1EventHub.cs,What is the purpose of the 'OnAll4PuzzlesAreSolved' event?,The 'OnAll4PuzzlesAreSolved' event is called when all four puzzles in Level 1 are solved.
Level1EventHub.cs,Who triggers the 'OnAll4PuzzlesAreSolved' event?,The 'OnAll4PuzzlesAreSolved' event is triggered by the 'Level1Room4PuzzleMaster.cs' class.
Level1EventHub.cs,What is the purpose of the 'OnTeleportToSafety' event?,The 'OnTeleportToSafety' event is called when the player's health reaches zero in Level 1.
Level1EventHub.cs,Who triggers the 'OnTeleportToSafety' event?,The 'OnTeleportToSafety' event is triggered by the 'PlayerHealthManager.cs' class.
Level1EventHub.cs,What is the syntax for subscribing to an event in Level1EventHub?,"To subscribe to an event in Level1EventHub, you use the += operator to add a method to the event delegate, like this: 

Level1EventHub.OnRoom1PoolUpdate += MyMethod;"
Level1EventHub.cs,What is the syntax for triggering an event in Level1EventHub?,"To trigger an event in Level1EventHub, you use the Invoke method on the event delegate, like this: 

Level1EventHub.OnRoom1PoolUpdate?.Invoke();"
Level1EventHub.cs,How does Level1EventHub raise Room1PoolUpdate event?," ```csharp
public static void Room1PoolUpdate(int id,bool isFull) => OnRoom1PoolUpdate?.Invoke(id,isFull);
``` "
Level1EventHub.cs,What is the method used to raise All4PuzzlesAreSolved event?," ```csharp
public static void All4PuzzlesAreSolved() => OnAll4PuzzlesAreSolved?.Invoke();
``` "
Level1EventHub.cs,How does Level1EventHub raise TeleportToSafety event?," ```csharp
public static void TeleportToSafety() => OnTeleportToSafety?.Invoke();
``` "
Level1EventHub.cs,What parameters does Room1PoolUpdate event take?," ```csharp
public static event Action<int,bool> OnRoom1PoolUpdate;
``` "
Level1EventHub.cs,What is the type of the All4PuzzlesAreSolved event?," ```csharp
public static event Action OnAll4PuzzlesAreSolved;
``` "
Level1EventHub.cs,What parameters does TeleportToSafety event take?," ```csharp
public static event Action OnTeleportToSafety;
``` "
Level1EventHub.cs,What is the name of the event that is raised when all 4 puzzles in Level1Room4 are solved?," ```csharp
public static event Action OnAll4PuzzlesAreSolved;
``` "
Level1EventHub.cs,What is the name of the event that is raised when an object is added or removed from the pool in Level1Room1?," ```csharp
public static event Action<int,bool> OnRoom1PoolUpdate;
``` "
Level1EventHub.cs,What is the name of the event that is raised when the player's health reaches zero in Level 1?," ```csharp
public static event Action OnTeleportToSafety;
``` "
Level1EventHub.cs,What is the return type of Room1PoolUpdate method?," ```csharp
public static void Room1PoolUpdate(int id,bool isFull) => OnRoom1PoolUpdate?.Invoke(id,isFull);
``` "
Level1Manager.cs,In which events do Level1Manager subscribes to?,"Level1Manager subscribes to 'OnLightsBackOn' event and calls \""LightsBackOn()\"" method when this event is fired."
Level1Manager.cs,In which events does Level1Manager unsubscribe to?,"Level1Manager unsubscribes from 'OnLightsBackOn' event and calls \""OnDisable()\"" method on level1PuzzleMaster, lvl1EventFirstBeastSpawn, safePlaceTeleporter"
Level1Manager.cs,"In which event does Level1Manager call \""level1PuzzleMaster.OnStart()\""?","Level1Manager calls \""level1PuzzleMaster.OnStart()\"" in \""Start()\"" method after the call to \""base.Start()\""."
Level1Manager.cs,What is 'Level1PuzzleMaster' in Level1Manager.cs?,"Level1PuzzleMaster is a reference to the Level1PuzzleMaster class, which is a \""puzzle manager\"" ."
Level1Manager.cs,What is 'playerWakeUpCameraAnimator' in Level1Manager.cs?,playerWakeUpCameraAnimator is a reference to an Animator component that is associated with the player wake-up animation.
Level1Manager.cs,"What does \""LightsBackOn()\"" method in Level1Manager.cs do?","The \""LightsBackOn()\"" method triggers the unlocking of the main door when the power is restored in the level."
Level1Manager.cs,What is 'Lvl1EventFirstBeastSpawn' in Level1Manager.cs?,Lvl1EventFirstBeastSpawn is a reference to a class or a component that manages a specific event related to the first beast spawn in the Level 1.
Level1Manager.cs,"What does \""GameStartTask()\"" method do in Level1Manager.cs?","The \""GameStartTask()\"" method is an asynchronous method that starts the player wake-up animation, and then activates the player and gameplay UI."
Level1Manager.cs,"What does \""PlayerWokeUp()\"" method do in Level1Manager.cs?","The \""PlayerWokeUp()\"" method is called when the player wakes up and activates the player and gameplay UI."
Level1Manager.cs,"When does Level1Manager call \""PlayerWokeUp()\""?","Level1Manager calls \""PlayerWokeUp()\"" when lights come back on, when the player wakes up, and when the game starts."
Level1Manager.cs,In 'Level1Manager.cs' What is the line of code used to subscribe to 'LightsBackOn' event?," ```csharp
LevelEventHub.OnLightsBackOn += LightsBackOn;
``` "
Level1Manager.cs,'Level1Manager.cs' has a private method called 'PlayerWokeUp'. What is the code used to disable the player wake up animation and activate the player and gameplay UI?," ```csharp
playerWakeUpCameraAnimator.gameObject.SetActive(false);
PlayerManager.Instance.SetActive(true);
GamePlayCanvasManager.Instance.EnableGameplayUi();
Lvl1FriendManager.Instance.Level1Started();
``` "
Level1Manager.cs,In 'Level1Manager.cs' what does the method 'OnEnable()' do?," ```csharp
        //subscribing (listening) to some events and calling OnEnable on some classes
        level1PuzzleMaster.OnEnable();
        lvl1EventFirstBeastSpawn.OnEnable();
        LevelEventHub.OnLightsBackOn += LightsBackOn;
        safePlaceTeleporter.OnEnable();
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the code used to start the player wake up animation?," ```csharp
playerWakeUpCameraAnimator.gameObject.SetActive(true);
playerWakeUpCameraAnimator.SetTrigger(""Started"");
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the code used to unlock the main door?," ```csharp
mainDoor.Unlock();
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the name of the private method that is called when the player wakes up?," ```csharp
PlayerWokeUp
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the code used to set the player and gameplay UI active?," ```csharp
PlayerManager.Instance.SetActive(true);
GamePlayCanvasManager.Instance.EnableGameplayUi();
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the variable type of 'playerWakeUpCameraAnimator'?," ```csharp
Animator
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the variable type of 'level1PuzzleMaster'?," ```csharp
Level1PuzzleMaster
``` "
Level1Manager.cs,In 'Level1Manager.cs' what is the variable type of 'safePlaceTeleporter'?," ```csharp
SafePlaceTeleporter
``` "
Level1PuzzleMaster.cs,Where is the Level1PuzzleMaster class used?,The Level1PuzzleMaster class is used in the Level1Manager class.
Level1PuzzleMaster.cs,How many child puzzle room managers does the Level1PuzzleMaster class have?,The Level1PuzzleMaster class has 5 child puzzle room managers.
Level1PuzzleMaster.cs,What does the Level1PuzzleMaster.OnStart() method do?,The Level1PuzzleMaster.OnStart() method calls the OnStart() method of all 5 child puzzle room managers.
Level1PuzzleMaster.cs,What does the Level1PuzzleMaster.OnEnable() method do?,The Level1PuzzleMaster.OnEnable() method calls the OnEnable() method of all 5 child puzzle room managers.
Level1PuzzleMaster.cs,What does the Level1PuzzleMaster.OnDisable() method do?,The Level1PuzzleMaster.OnDisable() method calls the OnDisable() method of all 5 child puzzle room managers.
Level1PuzzleMaster.cs,What fields does the Level1PuzzleMaster contain?,"The Level1PuzzleMaster contains 5 fields, one for each child puzzle room manager."
Level1PuzzleMaster.cs,What data type are the fields in the Level1PuzzleMaster?,"The fields in the Level1PuzzleMaster are of the following data types: Level1Room0PuzzleMaster, Level1Room1PuzzleMaster, Level1Room2PuzzleMaster, Level1Room3PuzzleMaster, and Level1Room4PuzzleMaster."
Level1PuzzleMaster.cs,What is the purpose of the Level1PuzzleMaster class?,The purpose of the Level1PuzzleMaster class is to act as a hub for all 5 puzzle room managers in level 1.
Level1PuzzleMaster.cs,Are the fields in Level1PuzzleMaster serialized?,"Yes, the fields in Level1PuzzleMaster are serialized."
Level1PuzzleMaster.cs,Are some of the fields in Level1PuzzleMaster set in the inspector?,"Yes, some of the fields in Level1PuzzleMaster are set in the inspector."
Level1PuzzleMaster,How are the OnStart methods in Level1RoomPuzzleMaster called?," ```csharp
public void OnStart() {
    level1Room0PuzzleMaster.OnStart();
    level1Room1PuzzleMaster.OnStart();
    level1Room2PuzzleMaster.OnStart();
    level1Room4PuzzleMaster.OnStart();
    level1Room3PuzzleMaster.OnStart();
}
``` "
Level1PuzzleMaster,How are the OnEnable methods in Level1RoomPuzzleMaster called?," ```csharp
public void OnEnable() {
    level1Room0PuzzleMaster.OnEnable();
    level1Room1PuzzleMaster.OnEnable();
    level1Room2PuzzleMaster.OnEnable();
    level1Room4PuzzleMaster.OnEnable();
    level1Room3PuzzleMaster.OnEnable();
}
``` "
Level1PuzzleMaster,How are the OnDisable methods in Level1RoomPuzzleMaster called?," ```csharp
public void OnDisable() {
    level1Room0PuzzleMaster.OnDisable();
    level1Room1PuzzleMaster.OnDisable();
    level1Room2PuzzleMaster.OnDisable();
    level1Room4PuzzleMaster.OnDisable();
    level1Room3PuzzleMaster.OnDisable();
}
``` "
Level1PuzzleMaster,What is the name of the Level1Room0PuzzleMaster field?," ```csharp
[SerializeField] private Level1Room0PuzzleMaster level1Room0PuzzleMaster;
``` "
Level1PuzzleMaster,What is the name of the Level1Room1PuzzleMaster field?," ```csharp
[SerializeField] private Level1Room1PuzzleMaster level1Room1PuzzleMaster;
``` "
Level1PuzzleMaster,What is the name of the Level1Room2PuzzleMaster field?," ```csharp
[SerializeField] private Level1Room2PuzzleMaster level1Room2PuzzleMaster;
``` "
Level1PuzzleMaster,What is the name of the Level1Room3PuzzleMaster field?," ```csharp
[SerializeField] private Level1Room3PuzzleMaster level1Room3PuzzleMaster;
``` "
Level1PuzzleMaster,What is the name of the Level1Room4PuzzleMaster field?," ```csharp
[SerializeField] private Level1Room4PuzzleMaster level1Room4PuzzleMaster;
``` "
Level1PuzzleMaster,What is the scope of the OnStart method?," ```csharp
public void OnStart() {
``` "
Level1PuzzleMaster,What is the scope of the OnEnable method?," ```csharp
public void OnEnable() {
``` "
Level1RoomPuzzleMaster.cs,What is the purpose of the Level1RoomPuzzleMaster class?,"The Level1RoomPuzzleMaster class is the base class for all puzzle room managers in level 1. It implements the logic common to all level 1 puzzle rooms, such as turning on puzzle indicators and unlocking doors when puzzles are solved."
Level1RoomPuzzleMaster.cs,What is the puzzleIndicator field in the Level1RoomPuzzleMaster class?,The puzzleIndicator field is a reference to a SimpleLight object that is turned on after the puzzle is solved.
Level1RoomPuzzleMaster.cs,What is the turnedOnAfterPuzzle field in the Level1RoomPuzzleMaster class?,The turnedOnAfterPuzzle field is an array of LightGunLight objects that are turned on after the puzzle is solved. These lights are typically used to illuminate hallways or other areas.
Level1RoomPuzzleMaster.cs,What is the puzzleMainDoor field in the Level1RoomPuzzleMaster class?,"The puzzleMainDoor field is a reference to the main door of the puzzle room. When the puzzle is solved, this door is unlocked."
Level1RoomPuzzleMaster.cs,What is the puzzleSideDoor field in the Level1RoomPuzzleMaster class?,"The puzzleSideDoor field is a reference to the side door of the puzzle room. When the puzzle is solved, this door is unlocked."
Level1RoomPuzzleMaster.cs,What happens when a puzzle is solved in a level 1 puzzle room?,"When a puzzle is solved in a level 1 puzzle room, the following happens: 
* The puzzle indicator light turns on.
* The lights in the turnedOnAfterPuzzle array are turned on.
* The puzzle main door is unlocked.
* The puzzle side door is unlocked."
Level1RoomPuzzleMaster.cs,What is the purpose of the LevelRoomPuzzleMaster class?,"The LevelRoomPuzzleMaster class is the base class for all puzzle room managers in the game. It provides common functionality for all puzzle room managers, such as managing puzzle state and interacting with the player."
Level1RoomPuzzleMaster.cs,What is the relationship between the Level1RoomPuzzleMaster class and the LevelRoomPuzzleMaster class?,"The Level1RoomPuzzleMaster class inherits from the LevelRoomPuzzleMaster class. This means that the Level1RoomPuzzleMaster class has all of the functionality of the LevelRoomPuzzleMaster class, plus additional functionality specific to level 1 puzzle rooms."
Level1RoomPuzzleMaster.cs,What are some examples of puzzle rooms in level 1?,"Some examples of puzzle rooms in level 1 include the following: 
* The room with the four colored buttons that need to be pressed in the correct order.
* The room with the mirror that needs to be used to reflect a laser beam onto a target.
* The room with the rotating platforms that need to be used to reach a key."
Level1RoomPuzzleMaster.cs,What are some of the challenges that players face in level 1 puzzle rooms?,"Some of the challenges that players face in level 1 puzzle rooms include the following: 
* Figuring out the correct order to press the buttons in the room with the four colored buttons.
* Figuring out how to use the mirror to reflect the laser beam onto the target in the room with the mirror.
* Figuring out how to use the rotating platforms to reach the key in the room with the rotating platforms."
Level1RoomPuzzleMaster.cs,How does this class indicate that the puzzle is solved?," ```csharp
[SerializeField] protected SimpleLight puzzleIndicator;
[SerializeField] protected LightGunLight[] turnedOnAfterPuzzle;
``` "
Level1RoomPuzzleMaster.cs,What does the puzzleIndicator variable do?," ```csharp
[SerializeField] protected SimpleLight puzzleIndicator;
``` "
Level1RoomPuzzleMaster.cs,How is puzzleIndicator related to the puzzle being solved?," ```csharp
[SerializeField] protected SimpleLight puzzleIndicator;
``` "
Level1RoomPuzzleMaster.cs,What happens to puzzleIndicator when the puzzle is solved?," ```csharp
turnedOnAfterPuzzle; //a list of LightGunLights that are turned on after puzzle is solved(mostly hallway lights)
``` "
Level1RoomPuzzleMaster.cs,What does the turnedOnAfterPuzzle variable do?," ```csharp
[SerializeField] protected LightGunLight[] turnedOnAfterPuzzle;
``` "
Level1RoomPuzzleMaster.cs,How is turnedOnAfterPuzzle related to the puzzle being solved?," ```csharp
[SerializeField] protected LightGunLight[] turnedOnAfterPuzzle;
``` "
Level1RoomPuzzleMaster.cs,What happens to turnedOnAfterPuzzle when the puzzle is solved?," ```csharp
[SerializeField] protected SimpleDoor puzzleMainDoor,
    puzzleSideDoor;
``` "
Level1RoomPuzzleMaster.cs,What does the puzzleMainDoor variable do?," ```csharp
[SerializeField] protected SimpleDoor puzzleMainDoor,
    puzzleSideDoor;
``` "
Level1RoomPuzzleMaster.cs,How is puzzleMainDoor related to the puzzle being solved?," ```csharp
[SerializeField] protected SimpleDoor puzzleMainDoor,
    puzzleSideDoor;
``` "
Level1RoomPuzzleMaster.cs,What happens to puzzleMainDoor when the puzzle is solved?," ```csharp
puzzleSideDoor; //side door is unlocked and main door of the next puzzle is unlocked
``` "
Lvl1EventFirstBeastSpawn.cs,What is the purpose of the Lvl1EventFirstBeastSpawn.cs class?,"The Lvl1EventFirstBeastSpawn.cs class is handling the first beast spawn in the game.
It initializes everything needed for the first beast spawn after solving the 4 puzzles: activating player detectors, cutting the power, spawning the beast, teleporting the player to the safe room."
Lvl1EventFirstBeastSpawn.cs,What are the objects that get activated after solving all 4 puzzles?,"The player detectors, which are responsible for spawning the beast"
Lvl1EventFirstBeastSpawn.cs,"Which light manager is used in this class, and what does it do?",The LevelLightsManager is used to cut the power (turn off all lights) once the first beast is spawned.
Lvl1EventFirstBeastSpawn.cs,What are the names of the doors in the safe room?,room0Door1 and room0Door2
Lvl1EventFirstBeastSpawn.cs,How long does it take for the beast to appear after the player enters a player detector?,2 seconds
Lvl1EventFirstBeastSpawn.cs,What happens to the doors in the safe room when the power is turned back on?,They get unlocked.
Lvl1EventFirstBeastSpawn.cs,What happens after 8 seconds of the player being teleported to the safe room?,The friend manager is notified that the player has been teleported to the safe room.
Lvl1EventFirstBeastSpawn.cs,What events does the Lvl1EventFirstBeastSpawn.cs class subscribe to?,"Level1EventHub.OnAll4PuzzlesAreSolved, LevelEventHub.OnPlayerDetectorTriggered, and LevelEventHub.OnPowerSwitchActivated."
Lvl1EventFirstBeastSpawn.cs,What happens when the Lvl1EventFirstBeastSpawn.cs class is enabled?,"It subscribes to the events Level1EventHub.OnAll4PuzzlesAreSolved, LevelEventHub.OnPlayerDetectorTriggered, and LevelEventHub.OnPowerSwitchActivated."
Lvl1EventFirstBeastSpawn.cs,What happens when the Lvl1EventFirstBeastSpawn.cs class is disabled?,"It unsubscribes from the events Level1EventHub.OnAll4PuzzlesAreSolved, LevelEventHub.OnPlayerDetectorTriggered, and LevelEventHub.OnPowerSwitchActivated."
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', how does the player detectors turn on?"," ```csharp
private void All4PuzzlesAreSolved() {
    playerDetectorRight.SetActive(true);
    playerDetectorLeft.SetActive(true);
}
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what is the process followed when the player enters a player detector?"," ```csharp
private void PlayerDetectorTriggered(int id) {
    //check if it was the right detector that was triggered
    if (id != 0) return;
    //it was.  destroy the detectors
    if (playerDetectorRight) Object.Destroy(playerDetectorRight);
    if (playerDetectorLeft) Object.Destroy(playerDetectorLeft);

    //cut the power (turn off all lights)
    levelLightsManager.LightsOut();

    //spawn the beast after 2 seconds
    DOTween.Sequence().AppendInterval(2f).AppendCallback((() => { BeastManager.Instance.ActivateBeast(); }));

    //close the safe doors and lock them
    room0Door1.ForceClose();
    room0Door2.ForceClose();
    room0Door1.Lock();
    room0Door2.Lock();

    //teleport the player to the safe room after 8 seconds
    DOTween.Sequence()
        .AppendInterval(8)
        .AppendCallback(() => {
            PlayerManager.Instance.ForceTeleport(explainingRoomTeleportPoint);

            //notify friend manager that the player has been teleported to the safe room
            Lvl1FriendManager.Instance.TeleportedToExplainingRoom();
        })
        ;
}
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what happens when a power switch is activated?"," ```csharp
private void PowerSwitchActivated(int id) {
    // if id == 0, then it's the power switch in the safe room. unlock the doors
    if (id == 0) {
        room0Door1.Unlock();
        room0Door2.Unlock();
    }
}
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what does the OnEnable() method do?"," ```csharp
public void OnEnable() {
    //subscribing (listening) to some events
    Level1EventHub.OnAll4PuzzlesAreSolved += All4PuzzlesAreSolved;
    LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
    LevelEventHub.OnPowerSwitchActivated += PowerSwitchActivated;
}
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what does the OnDisable() method do?"," ```csharp
public void OnDisable() {
    //unsubscribing to some events
    Level1EventHub.OnAll4PuzzlesAreSolved -= All4PuzzlesAreSolved;
    LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
    LevelEventHub.OnPowerSwitchActivated -= PowerSwitchActivated;
}
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what is the first thing 'PlayerDetectorTriggered()' method does?"," ```csharp
private void PlayerDetectorTriggered(int id) {
    //check if it was the right detector that was triggered
    if (id != 0) return;
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what is the first line in 'PowerSwitchActivated()' method?"," ```csharp
private void PowerSwitchActivated(int id) {
    // if id == 0, then it's the power switch in the safe room. unlock the doors
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', How many methods do you find in the class?"," ```csharp
5 methods.
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', how do you call 'ForceTeleport()' method?"," ```csharp
PlayerManager.Instance.ForceTeleport(explainingRoomTeleportPoint);
``` "
Lvl1EventFirstBeastSpawn.cs,"in 'Lvl1EventFirstBeastSpawn.cs', what is the purpose of 'Unlock()' method?"," ```csharp
Unlocks the locked door.
``` "
Lvl1FriendManager.cs,What is the purpose of 'Lvl1FriendManager.cs'?,The 'Lvl1FriendManager.cs' is responsible for managing the friend's voice tracks in Level 1. It plays the appropriate sound based on the player's actions and the beast's state.
Lvl1FriendManager.cs,How does 'Lvl1FriendManager.cs' play the correct sound when the player enters a player detector?,"In the 'PlayerDetectorTriggered' method, it checks the ID of the triggered player detector and plays the corresponding sound using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,What is the 'BeastManager.State.RoamingOnTarget' state used for?,The 'BeastManager.State.RoamingOnTarget' state is used to track when the beast is roaming towards the player's last known location. This state is used in the 'OnBeastStateUpdate' method to determine if the beast hint sound should be played.
Lvl1FriendManager.cs,When is the 'beast hint' sound played?,"The 'beast hint' sound is played when the beast transitions from 'BeastManager.State.RoamingOnTarget' to 'BeastManager.State.Roaming', indicating that the beast has lost sight of the player and is now roaming randomly."
Lvl1FriendManager.cs,How does 'Lvl1FriendManager.cs' play the 'beast hint' sound?,"In the 'OnBeastStateUpdate' method, it checks if the current beast state is 'BeastManager.State.Roaming' and the previous state was 'BeastManager.State.RoamingOnTarget'. If this condition is met, it plays the 'beast hint' sound using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,Which sound is played when the player enters the first puzzle room?,"When the player enters the first puzzle room, the 'puzzle1EnterClip' is played using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,Which sound is played when the player solves the first puzzle?,"When the player solves the first puzzle, the 'puzzle1SolvedClip' is played using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,How does 'Lvl1FriendManager.cs' play the 'lights back on' sound?,"In the 'LightsBackOn' method, it plays the 'lightsBackOnClip' using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,Which sound is played when the player is teleported to the explaining room?,"When the player is teleported to the explaining room, the 'teleportedToExplainingRoomClip' is played using 'MusicSoundManager.Instance.PlaySound'."
Lvl1FriendManager.cs,What event does 'Lvl1FriendManager.cs' subscribe to for detecting player detector triggers?,It subscribes to the 'OnPlayerDetectorTriggered' event from 'LevelEventHub'.
Lvl1FriendManager.cs,"In Lvl1FriendManager.cs there is a function that plays the correct sound clip when a player enters any of the player detectors, what is that function called?"," ```csharp
void PlayerDetectorTriggered(int id)
``` "
Lvl1FriendManager.cs,What C# function plays the beast hint clip in Lvl1FriendManager.cs?," ```csharp
void OnBeastStateUpdate(BeastManager.State state)
``` "
Lvl1FriendManager.cs,What is the variable that is being used to keep track of the beast's state in Lvl1FriendManager.cs?," ```csharp
BeastManager.State _lastState = BeastManager.State.Sleep;
``` "
Lvl1FriendManager.cs,How does Lvl1FriendManager.cs determine when the player is teleported to the explaining room?," ```csharp
if (state == BeastManager.State.Roaming && _lastState == BeastManager.State.RoamingOnTarget &&
            !_saidBeastHint && GlobalInGameData.IsPlayerAlive) {
            MusicSoundManager.Instance.PlaySound(beastHintClip);
            _saidBeastHint = true;
        }
``` "
Lvl1FriendManager.cs,Which function is responsible for playing when the lights turn back on in Lvl1FriendManager.cs ?," ```csharp
void LightsBackOn()
``` "
Lvl1FriendManager.cs,Which function in Lvl1FriendManager.cs plays the clip when a puzzle is solved?," ```csharp
public void SolvedPuzzle(int i)
``` "
Lvl1FriendManager.cs,What is the function called in Lvl1FriendManager.cs that plays the corresponding sound when level 1 starts?," ```csharp
public void Level1Started()
``` "
Lvl1FriendManager.cs,What is the name of the function in Lvl1FriendManager.cs that plays the clip when the player is teleported to the explaining room?," ```csharp
public void TeleportedToExplainingRoom()
``` "
Lvl1FriendManager.cs,"Inside OnEnable() method in Lvl1FriendManager.cs, what are the functions that are being subscribed to?"," ```csharp
LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
        LevelEventHub.OnLightsBackOn += LightsBackOn;
        LevelEventHub.OnBeastStateUpdate += OnBeastStateUpdate;
``` "
Lvl1FriendManager.cs,What are the functions that are being unsubscribed from inside OnDisable() method in Lvl1FriendManager.cs ?," ```csharp
LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
        LevelEventHub.OnBeastStateUpdate -= OnBeastStateUpdate;
``` "
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of 'tutorialMessageLightGun'",The 'tutorialMessageLightGun' field is where you can set the tutorial message that is shown to the player when they collect the light gun.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of 'PlayerDetectorTriggered'",The 'PlayerDetectorTriggered' method is called when the player enters any of the player detectors. It shows the tutorial message for that detector and activates the next trigger zone.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of 'ShowTutorial'",The 'ShowTutorial' method is responsible for showing the tutorial message and activating the next trigger zone when the player enters a player detector.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of 'HideTutorial'",The 'HideTutorial' method is called when the player collects a collectable. It shows the tutorial message for that collectible and also sets the corresponding bool in PlayerGunItemManager to true.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of 'PlayerCollectedCollectable'",The 'PlayerCollectedCollectable' method is called when the player collects a collectable. It shows the tutorial message for that collectable and also sets the corresponding bool in PlayerGunItemManager to true.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of the 'triggerZones' array?",The 'triggerZones' array is used to store all the player detectors and collectables that trigger the tutorial messages.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what is the purpose of the mainTutorialText field?",The 'mainTutorialText' field is the TextMeshProUGUI component that is used to display the tutorial messages to the player.
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what happens in the Start() method?","In the Start() method, the tutorial text is hidden, and the first trigger zone is activated, making it ready to trigger the tutorial message."
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what methods are called when the player enters a player detector or collects a collectable?","When the player enters a player detector, the 'PlayerDetectorTriggered' method is called. When the player collects a collectable, the 'PlayerCollectedCollectable' method is called."
Lvl1TutorialManager.cs,"in 'Lvl1TutorialManager.cs', what events does the class subscribe to in the OnEnable() method and unsubscribe from in the OnDisable() method?","In the OnEnable() method, the class subscribes to the 'OnPlayerDetectorTriggered' and 'OnPlayerCollectedCollectable' events from the LevelEventHub class. In the OnDisable() method, the class unsubscribes from these events."
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, when does the player enter the trigger zone?"," ```csharp
private void PlayerDetectorTriggered(int id) {
    //show the tutorial message and activate the next trigger zone
    switch (id) {
        case 1:
            triggerZones[1].SetActive(true);
            break;
        case 2:
            ShowTutorial(tutorialMessageFlashLight);
            triggerZones[2].SetActive(true);
            break;
        case 3:
            HideTutorial();
            triggerZones[3].SetActive(true);
            break;
        case 4:
            HideTutorial();
            break;
    }
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, when does the player collect a collectable?"," ```csharp
private void PlayerCollectedCollectable(int id) {
    //player collectd an item. show the tutorial message for that item. also set the corresponding bool in PlayerGunItemManager to true
    switch (id) {
        case 2:
            PlayerGunItemManager.HasLightGun = true;
            ShowTutorial(tutorialMessageLightGun);
            break;
        case 3:
            PlayerGunItemManager.HasTeleporter = true;
            ShowTutorial(tutorialMessagePortal);
            break;
    }
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, what is the purpose of the 'ShowTutorial' method?"," ```csharp
private void ShowTutorial(string message) {
    //activate the tutorial text and set the message
    mainTutorialText.transform.parent.gameObject.SetActive(true);
    mainTutorialText.text = message;
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, how do you check if the player collected the light gun?"," ```csharp
private void PlayerCollectedCollectable(int id) {
    //player collectd an item. show the tutorial message for that item. also set the corresponding bool in PlayerGunItemManager to true
    switch (id) {
        case 2:
            PlayerGunItemManager.HasLightGun = true;
            ShowTutorial(tutorialMessageLightGun);
            break;
        case 3:
            PlayerGunItemManager.HasTeleporter = true;
            ShowTutorial(tutorialMessagePortal);
            break;
    }
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, how does the player collect a teleporter?"," ```csharp
private void PlayerCollectedCollectable(int id) {
    //player collectd an item. show the tutorial message for that item. also set the corresponding bool in PlayerGunItemManager to true
    switch (id) {
        case 2:
            PlayerGunItemManager.HasLightGun = true;
            ShowTutorial(tutorialMessageLightGun);
            break;
        case 3:
            PlayerGunItemManager.HasTeleporter = true;
            ShowTutorial(tutorialMessagePortal);
            break;
    }
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, how do you check if the player collected a teleporter?"," ```csharp
private void PlayerCollectedCollectable(int id) {
    //player collectd an item. show the tutorial message for that item. also set the corresponding bool in PlayerGunItemManager to true
    switch (id) {
        case 2:
            PlayerGunItemManager.HasLightGun = true;
            ShowTutorial(tutorialMessageLightGun);
            break;
        case 3:
            PlayerGunItemManager.HasTeleporter = true;
            ShowTutorial(tutorialMessagePortal);
            break;
    }
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, what does the 'HideTutorial' method do?"," ```csharp
public void HideTutorial() => mainTutorialText.transform.parent.gameObject.SetActive(false);
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, what is the 'OnEnable' method?"," ```csharp
public void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
    LevelEventHub.OnPlayerCollectedCollectable += PlayerCollectedCollectable;
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, what does the 'Disable' method do?"," ```csharp
public void OnDisable() {
    //unsubscribing to some events
    LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
    LevelEventHub.OnPlayerCollectedCollectable -= PlayerCollectedCollectable;
}
``` "
Lvl1TutorialManager.cs,"In the 'Lvl1TutorialManager' class, what kind of data structure is used to store the 'triggerZones' variable?"," ```csharp
[SerializeField] private GameObject[] triggerZones;
``` "
SafePlaceTeleporter.cs,What is the purpose of the SafePlaceTeleporter class?,The SafePlaceTeleporter class is responsible for teleporting the player to the farthest safe place from the beast when the player's health reaches 0 in level 1.
SafePlaceTeleporter.cs,What is the purpose of the 'safePlaces' array?,The 'safePlaces' array stores references to the transform components of the safe places where the player can be teleported to.
SafePlaceTeleporter.cs,What is the purpose of the 'OnTeleportToSafety' method?,The 'OnTeleportToSafety' method is an event handler that is called when the player should be teleported to a safe place. It teleports the player to the farthest safe place from the beast.
SafePlaceTeleporter.cs,When is the 'OnTeleportToSafety' method called?,The 'OnTeleportToSafety' method is called when the player's health reaches 0 in level 1.
SafePlaceTeleporter.cs,What does the 'ForceTeleport' method do?,The 'ForceTeleport' method teleports the player to a specific location.
SafePlaceTeleporter.cs,What does the 'FarthestPlaceFromPlayer' method do?,The 'FarthestPlaceFromPlayer' method takes an array of transform components and returns the transform component that is farthest away from the player.
SafePlaceTeleporter.cs,What is the purpose of the 'OnEnable' method?,The 'OnEnable' method is called when the SafePlaceTeleporter component is enabled. It subscribes to the 'OnTeleportToSafety' event.
SafePlaceTeleporter.cs,What is the purpose of the 'OnDisable' method?,The 'OnDisable' method is called when the SafePlaceTeleporter component is disabled. It unsubscribes from the 'OnTeleportToSafety' event.
SafePlaceTeleporter.cs,What is the benefit of subscribing to and unsubscribing from events in the 'OnEnable' and 'OnDisable' methods?,Subscribing to events in the 'OnEnable' method and unsubscribing from them in the 'OnDisable' method ensures that the SafePlaceTeleporter component only listens to events when it is active.
SafePlaceTeleporter.cs,What is the purpose of the '[SerializeField]' attribute on the 'safePlaces' array?,The '[SerializeField]' attribute on the 'safePlaces' array allows the array to be set in the Unity inspector.
SafePlaceTeleporter,What does the SafePlaceTeleporter do when something subscribes to OnTeleportToSafety?," ```csharp
public void OnEnable() {
        //subscribing (listening) to some events
        Level1EventHub.OnTeleportToSafety += OnTeleportToSafety;
    }
``` "
SafePlaceTeleporter,What happens when the game object that has SafePlaceTeleporter attached gets disabled?," ```csharp
public void OnDisable() {
        //unsubscribing to some events
        Level1EventHub.OnTeleportToSafety -= OnTeleportToSafety;
    }
``` "
SafePlaceTeleporter,What is the name of the event that SafePlaceTeleporter subscribes to in OnEnable()?," ```csharp
OnTeleportToSafety
``` "
SafePlaceTeleporter,What is the name of the event that SafePlaceTeleporter unsubscribes to in OnDisable()?," ```csharp
OnTeleportToSafety
``` "
SafePlaceTeleporter,What is the name of the method that SafePlaceTeleporter defines?," ```csharp
OnTeleportToSafety
``` "
SafePlaceTeleporter,What does the OnTeleportToSafety() method in SafePlaceTeleporter do?," ```csharp
private void OnTeleportToSafety() {
        //teleport the player to the farthest safe place from the beast
        PlayerManager.Instance.ForceTeleport(PlayerManager.Instance.FarthestPlaceFromPlayer(safePlaces));
    }
``` "
SafePlaceTeleporter,Which object is the player teleported to when the OnTeleportToSafety() method is called?," ```csharp
PlayerManager.Instance.FarthestPlaceFromPlayer(safePlaces)
``` "
SafePlaceTeleporter,What component on the player object is used to force the teleportation in the OnTeleportToSafety() method?," ```csharp
PlayerManager.Instance
``` "
SafePlaceTeleporter,What is the name of the field in SafePlaceTeleporter that stores an array of safe place transforms?," ```csharp
safePlaces
``` "
SafePlaceTeleporter,What is the name of the class that defines the OnTeleportToSafety event?," ```csharp
Level1EventHub
``` "
Level1Room0PuzzleMaster.cs,What is the purpose of the Level1Room0PuzzleMaster class?,The Level1Room0PuzzleMaster class is responsible for implementing the puzzle logic for the starting pre-puzzle room in level 1 of the game.
Level1Room0PuzzleMaster.cs,where is Level1Room0PuzzleMaster used?,Level1Room0PuzzleMaster is used as a field in the Level1PuzzleMaster class.
Level1Room0PuzzleMaster.cs,What is the PowerCoreInserted function responsible for?,The PowerCoreInserted function detects when a power core is inserted into the power station and unlocks the main door if the correct power core is inserted.
Level1Room0PuzzleMaster.cs,What happens in the OnEnable function?,"In the OnEnable function, the class subscribes (listens) to certain events, including the OnPowerCoreInserted event."
Level1Room0PuzzleMaster.cs,What happens in the OnDisable function?,"In the OnDisable function, the class unsubscribes from certain events, including the OnPowerCoreInserted event."
Level1Room0PuzzleMaster.cs,How does the Level1Room0PuzzleMaster class handle the power core insertion event?,"When the OnPowerCoreInserted event is triggered, the PowerCoreInserted function is called, which checks if the correct power core is inserted and unlocks the main door if it is."
Level1Room0PuzzleMaster.cs,What happens when the correct power core is inserted?,"When the correct power core is inserted, the puzzleMainDoor object, which represents the main door of the room, is unlocked, allowing the player to proceed."
Level1Room0PuzzleMaster.cs,What is the role of the LevelEventHub class?,"The LevelEventHub class is responsible for managing and distributing events within the game, allowing different objects and components to communicate with each other."
Level1Room0PuzzleMaster.cs,What is the purpose of subscribing and unsubscribing to events in the OnEnable and OnDisable functions?,"Subscribing and unsubscribing to events in the OnEnable and OnDisable functions respectively allows the class to listen for and respond to specific events only when it is active, ensuring proper event handling and resource management."
Level1Room0PuzzleMaster.cs,How does the Level1Room0PuzzleMaster class contribute to the overall puzzle logic of the starting pre-puzzle room in level 1?,"The Level1Room0PuzzleMaster class plays a crucial role in the puzzle logic of the starting pre-puzzle room by detecting the insertion of the correct power core, unlocking the main door, and enabling player progression to the next stage of the puzzle."
Level1Room0PuzzleMaster.cs,What happens when the power core is inserted into the power station?," ```csharp
private void PowerCoreInserted(int i) {
    //if it is the right power core unlock the main door
if (i == 0) {
        puzzleMainDoor.Unlock();
    }
}
``` "
Level1Room0PuzzleMaster.cs,"In 'Level1Room0PuzzleMaster.cs', which events does this class listen to?"," ```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
}
``` "
Level1Room0PuzzleMaster.cs,What happens when this component is disabled in 'Level1Room0PuzzleMaster.cs'?," ```csharp
public override void OnDisable() {
    //unsubscribing to some events
    LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
}
``` "
Level1Room0PuzzleMaster.cs,"In 'Level1Room0PuzzleMaster.cs', where is this class a field of?"," ```csharp
/*
 * Level.Level1.Puzzles.Level1Room0PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the starting pre puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 */
``` "
Level1Room0PuzzleMaster.cs,What is the child class of 'Level1Room0PuzzleMaster.cs'?," ```csharp
/*
 * Level.Level1.Puzzles.Level1Room0PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the starting pre puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 */
``` "
Level1Room0PuzzleMaster.cs,What does 'Level1Room0PuzzleMaster.cs' inherit from?," ```csharp
public class Level1Room0PuzzleMaster : Level1RoomPuzzleMaster {
    //detects when power core is inserted into the power station then unlocks the main door
    private void PowerCoreInserted(int i) {
        //if it is the right power core unlock the main door
if (i == 0) {
            puzzleMainDoor.Unlock();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
}
``` "
Level1Room0PuzzleMaster.cs,What method in 'Level1Room0PuzzleMaster.cs' gets called when the component is enabled?," ```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
}
``` "
Level1Room0PuzzleMaster.cs,What method in 'Level1Room0PuzzleMaster.cs' gets called when the component is disabled?," ```csharp
public override void OnDisable() {
    //unsubscribing to some events
    LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
}
``` "
Level1Room0PuzzleMaster.cs,What is the purpose of this class?," ```csharp
/*
 * Level.Level1.Puzzles.Level1Room0PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the starting pre puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 */
``` "
Level1Room0PuzzleMaster.cs,What variable does 'Level1Room0PuzzleMaster.cs' listen to in 'OnEnable()'?," ```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
}
``` "
Level1Room1PuzzleMaster.cs,What is the purpose of the Room1PoolUpdate method?,The Room1PoolUpdate method is called when an object is added or removed from a pool. It checks if all pools are filled and calls the PuzzleCompleted method if they are.
Level1Room1PuzzleMaster.cs,What does the PuzzleCompleted method do?,"The PuzzleCompleted method unlocks the main door, turns on the puzzle indicator light to green, and notifies the Lvl1FriendManager that the puzzle is solved."
Level1Room1PuzzleMaster.cs,"In the Level1Room1PuzzleMaster class, what is the purpose of the _poolsFilled array?","The _poolsFilled array is used to keep track of whether each pool is filled. It is a boolean array with three elements, one for each pool."
Level1Room1PuzzleMaster.cs,What is the purpose of the OnEnable method in the Level1Room1PuzzleMaster class?,"In the Level1Room1PuzzleMaster class, the OnEnable method subscribes to the OnRoom1PoolUpdate event, which is used to listen for updates on the state of the pools in the puzzle room."
Level1Room1PuzzleMaster.cs,What does the OnDisable method do in the Level1Room1PuzzleMaster class?,"The OnDisable method in the Level1Room1PuzzleMaster class unsubscribes from the OnRoom1PoolUpdate event, which stops the class from listening for updates on the state of the pools in the puzzle room."
Level1Room1PuzzleMaster.cs,What is the relationship between the Level1Room1PuzzleMaster class and the Level1PuzzleMaster class?,"The Level1Room1PuzzleMaster class is a child class of the Level1PuzzleMaster class, which means that it inherits from the Level1PuzzleMaster class and can access its members."
Level1Room1PuzzleMaster.cs,What is the purpose of the puzzle2MainDoor field in the Level1Room1PuzzleMaster class?,The puzzle2MainDoor field in the Level1Room1PuzzleMaster class is a reference to the door that is unlocked when the puzzle is completed.
Level1Room1PuzzleMaster.cs,What is the purpose of the puzzle indicator field in the Level1Room1PuzzleMaster class?,The puzzle indicator field in the Level1Room1PuzzleMaster class is a reference to the indicator light that turns on when the puzzle is completed.
Level1Room1PuzzleMaster.cs,What is the purpose of the Lvl1FriendManager field in the Level1Room1PuzzleMaster class?,"The Lvl1FriendManager field in the Level1Room1PuzzleMaster class is a reference to the Lvl1FriendManager object, which is responsible for managing the friends in the level."
Level1Room1PuzzleMaster.cs,What is the purpose of the Level1EventHub class?,"The Level1EventHub class is responsible for managing events in the level, such as the OnRoom1PoolUpdate event that is used to notify the Level1Room1PuzzleMaster class when a pool is updated."
Level1Room1PuzzleMaster.cs,in 'Level1Room1PuzzleMaster.cs' What happens when an object is added or removed from the pool?,"```csharp
private void Room1PoolUpdate(int id, bool isFull) {
    _poolsFilled[id - 1] = isFull;
    if (_poolsFilled[0] && _poolsFilled[1] && _poolsFilled[2]) {
        PuzzleCompleted();
    }
}
```"
Level1Room1PuzzleMaster.cs,"'Level1Room1PuzzleMaster.cs' Subscribes to an event called 'OnRoom1PoolUpdate', what does this do?","```csharp
public override void OnEnable() {
    Level1EventHub.OnRoom1PoolUpdate += Room1PoolUpdate;
}
```"
Level1Room1PuzzleMaster.cs,"in 'Level1Room1PuzzleMaster.cs', What happens when all pools are filled?","```csharp
if (_poolsFilled[0] && _poolsFilled[1] && _poolsFilled[2]) {
    PuzzleCompleted();
}
```"
Level1Room1PuzzleMaster.cs,"in 'Level1Room1PuzzleMaster.cs', What does calling 'Unlock()' on the 'puzzleMainDoor' do?","```csharp
puzzleMainDoor.Unlock();
```"
Level1Room1PuzzleMaster.cs,What code in 'Level1Room1PuzzleMaster.cs' checks if all pools are filled?,"```csharp
if (_poolsFilled[0] && _poolsFilled[1] && _poolsFilled[2]) {
    PuzzleCompleted();
}
```"
Level1Room1PuzzleMaster.cs,what code in 'Level1Room1PuzzleMaster.cs' turns on the puzzle indicator with a green light?,"```csharp
purzzleIndicator.TurnOn(LightColor.Green);
```"
Level1Room1PuzzleMaster.cs,"in 'Level1Room1PuzzleMaster.cs', What does 'SolvedPuzzle()' call do?","```csharp
Lvl1FriendManager.Instance.SolvedPuzzle(1);
```"
Level1Room1PuzzleMaster.cs,"In 'Level1Room1PuzzleMaster.cs', how does it unsubscribe from the 'OnRoom1PoolUpdate' event?","```csharp
public override void OnDisable() {
    Level1EventHub.OnRoom1PoolUpdate -= Room1PoolUpdate;
}
```"
Level1Room1PuzzleMaster.cs,what does 'PuzzleCompleted()' do in 'Level1Room1PuzzleMaster.cs'?,"```csharp
private void PuzzleCompleted() {
    puzzleMainDoor.Unlock();
    puzzle2MainDoor.Unlock();
    puzzleIndicator.TurnOn(LightColor.Green);
    Lvl1FriendManager.Instance.SolvedPuzzle(1);
}
```"
Level1Room1PuzzleMaster.cs,where does the 'Level1Room1PuzzleMaster' Unsubscribe from 'OnRoom1PoolUpdate' event?,"```csharp
public override void OnDisable() {
    Level1EventHub.OnRoom1PoolUpdate -= Room1PoolUpdate;
}
```"
Level1Room2PuzzleMaster.cs,What is the purpose of the Level1Room2PuzzleMaster class in Unity?,"The Level1Room2PuzzleMaster class in Unity implements the puzzle logic for the second puzzle room in level 1. Its responsibility is to manage the state of the puzzle, including the status of lights and wires, and check for puzzle completion."
Level1Room2PuzzleMaster.cs,What happens when all lights are injected correctly in the puzzle?,"When all lights are injected correctly in the puzzle, it calls the PuzzleCompleted method, which unlocks the main door, turns on the puzzle indicator light, and communicates with other components to handle puzzle completion."
Level1Room2PuzzleMaster.cs,How does the class determine if all lights are injected correctly?,"To determine if all lights are injected correctly, the class has a boolean array _room2PuzzleStatus, which keeps track of the status of each light. When a light is injected, the class checks if it was the correct color and updates the status array. If the status of all lights is true, it calls the CheckForCompletion method."
Level1Room2PuzzleMaster.cs,What is the purpose of the wires in the puzzle?,"The wires in the puzzle are used to visualize the status of the puzzle. Each wire is connected to a light, and it turns on or off depending on whether the corresponding light is injected correctly."
Level1Room2PuzzleMaster.cs,How does the class handle events related to light injection?,"The class subscribes to the OnLightGunLightInjected event, which is triggered when a light is injected into the light gun. When this event is fired, the class handles it by checking if the injected light is in the current puzzle room. If it is, the class checks if the injected light color is correct and updates the puzzle status accordingly."
Level1Room2PuzzleMaster.cs,Which methods are overridden in the Level1Room2PuzzleMaster class?,"The Level1Room2PuzzleMaster class overrides the OnStart, OnEnable, and OnDisable methods."
Level1Room2PuzzleMaster.cs,What is the purpose of the LevelEventHub script and how does the Level1Room2PuzzleMaster class interact with it?,"The LevelEventHub script appears to be a central point for managing and broadcasting events in the game. The Level1Room2PuzzleMaster class subscribes to the OnLightGunLightInjected event from the LevelEventHub, which allows it to listen for and handle events related to light injection."
Level1Room2PuzzleMaster.cs,Which variable controls the status of the puzzle's wires?,The boolean array _room2PuzzleStatus is used to represent the status of each wire. Its elements are set to true or false based on whether the corresponding light has been injected correctly.
Level1Room2PuzzleMaster.cs,What is the purpose of the UpdateAllWires method?,The UpdateAllWires method is responsible for updating the visual state of all the wires in the puzzle. It checks the status of each wire using the _room2PuzzleStatus array and changes the material of the wire to indicate whether it is on or off.
Level1Room2PuzzleMaster.cs,How does the Level1Room2PuzzleMaster class differentiate between lights in different puzzle rooms?,The LightGunLightInjected method checks the ID of the injected light to determine if it belongs to the current puzzle room. This allows the class to handle light injection events specifically for the lights in its puzzle.
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', what happens when all lights are injected correctly into the puzzle?"," ```csharp
PuzzleCompleted();
``` "
Level1Room2PuzzleMaster.cs,'Level1Room2PuzzleMaster.cs' has a private variable 'turnedOnAfterPuzzle' of type 'LightGunLight'. How is this variable changed when the puzzle is completed?," ```csharp
foreach (LightGunLight light in turnedOnAfterPuzzle) light.InjectLight(isForced: true);
``` "
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', what happens when the puzzle is completed?"," ```csharp
puzzleSideDoor.Unlock();
puzzle3SideDoor.Unlock();
puzzleIndicator.TurnOn(LightColor.Green);
Lvl1TutorialManager.Instance.HideTutorial();
Lvl1FriendManager.Instance.SolvedPuzzle(2);
``` "
Level1Room2PuzzleMaster.cs,"When the player injects a light into the light gun in 'Level1Room2PuzzleMaster.cs', what function is called to check if all lights are injected correctly?"," ```csharp
CheckForCompletion();
``` "
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', what code is used to update the wires to show the current status of the puzzle?"," ```csharp
for (int i = 0; i < wires.Length; i++) {
  wires[i].material = _room2PuzzleStatus[i] ? wireOn : wireOff;
}
``` "
Level1Room2PuzzleMaster.cs,Where in 'Level1Room2PuzzleMaster.cs' are the wires that show the current status of the puzzle updated?," ```csharp
UpdateAllWires();
``` "
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', when a light is injected into the light gun, what function is called to check if the light was in this room and if it was the right color?"," ```csharp
LightGunLightInjected(int id, LightColor lightType);
``` "
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', what is the private array that holds the status of the lights?"," ```csharp
private bool[] _room2PuzzleStatus = { false, false, false, true, false, false, false, false };
``` "
Level1Room2PuzzleMaster.cs,How does 'Level1Room2PuzzleMaster.cs' know when the player injects a light into the light gun?," ```csharp
LevelEventHub.OnLightGunLightInjected += LightGunLightInjected;
``` "
Level1Room2PuzzleMaster.cs,"In 'Level1Room2PuzzleMaster.cs', what happens when the puzzle is not completed?"," ```csharp
UpdateAllWires();
``` "
Level1Room3PuzzleMaster.cs,What is the main purpose of the Level1Room3PuzzleMaster class?,"To manage the puzzle logic for the third puzzle room in level 1, specifically handling the cage and the main door."
Level1Room3PuzzleMaster.cs,What is the role of the cage in the puzzle?,"The cage serves as a main part of the puzzle, and its movement is controlled by the Level1Room3PuzzleMaster class."
Level1Room3PuzzleMaster.cs,How does the puzzleMainDoor variable relate to the puzzle?,The puzzleMainDoor variable represents the main door that is locked at the start of the puzzle and becomes unlocked when a power core is inserted into the power station.
Level1Room3PuzzleMaster.cs,What is the purpose of the PowerCoreInserted method?,"The PowerCoreInserted method handles the logic when a power core is inserted into the power station. It checks if the power core is for this puzzle room and performs actions accordingly, such as unlocking the main door and moving the cage."
Level1Room3PuzzleMaster.cs,What happens when a power core is ejected from the power station?,"When a power core is ejected from the power station, the PowerCoreEjected method is called. This method checks if the ejected power core is related to this puzzle room and performs actions accordingly, such as locking the main door and moving the cage back to its original position."
Level1Room3PuzzleMaster.cs,What is the role of the OnEnable method in this class?,"In the OnEnable method, the class subscribes to certain events, such as OnPowerCoreInserted and OnPowerCoreEjected, allowing it to listen for and respond to these events when they occur."
Level1Room3PuzzleMaster.cs,What does the OnDisable method do in this class?,"The OnDisable method unsubscribes from the events that the class had subscribed to in the OnEnable method, ensuring that the class is no longer listening to those events when it is disabled."
Level1Room3PuzzleMaster.cs,What is the purpose of the spawnRoomSideDoor field?,The spawnRoomSideDoor field represents a door located on the side of the spawn room. It is unlocked when a power core is inserted into the power station.
Level1Room3PuzzleMaster.cs,How does the puzzleIndicator variable relate to the puzzle?,The puzzleIndicator variable is associated with an object that serves as an indicator for the puzzle. It can be turned on with a specific light color to provide visual feedback to the player.
Level1Room3PuzzleMaster.cs,What is the functionality of the turnedOnAfterPuzzle array?,"The turnedOnAfterPuzzle array contains two elements, which represent two objects that should be lit up after the puzzle is solved. These objects are turned on with specific light colors."
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what happens when the power core is inserted into the power station?,"```csharp
if (id == 3) {
  puzzleMainDoor.Unlock();
  spawnRoomSideDoor.Unlock();
  turnedOnAfterPuzzle[0].InjectLight(isForced: true);
  turnedOnAfterPuzzle[1].InjectLight(LightColor.Green, true);
  cage.DOLocalMoveY(0.1106112f, 0.5f);
  puzzleIndicator.TurnOn(LightColor.Green);
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what happens when the power core is ejected from the power station?,"```csharp
if (id == 3) {
  puzzleMainDoor.Lock();
  cage.DOLocalMoveY(1.540611f, 0.5f);
  puzzleIndicator.TurnOn(LightColor.Red);
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what are the events that the class subscribes to?,"```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    LevelEventHub.OnPowerCoreEjected += PowerCoreEjected;
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what are the events that the class unsubscribes to?,"```csharp
public override void OnDisable() {
    //unsubscribing to some events
    LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    LevelEventHub.OnPowerCoreEjected -= PowerCoreEjected;
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what is the type of 'turnedOnAfterPuzzle' ?,"```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    LevelEventHub.OnPowerCoreEjected += PowerCoreEjected;
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what does the method 'InjectLight' do?,"```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    LevelEventHub.OnPowerCoreEjected += PowerCoreEjected;
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what does the method 'TurnOn' do?,"```csharp
public override void OnEnable() {
    //subscribing (listening) to some events
    LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    LevelEventHub.OnPowerCoreEjected += PowerCoreEjected;
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what does the method 'Unlock' do?,"```csharp
if (id == 3) {
  puzzleMainDoor.Unlock();
  spawnRoomSideDoor.Unlock();
  turnedOnAfterPuzzle[0].InjectLight(isForced: true);
  turnedOnAfterPuzzle[1].InjectLight(LightColor.Green, true);
  cage.DOLocalMoveY(0.1106112f, 0.5f);
  puzzleIndicator.TurnOn(LightColor.Green);
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what does the method 'Lock' do?,"```csharp
if (id == 3) {
  puzzleMainDoor.Lock();
  cage.DOLocalMoveY(1.540611f, 0.5f);
  puzzleIndicator.TurnOn(LightColor.Red);
}
```"
Level1Room3PuzzleMaster.cs,In 'Level1Room3PuzzleMaster.cs' what does the method 'DOLocalMoveY' do?,"```csharp
if (id == 3) {
  puzzleMainDoor.Unlock();
  spawnRoomSideDoor.Unlock();
  turnedOnAfterPuzzle[0].InjectLight(isForced: true);
  turnedOnAfterPuzzle[1].InjectLight(LightColor.Green, true);
  cage.DOLocalMoveY(0.1106112f, 0.5f);
  puzzleIndicator.TurnOn(LightColor.Green);
}
```"
Level1Room4PuzzleMaster.cs,What are the three main puzzle components of Level1Room4?,"The primary components of the puzzle in Level1Room4 are glass pieces maneuvered by lights, a power core that needs to be inserted, and a main door that unlocks upon puzzle completion."
Level1Room4PuzzleMaster.cs,What happens when the player inserts the power core into the power station?,"Inserting the power core into the power station triggers the completion of the puzzle, unlocking the puzzle's main door and other associated doors, activating a green light indicator, and signaling the completion of all puzzles in Level 1."
Level1Room4PuzzleMaster.cs,How are the glass pieces controlled in the puzzle?,"The glass pieces are controlled by the lights. When a specific light is green, the corresponding glass piece moves down. Conversely, when the light turns off, the glass piece moves back up."
Level1Room4PuzzleMaster.cs,What is the significance of light ID 40?,"Light ID 40 controls the door leading to the puzzle room. When this light is green, the door unlocks, allowing the player to enter the puzzle room."
Level1Room4PuzzleMaster.cs,What happens when a power core is inserted into the power station? Does it trigger the completion of the puzzle?,"Inserting the power core into the power station initiates the puzzle completion sequence, unlocking the puzzle's main door and any associated doors, activating a green light indicator, and signaling the resolution of all puzzles in Level 1."
Level1Room4PuzzleMaster.cs,What is the purpose of lights with IDs 41 to 44?,"Lights with IDs 41 to 44 control the glass pieces in the puzzle. When a specific light among these is green, the corresponding glass piece moves down. However, when the light turns off, the glass piece moves back up."
Level1Room4PuzzleMaster.cs,How does the puzzle indicate its completion?,"The completion of the puzzle is signified by unlocking the puzzle's main door and other associated doors, activating a green light indicator, and signaling the resolution of all puzzles in Level 1."
Level1Room4PuzzleMaster.cs,What is the relationship between Level1Room4PuzzleMaster and Level1RoomPuzzleMaster?,"Level1Room4PuzzleMaster extends Level1RoomPuzzleMaster, inheriting its functionality and adding specific puzzle logic for the fourth puzzle room in Level 1."
Level1Room4PuzzleMaster.cs,What are some of the events that Level1Room4PuzzleMaster listens to?,"Level1Room4PuzzleMaster listens to events such as LightGunLightInjected, which notifies it when a light is updated, and PowerCoreInserted, which informs it when a power core is inserted into the power station."
Level1Room4PuzzleMaster.cs,What are the primary responsibilities of Level1Room4PuzzleMaster?,"Level1Room4PuzzleMaster manages the glass pieces, lightGun lights, power core insertion, and main door in the context of the puzzle. It handles puzzle completion, listens to specific events, and controls the movement of glass pieces based on light status."
Level1Room4PuzzleMaster.cs,What is the name of the event raised when a power core is inserted into a power station?," ```csharp
public void PowerCoreInserted(int id){
        //if it was for this room, puzzle is solved
        if (id == 4) {
            PuzzleCompleted();
        }
    }
``` "
Level1Room4PuzzleMaster.cs,"In the 'Level1Room4PuzzleMaster' script, how does the glass piece move down?"," ```csharp
glass[index].DOLocalMoveY(downY, 0.5f);
``` "
Level1Room4PuzzleMaster.cs,What is the speed of the beast when the player is too far?," ```csharp
if (navMeshAgent.remainingDistance > distanceToPlayerThatBeastRuns)
    navMeshAgent.speed = Constants.BeastFastSpeed;
else navMeshAgent.speed = normalSpeed;
``` "
Level1Room4PuzzleMaster.cs,What is the name of the method that is called when the puzzle is completed?," ```csharp
private void PuzzleCompleted() {
        //puzzle is solved.//
        foreach (LightGunLight light in turnedOnAfterPuzzle) light.InjectLight(isForced: true);
        puzzleMainDoor.Unlock();
        foreach (SimpleDoor door in doorsToBeOpenedAfterSolving) door.Unlock();
        puzzleIndicator.TurnOn(LightColor.Green);

        //puzzle 4 is the last puzzle in level 1. so we call the event that tells the level manager that all puzzles are solved
        Level1EventHub.All4PuzzlesAreSolved();
        Lvl1FriendManager.Instance.SolvedPuzzle(4);
    }
``` "
Level1Room4PuzzleMaster.cs,What is the name of the class that the 'Level1Room4PuzzleMaster' inherits from?," ```csharp
public class Level1Room4PuzzleMaster : Level1RoomPuzzleMaster {
    //glass pieces are controlled by the lights and are blocking the power core insertion
    [SerializeField] private Transform[] glass;

    [SerializeField] private SimpleDoor[] doorsToBeOpenedAfterSolving;
    private float downY, upY;

    //called when power core is inserted into the power station
    private void PuzzleCompleted() {
        //puzzle is solved.
        foreach (LightGunLight light in turnedOnAfterPuzzle) light.InjectLight(isForced: true);
        puzzleMainDoor.Unlock();
        foreach (SimpleDoor door in doorsToBeOpenedAfterSolving) door.Unlock();
        puzzleIndicator.TurnOn(LightColor.Green);

        //puzzle 4 is the last puzzle in level 1. so we call the event that tells the level manager that all puzzles are solved
        Level1EventHub.All4PuzzlesAreSolved();
        Lvl1FriendManager.Instance.SolvedPuzzle(4);
    }

    //called when a light is updated(a light is either injected or sucked from a lightGun light)
    private void LightGunLightInjected(int id, LightColor lightType) {
        //handle the light based on its id
        switch (id) {
            //this light opens the door to this puzzle room
            case 40:
                if (lightType == LightColor.Green && puzzleSideDoor.IsLocked) {
                    puzzleSideDoor.Unlock();
                }

                break;
            //these lights are for the puzzle,they control the glass pieces.
            case 41:
            case 42:
            case 43:
            case 44:
                //get the index of the glass piece that is controlled by this light
                int index = id - 41;
                //if it is green, move it down. if it is off, move it up
                if (lightType == LightColor.Green) {
                    glass[index].DOLocalMoveY(downY, 0.5f);
                }
                else if (lightType == LightColor.Off) {
                    glass[index].DOLocalMoveY(upY, 0.5f);
                }

                break;
        }
    }

    // called when a power core is inserted into the power station. if it was for this room, puzzle is solved
    private void PowerCoreInserted(int id) {
        //if it was for this room, puzzle is solved
        if (id == 4) {
            PuzzleCompleted();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightGunLightInjected += LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;

        //saving the initial y positions of the glass pieces
        downY = glass[0].localPosition.y;
        upY = glass[1].localPosition.y;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightGunLightInjected -= LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
}
``` "
Level1Room4PuzzleMaster.cs,What is the name of the event raised when a light gun light is injected or sucked with the light gun?," ```csharp
    private void LightGunLightInjected(int id, LightColor lightType) {
        //handle the light based on its id
        switch (id) {
            //this light opens the door to this puzzle room
            case 40:
                if (lightType == LightColor.Green && puzzleSideDoor.IsLocked) {
                    puzzleSideDoor.Unlock();
                }

                break;
            //these lights are for the puzzle,they control the glass pieces.
            case 41:
            case 42:
            case 43:
            case 44:
                //get the index of the glass piece that is controlled by this light
                int index = id - 41;
                //if it is green, move it down. if it is off, move it up
                if (lightType == LightColor.Green) {
                    glass[index].DOLocalMoveY(downY, 0.5f);
                }
                else if (lightType == LightColor.Off) {
                    glass[index].DOLocalMoveY(upY, 0.5f);
                }

                break;
        }
    }
``` "
Level1Room4PuzzleMaster.cs,What is the name of the field that stores the glass pieces that are controlled by the lights?," ```csharp
    [SerializeField] private Transform[] glass;
``` "
Level1Room4PuzzleMaster.cs,What is the name of the field that stores the doors that are opened after the puzzle is solved?," ```csharp
    [SerializeField] private SimpleDoor[] doorsToBeOpenedAfterSolving;
``` "
Level1Room4PuzzleMaster.cs,What is the name of the method that is called when the player enables the 'Level1Room4PuzzleMaster' script?," ```csharp
public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightGunLightInjected += LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;

        //saving the initial y positions of the glass pieces
        downY = glass[0].localPosition.y;
        upY = glass[1].localPosition.y;
    }
``` "
Level1Room4PuzzleMaster.cs,What is the name of the method that is called when the player disables the 'Level1Room4PuzzleMaster' script?," ```csharp
public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightGunLightInjected -= LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
``` "
Lvl1R1ObjectDetector.cs,What is the purpose of the Lvl1R1ObjectDetector class?,"The Lvl1R1ObjectDetector class is used to track the number of objects in a pool in the first level, room 1. When an object is added or removed from the pool, the class triggers the Room1PoolUpdate event to notify other components that the pool has been updated."
Lvl1R1ObjectDetector.cs,What is the id variable used for?,The id variable is used to identify the pool that the Lvl1R1ObjectDetector is attached to. This value is used to distinguish between different pools in the room.
Lvl1R1ObjectDetector.cs,What is the targetAmount variable used for?,"The targetAmount variable represents the target number of objects that should be in the pool. When the number of objects in the pool matches the targetAmount, the Lvl1R1ObjectDetector class triggers the Room1PoolUpdate event with a 'true' value."
Lvl1R1ObjectDetector.cs,What happens when an object with the correct MetaData value intersects with the Lvl1R1ObjectDetector's trigger?,"When an object with the correct MetaData value (matching the id variable) intersects with the Lvl1R1ObjectDetector's trigger, the _objectCount variable is incremented and the Room1PoolUpdate event is triggered with a 'true' value."
Lvl1R1ObjectDetector.cs,What happens when an object with the correct MetaData value exits the Lvl1R1ObjectDetector's trigger?,"When an object with the correct MetaData value exits the Lvl1R1ObjectDetector's trigger, the _objectCount variable is decremented and the Room1PoolUpdate event is triggered with a 'false' value."
Lvl1R1ObjectDetector.cs,What is the purpose of the Level1EventHUB.RoomPoolUpdate method?,The Level1EventHUB.RoomPoolUpdate method is a broadcasting (calling) event that notifies other components that the pool status (full or not) has changed. This allows other components to respond to changes in the pool's status.
Lvl1R1ObjectDetector.cs,When is the RoomPoolUpdate called?,The Room1PoolUpdate event is called when an object is added or removed from the pool that the Lvl1R1ObjectDetector is attached to.
Lvl1R1ObjectDetector.cs,What type of data does the Room1PoolUpdate event pass?,The Room1PoolUpdate event takes two pieces of data : the id of the pool and a boolean value that indicates if the pool is full ('true') or not ('false').
Lvl1R1ObjectDetector.cs,What components might subscribe to the Room1PoolUpdate event?,"Other components in the scene, such as the level manager or the UI, might subscribe to the Room1PoolUpdate event to get notified when the status of the pool changes."
Lvl1R1ObjectDetector.cs,"How does this class help to solve the first level, room 1, pool's logic?","The Lvl1R1ObjectDetector class helps to solve the first level, room 1, pool's logic by detecting when objects enter or leave the pool, keeping track of the number of objects in the pool, and triggering events to notify other components when the pool status changes."
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what happens when an object enters a pool?," ```csharp
if (grabbableObject.MetaData == id) {
    _objectCount++;
    //broadcasting (calling) the event
    Level1EventHub.Room1PoolUpdate(id, _objectCount == targetAmount);
}
``` "
Lvl1R1ObjectDetector.cs,How does the 'Lvl1R1ObjectDetector' check if an object is for it's pool in 'Lvl1R1ObjectDetector.cs' ?," ```csharp
if (grabbableObject.MetaData == id) {
``` "
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' how is the 'Room1PoolUpdate' event triggered?," ```csharp
Level1EventHub.Room1PoolUpdate(id, _objectCount == targetAmount);
``` "
Lvl1R1ObjectDetector.cs,What action is performed when an object leaves a pool in 'Lvl1R1ObjectDetector.cs' ?," ```csharp
if (grabbableObject.MetaData == id) {
    //if the object is for this pool, decrease the object count and call the Room1PoolUpdate event
    _objectCount--;
    //broadcasting (calling) the event
    Level1EventHub.Room1PoolUpdate(id, false);
}
``` "
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what is the action carried out when an object is inside a pool?," ```csharp
if (grabbableObject.MetaData == id) {
    _objectCount++;
    //broadcasting (calling) the event
    Level1EventHub.Room1PoolUpdate(id, _objectCount == targetAmount);
}
``` "
Lvl1R1ObjectDetector.cs,"In the 'Lvl1R1ObjectDetector.cs' script, how is the target amount of objects for a pool retrieved?"," It's not retrieved from the script, it's set by the user in the unity editor under the 'targetAmount' field."
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what is the id of the pool?," ```csharp
[SerializeField] private int id;
``` "
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what is the component checked for when detecting objects in a pool?," ```csharp
if (other.TryGetComponent<GrabbableObjects>(out GrabbableObjects grabbableObject)) {
``` "
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what is the id used for?," ```csharp
Level1EventHub.Room1PoolUpdate(id, _objectCount == targetAmount);
``` "
Lvl1R1ObjectDetector.cs,in 'Lvl1R1ObjectDetector.cs' what is the 'other' in the 'void OnTriggerEnter(Collider other)' method?," ```csharp
private void OnTriggerEnter(Collider other) {
``` "
KeyGlassCage.cs,What is the KeyGlassCage class's responsibility?,The KeyGlassCage class handles the glass cage holding keys in level 2.
KeyGlassCage.cs,To what is the KeyGlassCage.cs class attached?,The KeyGlassCage.cs class is attached to the glass cage.
KeyGlassCage.cs,What happens when KeyGlassCage.Open() is called?,Calling KeyGlassCage.Open() moves the glass up to reveal the key.
KeyGlassCage.cs,What happens when KeyGlassCage.Close() is called?,Calling KeyGlassCage.Close() moves the glass down to hide the key.
KeyGlassCage.cs,What is the purpose of the glass variable in KeyGlassCage.cs?,"The glass variable references the transform of the glass object, allowing manipulation of its position."
KeyGlassCage.cs,What value does the closeY variable in KeyGlassCage.cs hold?,The closeY variable stores the y-coordinate where the glass is positioned when closed.
KeyGlassCage.cs,What value does the openY variable in KeyGlassCage.cs hold?,The openY variable stores the y-coordinate where the glass is positioned when open.
KeyGlassCage.cs,What is the duration of the glass movement animation in KeyGlassCage.cs?,The glass movement animation takes 0.5 seconds to complete.
KeyGlassCage.cs,What library is used for the tweening animation in KeyGlassCage.cs?,The DG.Tweening library is used for the tweening animation in KeyGlassCage.cs.
KeyGlassCage.cs,What inheritance relationship does KeyGlassCage.cs have?,The KeyGlassCage.cs class inherits from the MonoBehaviour class.
KeyGlassCage.cs,in 'KeyGlassCage.cs' How does the program open the cage?," ```csharp
glass.DOLocalMoveY(openY, 0.5f);
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' how does the program close the cage?," ```csharp
glass.DOLocalMoveY(closeY, 0.5f);
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what variable holds the glass?," ```csharp
private Transform glass;
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what is the name of the field that holds the Y position of the glass when it's closed?," ```csharp
private float closeY;
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what is the name of the field that holds the Y position of the glass when it's opened?," ```csharp
private float openY;
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what is the name of the method called to open the cage?," ```csharp
public void Open() {
  glass.DOLocalMoveY(openY, 0.5f);
}
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what is the name of the method called to close the cage?," ```csharp
public void Close() {
  glass.DOLocalMoveY(closeY, 0.5f);
}
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what library is used to move the glass?," ```csharp
using DG.Tweening;
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' what namespace is used to access the glass?," ```csharp
private Transform glass;
``` "
KeyGlassCage.cs,in 'KeyGlassCage.cs' How does the program know which namespace to use for glass?," ```csharp
using UnityEngine;
``` "
Level2MainCoreStationManager.cs,What is the purpose of the Level2MainCoreStationManager class?,"The Level2MainCoreStationManager class manages the main core station, the platform, tracks the number of solved puzzles and unlocks the main door when all 3 puzzles are solved."
Level2MainCoreStationManager.cs,What happens when a power core is inserted?,"The PowerCoreInserted() method is called, which brings up the platform if the core ID is 0, or calls SolvedPuzzle() if the core ID is 1, 2, or 3."
Level2MainCoreStationManager.cs,What happens when a puzzle is solved?,"The SolvedPuzzle() method is called, which increments the number of solved puzzles and calls SolvedAllPuzzles() if all 3 puzzles are solved."
Level2MainCoreStationManager.cs,What happens when all puzzles are solved?,"The SolvedAllPuzzles() method is called, which unlocks the main door."
Level2MainCoreStationManager.cs,What happens when the first power core is inserted?,"The BringUpThePlatform() method is called, which brings up the platform and calls EnteredLevel2Lobby() on the Lvl2FriendManager instance."
Level2MainCoreStationManager.cs,What is the purpose of the OnEnable() method?,The OnEnable() method subscribes to the OnPowerCoreInserted event and sets the cores parent to null so they don't move when the platform moves.
Level2MainCoreStationManager.cs,What is the purpose of the OnDisable() method?,The OnDisable() method unsubscribes from the OnPowerCoreInserted event.
Level2MainCoreStationManager.cs,What is the purpose of the platformAnimator field?,The platformAnimator field is used to control the platform's animations.
Level2MainCoreStationManager.cs,What is the purpose of the cores field?,The cores field is used to store the power core objects.
Level2MainCoreStationManager.cs,What is the purpose of the _solvedPuzzles field?,The _solvedPuzzles field is used to track the number of solved puzzles.
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when a power core is inserted, what does the code check and execute depending on the id of the core?"," ```csharp
switch (id) {
            case 0:
                BringUpThePlatform();
                break;
            case 1:
                SolvedPuzzle();
                break;
            case 2:
                SolvedPuzzle();
                break;
            case 3:
                SolvedPuzzle();
                break;
        }
``` "
Level2MainCoreStationManager.cs,in 'Level2MainCoreStationManager.cs' how many power cores are there to be inserted?," ```csharp
[SerializeField] private PowerCoreObject[] cores;
``` "
Level2MainCoreStationManager.cs,in 'Level2MainCoreStationManager.cs' what function is called when the first power core is inserted?," ```csharp
private void BringUpThePlatform() {
        platformAnimator.SetTrigger(""BringUp"");
        Lvl2FriendManager.Instance.EnteredLevel2Lobby();
    }
``` "
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when a power core is inserted, how does the code check the id of the core?"," ```csharp
switch (id) {
            case 0:
                BringUpThePlatform();
                break;
            case 1:
                SolvedPuzzle();
                break;
            case 2:
                SolvedPuzzle();
                break;
            case 3:
                SolvedPuzzle();
                break;
        }
``` "
Level2MainCoreStationManager.cs,in 'Level2MainCoreStationManager.cs' what happens when all 3 puzzles are solved?," ```csharp
private void SolvedAllPuzzles() {
        _mainDoor.Unlock();
    }
``` "
Level2MainCoreStationManager.cs,in 'Level2MainCoreStationManager.cs' what variable is used to track the number of solved puzzles?," ```csharp
private int _solvedPuzzles;
``` "
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when a power core is inserted, what does the code do in the case where the power core is one of the puzzle power cores?"," ```csharp
else if (id == 1 || id == 2 || id == 3) {
    SolvedPuzzle();
}
``` "
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when the first power core is inserted, how does the code tell the platform to come up?"," ```csharp
platformAnimator.SetTrigger(""BringUp"");
``` "
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when the first power core is inserted, what does the code do to the cores' parent ?"," ```csharp
//setting the cores parent to null so they don't move when the platform moves
        foreach (var core in cores) core.transform.parent = null;
``` "
Level2MainCoreStationManager.cs,"in 'Level2MainCoreStationManager.cs' when a power core is inserted, what does the code do in the case where the power core is the platform key?"," ```csharp
case 0:
``` "
Level2Manager.cs,What is the function of the Level2Manager class located in the Level.Level2 folder in Unity?,"The Level2Manager class is responsible for serving as a hub for the Level 2 of the game, providing references to key managers and handling events for specific puzzles and elements within the level."
Level2Manager.cs,What specific level fields are found within the Level2Manager class?,"The Level2Manager class has two specific level fields: level2PuzzleMaster and level2MainCoreStationManager, which provide references to the Level2PuzzleMaster and Level2MainCoreStationManager classes respectively."
Level2Manager.cs,In which override method within the Level2Manager class is the level2PuzzleMaster's OnStart() method called?,The level2PuzzleMaster's OnStart() method is called in the Start() override method within the Level2Manager class.
Level2Manager.cs,"In the Level2Manager class, what method handles events related to the pressing of a button in Puzzle 1?",The method OnPuzzle1ButtonPressed in the Level2Manager class handles events related to the pressing of a button in Puzzle 1.
Level2Manager.cs,In which method within the Level2Manager class is the completion of Puzzle 2 checked?,The completion of Puzzle 2 is checked in the Puzzle2CheckForCompletion method within the Level2Manager class.
Level2Manager.cs,What method in the Level2Manager class handles events related to changes in the color of the light on a key holder in Puzzle 3?,The method Puzzle3KeyHolderLightChanged in the Level2Manager class handles events related to changes in the color of the light on a key holder in Puzzle 3.
Level2Manager.cs,Which method within the Level2Manager class is responsible for handling events related to the first pressure plate change in Puzzle 1's Stage 1?,The method Stage1PressurePlateChangedFirst in the Level2Manager class is responsible for handling events related to the first pressure plate change in Puzzle 1's Stage 1.
Level2Manager.cs,Which method within the Level2Manager class is responsible for handling events related to the second pressure plate change in Puzzle 1's Stage 1?,The method Stage1PressurePlateChangedSecond in the Level2Manager class is responsible for handling events related to the second pressure plate change in Puzzle 1's Stage 1.
Level2Manager.cs,Which method in the Level2Manager class handles events related to the pressure plate change in Puzzle 1's Stage 2?,The method Stage2PressurePlateChanged in the Level2Manager class handles events related to the pressure plate change in Puzzle 1's Stage 2.
Level2Manager.cs,"Within the Level2Manager class, in which override method are the OnEnable() methods for level2PuzzleMaster and level2MainCoreStationManager called?",The OnEnable() methods for level2PuzzleMaster and level2MainCoreStationManager are called in the OnEnable() override method within the Level2Manager class.
Level2Manager.cs,In the Start method of this class where do the methods we want to call on Level2PuzzleMaster come from?," ```csharp
protected override void Start() {
  base.Start();
  level2PuzzleMaster.OnStart();
}
``` "
Level2Manager.cs,"In the OnEnable method of this class, what is the context of enabling the method OnEnable on the 'level2PuzzleMaster' variable?"," ```csharp
protected override void OnEnable() {
  base.OnEnable();
  //calling OnEnable on some classes
  level2PuzzleMaster.OnEnable();
  level2MainCoreStationManager.OnEnable(mainDoor);
}
``` "
Level2Manager.cs,What keeps the 'Level2PuzzleMaster.Puzzle2CheckForCompletion()' method from being invoked?," ```csharp
public void Puzzle2CheckForCompletion() => level2PuzzleMaster.Puzzle2CheckForCompletion();
``` "
Level2Manager.cs,"In the 'Puzzle3KeyHolderLightChanged' method, what is the 'color' parameter doing?"," ```csharp
public void Puzzle3KeyHolderLightChanged(int id, LightColor color) =>
  level2PuzzleMaster.Puzzle3KeyHolderLightChanged(id, color);
``` "
Level2Manager.cs,What's the name of the object in the Inspector where we choose the method to be called when 'OnPuzzle1ButtonPressed' method is invoked?," ```csharp
public void OnPuzzle1ButtonPressed() => level2PuzzleMaster.OnPuzzle1ButtonPressed();
``` "
Level2Manager.cs,"In the disable method, what does the 'level2MainCoreStationManager.OnDisable()' method do?"," ```csharp
protected override void OnDisable() {
  base.OnDisable();
  //calling OnDisable on some classes
  level2PuzzleMaster.OnDisable();
  level2MainCoreStationManager.OnDisable();
}
``` "
Level2Manager.cs,What's the relationship between the 'Stage1PressurePlateChangedSecond' and 'Stage1PressurePlateChangedFirst' methods and 'Stage2PressurePlateChanged' method in this class?," ```csharp
public void Stage1PressurePlateChangedFirst(bool isActivated) =>
  level2PuzzleMaster.Stage1PressurePlateChangedFirst(isActivated);
public void Stage1PressurePlateChangedSecond(bool isActivated) =>
  level2PuzzleMaster.Stage1PressurePlateChangedSecond(isActivated);
public void Stage2PressurePlateChanged(bool isActivated) =>
  level2PuzzleMaster.Stage2PressurePlateChanged(isActivated);
``` "
Level2Manager.cs,Explain the code for the 'OnDisable' method in this class.," ```csharp
protected override void OnDisable() {
  base.OnDisable();
  //calling OnDisable on some classes
  level2PuzzleMaster.OnDisable();
  level2MainCoreStationManager.OnDisable();
}
``` "
Level2Manager.cs,What does this class inherit from and what's the relationship between these two classes?," ```csharp
public class Level2Manager : LevelManager<Level2Manager> {
``` "
Level2Manager.cs,What does this class itself inherit from?," ```csharp
: LevelManager<Level2Manager>
``` "
Lvl2FriendManager.cs,What is the purpose of the Lvl2FriendManager.cs class?,Lvl2FriendManager.cs manages all the friend voice tracks in level 2. It plays the correct sound when the player enters any of the player detectors. It also has public methods that are called by others to play the correct sound.
Lvl2FriendManager.cs,What pattern is the Lvl2FriendManager.cs class implemented in?,The Lvl2FriendManager.cs class is implemented in the singleton pattern.
Lvl2FriendManager.cs,What are the responsibilities of the Lvl2FriendManager.cs class?,"It manages all friend voice tracks in level 2, plays the correct sound when the player enters any of the player detectors, and provides public methods for other scripts to play specific sounds."
Lvl2FriendManager.cs,"What is the purpose of the AudioClip variables such as 'enteredLevel2Loader', 'talkAboutLevel1Stats', and 'enteredLevel2Lobby'?",These AudioClip variables hold references to the audio clips containing the voice tracks for various events in level 2.
Lvl2FriendManager.cs,What is the purpose of the _heldKeys list?,The _heldKeys list keeps track of the keys the player has obtained.
Lvl2FriendManager.cs,What is the purpose of the CalledMultipleButPlayOnce() method?,"The CalledMultipleButPlayOnce() method is used to play specific audio clips only once, even if they are called multiple times. It sets the audio clip to null after playing it to prevent it from being played again."
Lvl2FriendManager.cs,What is the purpose of the public methods such as 'EnteredLevel2Loader()' and 'TalkAboutLevel1Stats()'?,"These public methods are used by other scripts to trigger the playing of specific audio clips. For example, 'EnteredLevel2Loader()' is called when the player enters the level 2 loader area."
Lvl2FriendManager.cs,What is the purpose of the 'HeldKey()' method?,The 'HeldKey()' method is called when the player holds one of the keys for the first time and plays the corresponding sound effect.
Lvl2FriendManager.cs,How does the Lvl2FriendManager.cs class handle events such as 'OnLightsBackOn' and 'OnLightsOut'?,"It subscribes to these events in the 'OnEnable()' method and unsubscribes in the 'OnDisable()' method. When these events are triggered, the corresponding 'LightsBackOn()' and 'LightsOut()' methods are called to play the appropriate audio clips."
Lvl2FriendManager.cs,What is the overall purpose of the Lvl2FriendManager.cs class in the context of the game?,"The Lvl2FriendManager.cs class is responsible for providing audio feedback to the player as they progress through level 2. It plays voice tracks for various events, such as entering different areas, solving puzzles, and obtaining keys."
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player enters the first room from the level2's loader?," ```csharp
enteredLevel2Loader
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the method used to stop playing a clip if called multiple times?," ```csharp
CalledMultipleButPlayOnce(ref AudioClip clip, int delay = 0)
``` "
Lvl2FriendManager,"In 'Lvl2FriendManager' what is the name of the event that is listened to and once triggered, it'll call the 'LightsBackOn' method?"," ```csharp
LevelEventHub.OnLightsBackOn
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player completes puzzle number 1?," ```csharp
EnterPuzzle1
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player enters the third key?," ```csharp
enteredThirdKey
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player holds one of the keys for the first time?," ```csharp
heldFirstKey
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player finds the second power room?," ```csharp
foundSecondPowerRoom
``` "
Lvl2FriendManager,"In 'Lvl2FriendManager' what is the name of the event that is listened to and once triggered, it'll call the 'LightsOut' method?"," ```csharp
LevelEventHub.OnLightsOut
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the name of the method that is being called when the player finishes puzzle number 3?," ```csharp
MidPuzzle3
``` "
Lvl2FriendManager,In 'Lvl2FriendManager' what is the reference to the clip that is being played when the player inserts the second key?," ```csharp
enteredSecondKey
``` "
PressurePlate.cs,What is the primary responsibility of the PressurePlate class?,"The PressurePlate class handles the behavior of a pressure plate. It activates and deactivates the plate based on the number of objects on it, and it invokes UnityEvents when the state of the plate changes."
PressurePlate.cs,What is the purpose of the 'plate' variable in the PressurePlate class?,"The 'plate' variable references the Transform component of the plate object, which moves vertically when the pressure plate is activated or deactivated."
PressurePlate.cs,What is the significance of the 'activeY' variable?,The 'activeY' variable specifies the y-position the 'plate' will be moved to when the pressure plate is activated.
PressurePlate.cs,What is the role of the 'onStateChange' variable?,"The 'onStateChange' variable is a UnityEvent, which is designed to trigger other events or actions when the state of the pressure plate changes."
PressurePlate.cs,What occurs when there's nothing or something on the pressure plate's trigger collider?,"When there are no objects on the pressure plate's trigger collider, it deactivates, and when an object enters the trigger collider, it activates."
PressurePlate.cs,How does the PressurePlate class keep track of the number of objects on the plate?,The PressurePlate class uses the '_numberOfObjectsOnThePlate' variable to keep track of the number of objects on the pressure plate. It increments this variable when an object enters the trigger collider and decrements it when an object exits the trigger collider.
PressurePlate.cs,What happens when the '_numberOfObjectsOnThePlate' variable reaches zero?,"When the '_numberOfObjectsOnThePlate' variable reaches zero, it indicates that there are no objects on the pressure plate, causing the plate to deactivate."
PressurePlate.cs,How do the 'Activate()' and 'Deactivate()' methods contribute to the pressure plate's behavior?,"The 'Activate()' method moves the pressure plate to its active position and invokes the 'onStateChange' event with 'true' as an argument, indicating that the plate is active. Similarly, the 'Deactivate()' method moves the plate to its inactive position and invokes the event with 'false', signifying the plate is inactive."
PressurePlate.cs,What is the purpose of the 'OnTriggerEnter' and 'OnTriggerExit' methods in the PressurePlate class?,"The 'OnTriggerEnter' method responds when an object enters the pressure plate's trigger collider, incrementing the '_numberOfObjectsOnThePlate' variable and potentially activating the plate if there were none on it before. The 'OnTriggerExit' method does the opposite when an object exits the trigger collider, decrementing the '_numberOfObjectsOnThePlate' variable and potentially deactivating the plate if it reaches zero."
PressurePlate.cs,What is the significance of the log messages in the 'OnTriggerEnter' and 'OnTriggerExit' methods?,The log messages are used for debugging purposes to display the name of the object that entered or exited the trigger collider.
PressurePlate.cs,"In 'PressurePlate.cs', how does the plate change its state when an object enters or exits its trigger?"," ```csharp
if (_numberOfObjectsOnThePlate == 0) {
  Activate();
}
```

```csharp
if (_numberOfObjectsOnThePlate == 0) {
  Deactivate();
}
``` "
PressurePlate.cs,What UnityEvent is invoked in 'PressurePlate.cs' when the state of the plate changes?," ```csharp
[SerializeField] UnityEvent<bool> onStateChange;
``` "
PressurePlate.cs,How does 'PressurePlate.cs' handle the movement of the plate when it is activated or deactivated?," ```csharp
plate.DOLocalMoveY(activeY, 0.5f);
```

```csharp
plate.DOLocalMoveY(0, 0.5f);
``` "
PressurePlate.cs,Where is the 'PressurePlate' component serialized in 'PressurePlate.cs'?," ```csharp
plate.DOLocalMoveY(activeY, 0.5f);
```

```csharp
plate.DOLocalMoveY(0, 0.5f);
``` "
PressurePlate.cs,"In 'PressurePlate.cs', what is the purpose of the '_numberOfObjectsOnThePlate' variable?"," ```csharp
private int _numberOfObjectsOnThePlate;   // number of objects on the plate
``` "
PressurePlate.cs,What method is responsible for activating the pressure plate in 'PressurePlate.cs'?," ```csharp
private void Activate() {
  // move plate to active position and invoke the event
  plate.DOLocalMoveY(activeY, 0.5f);
  onStateChange?.Invoke(true);
}
``` "
PressurePlate.cs,What method is responsible for deactivating the pressure plate in 'PressurePlate.cs'?," ```csharp
private void Deactivate() {
  // move plate to inactive position and invoke the event
  plate.DOLocalMoveY(0, 0.5f);
  onStateChange?.Invoke(false);
}
``` "
PressurePlate.cs,"In 'PressurePlate.cs', what is the purpose of the 'onStateChange' UnityEvent?"," ```csharp
UnityEvent<bool> onStateChange;
``` "
PressurePlate.cs,How does 'PressurePlate.cs' track the number of objects on the plate?," ```csharp
// some object enters the trigger collider
private void OnTriggerEnter(Collider other) {
  Debug.Log(""enter "" + other.name);
  // if there was nothing on the plate, activate it
  if (_numberOfObjectsOnThePlate == 0) {
    Activate();
  }
  _numberOfObjectsOnThePlate++;
}
```

```csharp
// some object exits the trigger collider
private void OnTriggerExit(Collider other) {
  Debug.Log(""exit "" + other.name);
  _numberOfObjectsOnThePlate--;
  // if there is nothing on the plate anymore, deactivate it
  if (_numberOfObjectsOnThePlate == 0) {
    Deactivate();
  }
}
``` "
PressurePlate.cs,What is the condition used to check if the pressure plate should be activated in 'PressurePlate.cs'?," ```csharp
if (_numberOfObjectsOnThePlate == 0) {
  Activate();
}
``` "
Level2Puzzle2PixelPuzzle.cs,What is the purpose of the Level2Puzzle2PixelPuzzle class?,"The Level2Puzzle2PixelPuzzle class manages the logic for a specific puzzle in level 2, which has multiple grid of pixels that should be colored in a certain order."
Level2Puzzle2PixelPuzzle.cs,What is the relationship between the Level2Puzzle2PixelPuzzle class and the LightGunLight class?,"Each pixel in the puzzle is represented by a LightGunLight object, and the Level2Puzzle2PixelPuzzle class manages the behavior and interactions of these pixel lights."
Level2Puzzle2PixelPuzzle.cs,What is the purpose of the lightColor array in the Level2Puzzle2PixelPuzzle class?,The lightColor array defines the target color that each pixel should be in order for the puzzle to be completed.
Level2Puzzle2PixelPuzzle.cs,What is the role of the wire object in the Level2Puzzle2PixelPuzzle class?,The wire object represents a visual cue that indicates the status of the puzzle. Its color changes based on whether the puzzle is completed or not.
Level2Puzzle2PixelPuzzle.cs,When is the OnPixelChanged method called?,The OnPixelChanged method is called whenever the color of any pixel in the puzzle changes.
Level2Puzzle2PixelPuzzle.cs,What happens in the OnPixelChanged method?,"Within the OnPixelChanged method, the script checks if all pixels are in the correct color based on the lightColor array. If so, it marks the puzzle as completed and updates the visual feedback accordingly. It also notifies the Level2Manager about the change in puzzle status."
Level2Puzzle2PixelPuzzle.cs,What is the purpose of the IsCompleted property in the Level2Puzzle2PixelPuzzle class?,"The IsCompleted property indicates whether the puzzle has been solved or not. It is set to true when all pixels are in the correct color, and this completion status is used to update visual cues and notify the level manager."
Level2Puzzle2PixelPuzzle.cs,How does the Level2Puzzle2PixelPuzzle class communicate with the Level2Manager class?,The Level2Puzzle2PixelPuzzle class notifies the Level2Manager about changes in the puzzle's completion status through the Puzzle2CheckForCompletion method.
Level2Puzzle2PixelPuzzle.cs,What is the purpose of the _materials field in the Level2Puzzle2PixelPuzzle class?,"The _materials field is a reference to the LightMaterialDatabaseSO asset, which contains a collection of materials used for different visual effects. The script uses this database to assign materials to objects based on their state."
Level2Puzzle2PixelPuzzle.cs,How does the Level2Puzzle2PixelPuzzle class determine if the puzzle is completed?,"The script checks if all pixels in the puzzle match the target colors defined in the lightColor array. If all pixels are correct, the puzzle is considered complete."
Level2Puzzle2PixelPuzzle.cs,What is the code used to get the materials database in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
_materials = GameManager.Instance.SimpleLightMaterials;
``` "
Level2Puzzle2PixelPuzzle.cs,How does 'Level2Puzzle2PixelPuzzle.cs' understand if the puzzle completion mode is changed?," ```csharp
public void OnPixelChanged() {
    //check for completion
    IsCompleted = true;
    for (int i = 0; i < pixels.Length; i++) {
      if (pixels[i].LightType != lightColor[i]) {
        IsCompleted = false;
        break;
      }
    }

    if (IsCompleted) Lvl2FriendManager.Instance.MidPuzzle2();

    // change the wire color
    wire.material = IsCompleted ? _materials.Green : _materials.Red;

    // notify the level2PuzzleMaster that puzzle is changed, check for all puzzles completion
    Level2Manager.Instance.Puzzle2CheckForCompletion();
}
``` "
Level2Puzzle2PixelPuzzle.cs,What changes the wire color in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
wire.material = IsCompleted ? _materials.Green : _materials.Red;
``` "
Level2Puzzle2PixelPuzzle.cs,What variable stores the 'IsCompleted' value in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
public bool IsCompleted { get; private set; }
``` "
Level2Puzzle2PixelPuzzle.cs,"In 'Level2Puzzle2PixelPuzzle.cs', what is the variable that stores the value of the grid's pixels?"," ```csharp
[SerializeField] private LightGunLight[] pixels;
``` "
Level2Puzzle2PixelPuzzle.cs,How does 'Level2Puzzle2PixelPuzzle.cs' check if the puzzle is completed?," ```csharp
for (int i = 0; i < pixels.Length; i++) {
  if (pixels[i].LightType != lightColor[i]) {
    IsCompleted = false;
    break;
  }
}
``` "
Level2Puzzle2PixelPuzzle.cs,What is the code used to set the wire color to red in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
wire.material = _materials.Red;
``` "
Level2Puzzle2PixelPuzzle.cs,How does 'Level2Puzzle2PixelPuzzle.cs' check if the puzzle is completed?," ```csharp
IsCompleted = true;
for (int i = 0; i < pixels.Length; i++) {
  if (pixels[i].LightType != lightColor[i]) {
    IsCompleted = false;
    break;
  }
}
``` "
Level2Puzzle2PixelPuzzle.cs,What is the code used to store the different light colors in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
[SerializeField] private LightColor[] lightColor;
``` "
Level2Puzzle2PixelPuzzle.cs,What is the code used to check if all of the pixel are in their correct color in 'Level2Puzzle2PixelPuzzle.cs' ?," ```csharp
IsCompleted = true;
for (int i = 0; i < pixels.Length; i++) {
  if (pixels[i].LightType != lightColor[i]) {
    IsCompleted = false;
    break;
  }
}
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What is the purpose of the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class?,"The Level2Puzzle3LastPhaseSubStairsRoomManager.cs class manages the behavior of a specific part of a puzzle room in level 2 of the game. This part of the puzzle involves a power source that requires a specific light color to be active, and when activated, it triggers a set of stairs to become active as well."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What is the required color for the power source in this puzzle?,"The required color for the power source is specified in the requiredColor field, which can be set in the Unity editor. When the power source has the correct color, it activates a set of stairs."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"When the power source has the required color, what happens to the stairs?","When the power source has the required color, the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class activates all the stairs associated with it. These stairs become accessible and can be used to progress through the puzzle."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What happens when the power source does not have the required color?,"When the power source does not have the required color, the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class deactivates all the stairs associated with it. These stairs become inaccessible and cannot be used to progress through the puzzle."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,How does the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class determine the light color of the power source?,"The Level2Puzzle3LastPhaseSubStairsRoomManager.cs class does not directly determine the light color of the power source. Instead, it listens for changes in the light color through the PowerSourceLightChanged method, which is called when the light color of the power source changes."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What is the purpose of the PowerSourceLightChanged method?,"The PowerSourceLightChanged method is responsible for checking if the light color of the power source matches the required color. If it does, the method activates the associated stairs; otherwise, it deactivates them."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,How does the PowerSourceLightChanged method determine the light color of the power source?,"The PowerSourceLightChanged method receives the light color as a parameter, along with the ID of the power source. This information is used to determine if the light color matches the required color."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What happens when the light color of the power source changes?,"When the light color of the power source changes, the PowerSourceLightChanged method is called, which checks if the new light color matches the required color. If it does, the associated stairs are activated; otherwise, they are deactivated."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,How are the stairs activated and deactivated?,The stairs are activated and deactivated by calling the Activate and Deactivate methods respectively. These methods are implemented in the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class.
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,What is the purpose of the stairs field in the Level2Puzzle3LastPhaseSubStairsRoomManager.cs class?,"The stairs field is used to store the references to the stairs that should be activated and deactivated when the power source changes color. This field is serialized, allowing the stairs to be assigned in the Unity editor."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the required color for the power source to be active?"," ```csharp
[SerializeField] private LightColor requiredColor;
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the code used to activate all the stairs?"," ```csharp
Activate();
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the code used to deactivate all the stairs?"," ```csharp
Deactivate();
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the name of the method that is called when the light color of the power source changes?"," ```csharp
public void PowerSourceLightChanged(int id, LightColor color) {
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what happens inside the 'Activate' method?"," ```csharp
foreach (var stair in stairs) {
 stair.Activate();
}
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what happens inside the 'Deactivate' method?"," ```csharp
foreach (var stair in stairs) {
  stair.Deactivate();
}
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the name of the field that stores the required color for the power source to be active?"," ```csharp
[SerializeField] private LightColor requiredColor;
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the name of the field that stores the stairs that should be activated when the power source is active?"," ```csharp
[SerializeField] private SingleStair[] stairs;
``` "
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the purpose of the 'PowerSourceLightChanged' method?"," ```csharp
public void PowerSourceLightChanged(int id, LightColor color) {
``` 
It is called when the light color of the power source changes."
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"In 'Level2Puzzle3LastPhaseSubStairsRoomManager.cs', what is the name of the class that is referred to in the 'stairs' field?"," ```csharp
SingleStair
``` "
Level2PuzzleMaster,Where is Level2PuzzleMaster used?,Level2PuzzleMaster is used in the Level2Manager class as a field.
Level2PuzzleMaster,What is the purpose of the OnStart method?,The OnStart method is called from the Level2Manager and calls the OnStart method of all puzzle room managers.
Level2PuzzleMaster,What is the purpose of the OnPuzzle1ButtonPressed method?,The OnPuzzle1ButtonPressed method delegates the OnPuzzle1ButtonPressed event to the level2Room1PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the Puzzle2CheckForCompletion method?,The Puzzle2CheckForCompletion method delegates the CheckForCompletion method to the level2Room2PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the Puzzle3KeyHolderLightChanged method?,The Puzzle3KeyHolderLightChanged method delegates the KeyHolderLightChanged event to the level2Room3PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the Stage1PressurePlateChangedFirst method?,The Stage1PressurePlateChangedFirst method delegates the Stage1PressurePlateChangedFirst event to the level2Room3PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the Stage1PressurePlateChangedSecond method?,The Stage1PressurePlateChangedSecond method delegates the Stage1PressurePlateChangedSecond event to the level2Room3PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the Stage2PressurePlateChanged method?,The Stage2PressurePlateChanged method delegates the Stage2PressurePlateChanged event to the level2Room3PuzzleMaster.
Level2PuzzleMaster,What is the purpose of the OnEnable method?,The OnEnable method is called from the Level2Manager and calls the OnEnable method of all puzzle room managers.
Level2PuzzleMaster,What is the purpose of the OnDisable method?,The OnDisable method is called from the Level2Manager and calls the OnDisable method of all puzzle room managers.
Level2PuzzleMaster.cs,What does the 'Level2PuzzleMaster' class do ?," ```csharp
It delegates some events to puzzle room managers, all the delegated methods are originally called from Level2Manager
``` "
Level2PuzzleMaster.cs,What does the method 'OnStart' of the 'Level2PuzzleMaster' class do ?," ```csharp
Calls OnStart of all puzzle room managers
``` "
Level2PuzzleMaster.cs,What does the method 'OnPuzzle1ButtonPressed' do ?," ```csharp
OnPuzzle1ButtonPressed calls the OnPuzzle1ButtonPressed method of 'Level2Room1PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'Puzzle2CheckForCompletion' do ?," ```csharp
Calls CheckForCompletion of 'Level2Room2PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'Puzzle3KeyHolderLightChanged' do ?," ```csharp
Puzzle3KeyHolderLightChanged calls the KeyHolderLightChanged method in 'Level2Room3PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'Stage1PressurePlateChangedFirst' do ?," ```csharp
Calls Stage1PressurePlateChangedFirst method in 'Level2Room3PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'Stage1PressurePlateChangedSecond' do ?," ```csharp
Calls Stage1PressurePlateChangedSecond method in 'Level2Room3PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'Stage2PressurePlateChanged' do ?," ```csharp
Calls Stage2PressurePlateChanged method in 'Level2Room3PuzzleMaster'
``` "
Level2PuzzleMaster.cs,What does the method 'OnEnable' of the 'Level2PuzzleMaster' class do ?," ```csharp
calls OnEnable of all puzzle room managers
``` "
Level2PuzzleMaster.cs,What does the method 'OnDisable' of the 'Level2PuzzleMaster' class do ?," ```csharp
Calls OnDisable of all puzzle room managers
``` "
Level2Room1PuzzleMaster,What does the Level2Room1PuzzleMaster class in this Unity project do?,"The Level2Room1PuzzleMaster class is a child of the LevelRoomPuzzleMaster class and implements the puzzle logic for the first puzzle room in level 2. It manages the cages, light stands, and light types, and opens the cages for a while when the player presses a button if the lights in the stands are correct."
Level2Room1PuzzleMaster,What happens when the player presses the only button in puzzle 1?,"When the player presses the only button in puzzle 1, the Level2Room1PuzzleMaster class checks if the light types in the stand lights match the corresponding light colors in the lightColors array. If they match, it opens the corresponding cages using their animators and adds them to a list to be closed after a while."
Level2Room1PuzzleMaster,What is the purpose of the _shouldBeClosed list?,"The _shouldBeClosed list in the Level2Room1PuzzleMaster class stores the animators of the cages that need to be closed after a while. This list is used to close the cages after a specified amount of time using DOTween, which is a tweening library for Unity."
Level2Room1PuzzleMaster,How does the Level2Room1PuzzleMaster class manage the cages?,"The Level2Room1PuzzleMaster class manages the cages through their animators. It uses the Animator.SetTrigger() method to open and close the cages when certain conditions are met, such as when the player presses the puzzle 1 button and the light types in the stand lights match the corresponding light colors."
Level2Room1PuzzleMaster,Where is the Level2Room1PuzzleMaster class used in the Unity project?,"The Level2Room1PuzzleMaster class is used in the first puzzle room of level 2. It is a child of the LevelRoomPuzzleMaster class, which suggests that it is part of a larger puzzle system in the game."
Level2Room1PuzzleMaster,What is the purpose of the OnDisable() method in the Level2Room1PuzzleMaster class?,"The OnDisable() method in the Level2Room1PuzzleMaster class is used to unsubscribe from certain events when the object is disabled. This is done to ensure that the object does not continue to listen to events when it is not active, which can lead to errors or unintended behavior."
Level2Room1PuzzleMaster,What is the purpose of the OnEnable() method in the Level2Room1PuzzleMaster class?,"The OnEnable() method in the Level2Room1PuzzleMaster class is used to subscribe to certain events when the object is enabled. This allows the object to start listening to these events and respond accordingly, such as handling player input or reacting to changes in the game state."
Level2Room1PuzzleMaster,What are the possible light types for the stand lights?,The possible light types for the stand lights are defined in the LightColor enumeration. The Level2Room1PuzzleMaster class uses this enumeration to determine which light types are correct for each cage.
Level2Room1PuzzleMaster,What is the purpose of the cageOpenTimeWindow variable in the Level2Room1PuzzleMaster class?,"The cageOpenTimeWindow variable in the Level2Room1PuzzleMaster class specifies the amount of time that the cages should remain open after they are opened by the player pressing the puzzle 1 button. After this time, the cages will automatically close."
Level2Room1PuzzleMaster,Is the Level2Room1PuzzleMaster class a singleton?,"The provided context does not mention whether the Level2Room1PuzzleMaster class is a singleton or not, so this question cannot be answered from the given information."
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' how does the code open the cages if their lights are correct?,"```csharp
for (int i = 0; i < standLights.Length; i++) {
    if (standLights[i].LightType == lightColors[i]) {
        keyCages[i].SetTrigger(Change);
        _shouldBeClosed.Add(keyCages[i]);
    }
}
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what happens after a while after you open the cages?,"```csharp
DOTween.Sequence()
    .AppendInterval(cageOpenTimeWindow)
    .AppendCallback(() => {
        foreach (Animator keyCage in _shouldBeClosed) keyCage.SetTrigger(Change);
        _shouldBeClosed.Clear();
    });
```"
Level2Room1PuzzleMaster,How does the code know which light type should be in what cage in \'Level2Room1PuzzleMaster\'?,"```csharp
[SerializeField] private LightColor[] lightColors;
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what is the \'cageOpenTimeWindow\' field used for?,"```csharp
[SerializeField] private float cageOpenTimeWindow;
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what is the purpose of the \'_shouldBeClosed\' List?,"```csharp
private List<Animator> _shouldBeClosed = new();
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' how does the code know which cages to open in the first place?,"```csharp
for (int i = 0; i < standLights.Length; i++) {
    if (standLights[i].LightType == lightColors[i]) {
        keyCages[i].SetTrigger(Change);
        _shouldBeClosed.Add(keyCages[i]);
    }
}
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what is the \'Change\' Animator.StringToHash field used for?,"```csharp
private static readonly int Change = Animator.StringToHash(""change"");
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what is the purpose of the \'standLights\' array?,"```csharp
[SerializeField] private LightGunLight[] standLights;
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' what is the purpose of the \'keyCages\' array?,"```csharp
[SerializeField] private Animator[] keyCages;
```"
Level2Room1PuzzleMaster,In \'Level2Room1PuzzleMaster\' which function is called when the player presses the puzzle 1 button pressing?,"```csharp
public void OnPuzzle1ButtonPressed() {
    //for each cage, if its light type is the same as the corresponding light color in lightColors array then open it using its animator
    for (int i = 0; i < standLights.Length; i++) {
        if (standLights[i].LightType == lightColors[i]) {
            keyCages[i].SetTrigger(Change);
            _shouldBeClosed.Add(keyCages[i]);
        }
    }

    //after a while, close the cages
    DOTween.Sequence()
        .AppendInterval(cageOpenTimeWindow)
        .AppendCallback(() => {
            foreach (Animator keyCage in _shouldBeClosed) keyCage.SetTrigger(Change);
            _shouldBeClosed.Clear();
        });
}
```"
Level2Room2PuzzleMaster.cs,What is the main purpose of the Level2Room2PuzzleMaster class?,The Level2Room2PuzzleMaster class is responsible for managing the puzzle logic for the second puzzle room in level 2 of the game.
Level2Room2PuzzleMaster.cs,Where is the Level2Room2PuzzleMaster usually located in the game?,"The Level2Room2PuzzleMaster class is typically found as a field in the Level2PuzzleMaster class, which is a higher-level controller for managing the logic of all puzzles in level 2."
Level2Room2PuzzleMaster.cs,What are the different types of puzzles that need to be completed in the puzzle room?,"The puzzle room contains three types of puzzles, each of which is represented by a subclass of Level2Puzzle2PixelPuzzle: a left puzzle, a right puzzle, and a front puzzle."
Level2Room2PuzzleMaster.cs,What is the purpose of the CheckForCompletion method?,"The CheckForCompletion method is responsible for monitoring the completion status of the three puzzles in the room. When all puzzles are complete, it triggers the opening of a key glass cage."
Level2Room2PuzzleMaster.cs,What does the OnDisable method do?,The OnDisable method is used to unsubscribe from certain events when the Level2Room2PuzzleMaster is disabled.
Level2Room2PuzzleMaster.cs,What is the role of the keyCage field in this class?,"The keyCage field refers to an instance of the KeyGlassCage class, which represents the cage that needs to be opened upon the completion of all puzzles."
Level2Room2PuzzleMaster.cs,What is the significance of the OnEnable method in this class?,"The OnEnable method is used to subscribe to certain events when the Level2Room2PuzzleMaster is enabled, allowing it to listen for relevant events and respond accordingly."
Level2Room2PuzzleMaster.cs,What other classes are involved in handling the puzzle logic in the Level2Room2PuzzleMaster?,The Level2Puzzle2PixelPuzzle class is responsible for managing the logic and behavior of individual pixel puzzles in the puzzle room.
Level2Room2PuzzleMaster.cs,How does the class determine if all puzzles are completed?,The class checks the completion status of each individual puzzle through their respective IsCompleted properties.
Level2Room2PuzzleMaster.cs,What event does the class listen to in order to check for puzzle completions?,The class does not listen to any specific events for checking puzzle completions. It relies on the IsCompleted properties of the individual puzzle classes to determine completion status.
LevelRoomPuzzleMaster,"in 'LevelRoomPuzzleMaster', how does the master class know when a level puzzle is finished?"," ```csharp
public void OnPuzzleFinished(LevelRoomPuzzle puzzle)
    {
    //when a puzzle is finished check if all puzzles are finished
    CheckForCompletion();
    }
``` "
LevelRoomPuzzleMaster.cs,"what happens when player passes by a trigger(""MustTurnOnUsingItemTrigger"") in 'LevelRoomPuzzleMaster' class?"," ```csharp
private void OnTriggerEnter(Collider other)
    {
    if (other.CompareTag(""Player"") && other.GetComponent<PlayerController>() != null)
        {
            if (triggerName == ""MustTurnOnUsingItemTrigger"")
            {
                if (PlayerController.Instance.EquippedItem != null && PlayerController.Instance.EquippedItem.GetComponent<Lever>() == null)
                {
                    PlayerController.Instance.EquippedItem.GetComponent<Item>()?.UseItem();
                }
            }
        }
    }
``` "
LevelRoomPuzzleMaster.cs,"In the check for completion method, what does the class 'LevelRoomPuzzleMaster' do if all puzzles are completed?"," ```csharp
if (isPuzzle1Completed && isPuzzle2Completed && isPuzzle3Completed)
            {
                isPuzzleMasterCompleted = true;
                GetComponent<AudioSource>()?.Play();
                OnPuzzleMasterFinished();
            }
``` "
LevelRoomPuzzleMaster.cs,How does the class 'LevelRoomPuzzleMaster' handle it when a puzzle is completed?," ```csharp
public void OnPuzzleFinished(LevelRoomPuzzle puzzle)
    {
    //when a puzzle is finished check if all puzzles are finished
    CheckForCompletion();
    }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, what is the condition for the variable isPuzzleMasterCompleted to be true?"," ```csharp
if (isPuzzle1Completed && isPuzzle2Completed && isPuzzle3Completed)
            {
                isPuzzleMasterCompleted = true;
                GetComponent<AudioSource>()?.Play();
                OnPuzzleMasterFinished();
            }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, how does the class check if the puzzles are completed?"," ```csharp
private void CheckForCompletion()
    {
        if (isPuzzle1Completed && isPuzzle2Completed && isPuzzle3Completed)
            {
                isPuzzleMasterCompleted = true;
                GetComponent<AudioSource>()?.Play();
                OnPuzzleMasterFinished();
            }
    }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, how does the class handle when a puzzle is completed?"," ```csharp
public void OnPuzzleFinished(LevelRoomPuzzle puzzle)
    {
    //when a puzzle is finished check if all puzzles are finished
    CheckForCompletion();
    }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, what does the class do when the player passes by a trigger?"," ```csharp
private void OnTriggerEnter(Collider other)
    {
    if (other.CompareTag(""Player"") && other.GetComponent<PlayerController>() != null)
        {
            if (triggerName == ""MustTurnOnUsingItemTrigger"")
            {
                if (PlayerController.Instance.EquippedItem != null && PlayerController.Instance.EquippedItem.GetComponent<Lever>() == null)
                {
                    PlayerController.Instance.EquippedItem.GetComponent<Item>()?.UseItem();
                }
            }
        }
    }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, what does the class do when all puzzles are completed?"," ```csharp
if (isPuzzle1Completed && isPuzzle2Completed && isPuzzle3Completed)
            {
                isPuzzleMasterCompleted = true;
                GetComponent<AudioSource>()?.Play();
                OnPuzzleMasterFinished();
            }
``` "
LevelRoomPuzzleMaster.cs,"In the 'LevelRoomPuzzleMaster' class, how does the class check if all puzzles are completed?"," ```csharp
private void CheckForCompletion()
    {
        if (isPuzzle1Completed && isPuzzle2Completed && isPuzzle3Completed)
            {
                isPuzzleMasterCompleted = true;
                GetComponent<AudioSource>()?.Play();
                OnPuzzleMasterFinished();
            }
    }
``` "
Level2Room3PuzzleMaster.cs,What is the purpose of the stage1PressureStairsFirst variable?,The stage1PressureStairsFirst variable is used to control the activation and deactivation of a set of stairs based on the state of a Pressure Plate.
Level2Room3PuzzleMaster.cs,What is the purpose of the lights variable?,The lights variable represents the set of LightGunLight objects in the puzzle. The player must set these lights to the correct color in order to solve the puzzle.
Level2Room3PuzzleMaster.cs,What is the lastPhaseLightType variable used for?,The lastPhaseLightType variable defines the correct color that all lights in the puzzle must be set to in order to solve the puzzle.
Level2Room3PuzzleMaster.cs,What happens when all lights are set to the correct color?,"When all lights are set to the correct color, the puzzle is solved and the cage is opened."
Level2Room3PuzzleMaster.cs,Which function is called when a light changes color in the last phase of the puzzle?,The KeyHolderLightChanged function is called when a light changes color in the last phase of the puzzle.
Level2Room3PuzzleMaster.cs,What is the purpose of the wires variable?,The wires variable represents the set of wire meshes that indicate the status of each light in the last phase of the puzzle. They change color to green if the light is the correct color and red if it is not.
Level2Room3PuzzleMaster.cs,What function is called when the state of the Stage1 Pressure Plate changes?,The Stage1PressurePlateChanged functions are called when the state of the Stage1 Pressure Plate changes.
Level2Room3PuzzleMaster.cs,What function is called when the state of the Pressure Plate changes?,The Stage2PressurePlateChanged function is called when the state of the Pressure Plate changes.
Level2Room3PuzzleMaster.cs,What does the Solved function do?,The Solved function opens the cage when the puzzle is solved.
Level2Room3PuzzleMaster.cs,What functions are called when the puzzle Master is enabled or disabled?,"The OnEnable and OnDisable functions are called when the puzzle Master is enabled and disabled, respectively."
Level2Room3PuzzleMaster.cs,What does the 'OnStart' method in 'Level2Room3PuzzleMaster.cs' do?," ```csharp
_simpleMaterials = GameManager.Instance.SimpleLightMaterials;
foreach (var meshRenderer in wires) {\
  meshRenderer.material = _simpleMaterials.Red;\
}
``` "
Level2Room3PuzzleMaster.cs,What does the 'KeyHolderLightChanged' method do in 'Level2Room3PuzzleMaster.cs'?," ```csharp
for (int i = 0; i < lights.Length; i++) {\
  if (lights[i].LightType == lastPhaseLightType) {\
    wires[i].material = _simpleMaterials.Green;\
  }\
  else {\
    wires[i].material = _simpleMaterials.Red;\
    notSolved = true;\
  }\
}
if (!notSolved) Solved();
``` "
Level2Room3PuzzleMaster.cs,What happens when a single stage1 pressure plate changes in 'Level2Room3PuzzleMaster.cs'?," ```csharp
if (isActivated) stair.Activate();\
else stair.Deactivate();
``` "
Level2Room3PuzzleMaster.cs,What does the 'Stage2PressurePlateChanged' method do in 'Level2Room3PuzzleMaster.cs'?," ```csharp
foreach (var stair in stage2PressureStairs) stair.Flip();
``` "
Level2Room3PuzzleMaster.cs,What happens when the player solves the puzzle in 'Level2Room3PuzzleMaster.cs'?," ```csharp
keyGlassCage.Open();
``` "
Level2Room3PuzzleMaster.cs,How does the 'Stage1PressurePlateChangedSecond' method activate the stairs in 'Level2Room3PuzzleMaster.cs'?," ```csharp
foreach (var stair in stage1PressureStairsSecond) {\
  if (isActivated) stair.Activate();\
  else stair.Deactivate();\
}
``` "
Level2Room3PuzzleMaster.cs,What happens when the player changes the light color of the key holder in 'Level2Room3PuzzleMaster.cs'?," ```csharp
var notSolved = false;\
for (int i = 0; i < lights.Length; i++) {\
  if (lights[i].LightType == lastPhaseLightType) {\
    wires[i].material = _simpleMaterials.Green;\
  }\
  else {\
    wires[i].material = _simpleMaterials.Red;\
    notSolved = true;\
  }\
}
if (!notSolved) Solved();
``` "
Level2Room3PuzzleMaster.cs,What does the 'Solved' method do in 'Level2Room3PuzzleMaster.cs'?," ```csharp
keyGlassCage.Open();
``` "
Level2Room3PuzzleMaster.cs,What happens when the state of the pressure plate changes in 'Level2Room3PuzzleMaster.cs'?," ```csharp
foreach (var stair in stage2PressureStairs) stair.Flip();
``` "
Level2Room3PuzzleMaster.cs,What happens when the player activates the single stage1 pressure plate in 'Level2Room3PuzzleMaster.cs'?," ```csharp
if (isActivated) stair.Activate();\
else stair.Deactivate();
``` "
LightGunDrivenSingleStair.cs,What is the purpose of the LightGunDrivenSingleStair class?,The LightGunDrivenSingleStair class is responsible for the behavior of the light gun driven single stair in level 2. It is a specialized stair that can be activated or deactivated by the color of the light gun's light.
LightGunDrivenSingleStair.cs,What is the required color of the light gun light to activate the stair?,The required color of the light gun light to activate the stair is determined by the 'requiredLightColor' field.
LightGunDrivenSingleStair.cs,What happens when the light gun light is the required color?,"When the light gun light is the required color, the stair is activated."
LightGunDrivenSingleStair.cs,What happens when the light gun light is not the required color?,"When the light gun light is not the required color, the stair is deactivated."
LightGunDrivenSingleStair.cs,What is the event that the LightGunDrivenSingleStair class listens to?,"The LightGunDrivenSingleStair class listens to the 'OnLightChanged' event, which is triggered when the light gun light changes its color."
LightGunDrivenSingleStair.cs,What does the LightGunDrivenSingleStair class do when it receives the 'OnLightChanged' event?,"When the LightGunDrivenSingleStair class receives the 'OnLightChanged' event, it checks if the light gun light is the required color. If it is, it activates the stair. If it is not, it deactivates the stair."
LightGunDrivenSingleStair.cs,Is the LightGunDrivenSingleStair class a MonoBehaviour?,"Yes, the LightGunDrivenSingleStair class is a MonoBehaviour, which means it can be attached to a GameObject in a Unity scene."
LightGunDrivenSingleStair.cs,Is the LightGunDrivenSingleStair class a child of the SingleStair class?,"Yes, the LightGunDrivenSingleStair class is a child of the SingleStair class, which provides common functionality for all single stairs in the game."
LightGunDrivenSingleStair.cs,What is the name of the field that stores the required color of the light gun light?,The name of the field that stores the required color of the light gun light is 'requiredLightColor'.
LightGunDrivenSingleStair.cs,What is the name of the method that is called when the light gun light changes its color?,The name of the method that is called when the light gun light changes its color is 'OnLightChanged'.
LightGunDrivenSingleStair.cs,What private member variable is used to define the required color of the lightGun light?," ```csharp
 private LightColor requiredLightColor; ``` "
LightGunDrivenSingleStair.cs,What is the name of the event received when the lightGun light changes its color?," ```csharp
 public void OnLightChanged(int id, LightColor lightColor) ``` "
LightGunDrivenSingleStair.cs,How does the stair check if the lightGun light is the required color?," ```csharp
if (lightColor == requiredLightColor) ``` "
LightGunDrivenSingleStair.cs,What method is called to activate the stair when the lightGun light is the required color?," ```csharp
 Activate(); ``` "
LightGunDrivenSingleStair.cs,What method is called to deactivate the stair when the lightGun light is not the required color?," ```csharp
 Deactivate(); ``` "
LightGunDrivenSingleStair.cs,What class is this MonoBehaviour a child of?," ```csharp
 SingleStair ``` "
LightGunDrivenSingleStair.cs,What namespace does this class belong to?," ```csharp
 UnityEngine ``` "
LightGunDrivenSingleStair.cs,What is the name of the method that is called to activate the stair?," ```csharp
 public void Activate() ``` "
LightGunDrivenSingleStair.cs,What is the name of the method that is called to deactivate the stair?," ```csharp
 public void Deactivate() ``` "
LightGunDrivenSingleStair.cs,Is this MonoBehaviour a script?," ```csharp
 Yes ``` "
SingleStair.cs,What is the purpose of the SingleStair class?,"The SingleStair class is responsible for managing the behaviour of a single stair in Level 2 of the game, specifically it handles the activation and deactivation of the stair."
SingleStair.cs,What is the initial state of the stair?,"The initial state of the stair is determined by the isActive variable, and it is set during the Start() method."
SingleStair.cs,What is the purpose of the Activate() method?,"The Activate() method moves the stair to an active position by animating its local Y position to 0 over a duration of 0.5 seconds, and sets the isActive variable to true."
SingleStair.cs,What does the Deactivate() method do?,"The Deactivate() method moves the stair to an inactive position by animating its local Y position to the deActiveY value over a duration of 0.5 seconds, and sets the isActive variable to false."
SingleStair.cs,What is the purpose of the Flip() method?,"The Flip() method toggles the state of the stair by calling the Activate() method if the stair is currently inactive, or the Deactivate() method if the stair is currently active."
SingleStair.cs,What is the isActive variable used for?,"The isActive variable is a boolean that indicates the current state of the stair, where true represents an active stair and false represents an inactive stair."
SingleStair.cs,What is the purpose of the stair transform?,The stair transform is used to control the position and movement of the stair object in the scene.
SingleStair.cs,What is the deActiveY variable used for?,The deActiveY variable represents the Y position at which the stair is considered to be inactive.
SingleStair.cs,What happens when the Activate() method is called?,"When the Activate() method is called, the stair moves to an active position by animating its local Y position to 0 over a duration of 0.5 seconds, and the isActive variable is set to true."
SingleStair.cs,What happens when the Deactivate() method is called?,"When the Deactivate() method is called, the stair moves to an inactive position by animating its local Y position to the deActiveY value over a duration of 0.5 seconds, and the isActive variable is set to false."
SingleStair.cs,in 'SingleStair.cs' How is the initial state of the stair set up?," ```csharp
if (!isActive) Deactivate();
``` "
SingleStair.cs,In 'SingleStair.cs' what is the method used to move the stair to active position?," ```csharp
stair.DOLocalMoveY(0,0.5f);
``` "
SingleStair.cs,In 'SingleStair.cs' what is the method used to move the stair to inactive position?," ```csharp
stair.DOLocalMoveY(deActiveY,0.5f);
``` "
SingleStair.cs,In 'SingleStair.cs' What is the method used to flip the state of the stair?," ```csharp
if (isActive) Deactivate();
else Activate();
``` "
SingleStair.cs,In 'SingleStair.cs' how is the field 'isActive' initialized ? ," ```csharp
[SerializeField] private bool isActive;
``` "
SingleStair.cs,In 'SingleStair.cs' how is the field 'stair' initialized ?," ```csharp
[SerializeField] private Transform stair;
``` "
SingleStair.cs,In 'SingleStair.cs' how is the field 'deActiveY' initialized ?," ```csharp
[SerializeField] private float deActiveY;
``` "
SingleStair.cs,In 'SingleStair.cs' What is the name of the base class?," ```csharp
LightGunDrivenSingleStair
``` "
SingleStair.cs,In 'SingleStair.cs' what does the method start do?," ```csharp
// set the initial state of the stair
``` "
SingleStair.cs,In 'SingleStair.cs' What is this script responsible for?," ```csharp
// This class is responsible for the single stair in level 2.
``` "
DeathRespawnManager.cs,What is the main purpose of the StartSequence function in 'DeathRespawnManager.cs'?,The StartSequence function  is called to start the 'beast killing player' animation sequence by setting the animation sequence directors position and actually starting the animation sequence.
DeathRespawnManager.cs,What happens when the PlayerHealthEnded function is called?,"The PlayerHealthEnded function is called when the player's health reaches zero. When called, it triggers the player's death, Notifies the player manager that the player is dead, and starts the 'beast killing player' animation sequence."
DeathRespawnManager.cs,What does the GetSpawnPosition function do?,"The GetSpawnPosition function is called to get the spawn position of the player. If there is only one respawn position it returns that, otherwise it returns the farthest position from the beast."
DeathRespawnManager.cs,What is the purpose of the OnRespawnClicked function?,"The OnRespawnClicked function is called when the player clicks on the respawn button. When called it deactivates the 'beast killing player' animation sequence, Sets the global data, locks the cursor, Hides the game over canvas, Sets the player position and rotation to the spawn position, and activates the player game object."
DeathRespawnManager.cs,What is the purpose of the playerRespawnPositions array?,The playerRespawnPositions array stores all the player respawn positions in the level. It is set in the level manager when the level is loaded.
DeathRespawnManager.cs,What event does the OnDisable function of the DeathRespawnManager.cs subscribe to?,The OnDisable function of DeathRespawnManager.cs unsubscribes from the PlayerBehaviourEventHub.OnPlayerHealthEnded event.
DeathRespawnManager.cs,What event does the OnEnable function of the DeathRespawnManager.cs subscribe to?,The OnEnable function of DeathRespawnManager.cs subscribes to the PlayerBehaviourEventHub.OnPlayerHealthEnded event.
DeathRespawnManager.cs,What does the PlayerHealthEnded function do?,"The PlayerHealthEnded function is called when the player's health reaches zero. When called it sets global data, Notifies the player manager that the player is dead, starts the 'beast killing player' animation sequence, tells the beast manager that it is killing the player, and waits 5 seconds then shows the game over screen."
DeathRespawnManager.cs,What is the purpose of the beastKillsPlayerSequenceAnimator field in 'DeathRespawnManager.cs'?,The beastKillsPlayerSequenceAnimator field is a reference to the BeastKillsPlayerSequenceAnimator component. It is used to start the 'beast killing player' animation sequence.
DeathRespawnManager.cs,What is the purpose of the gameOverCanvas field in 'DeathRespawnManager.cs'?,The gameOverCanvas field is a reference to the game over canvas. It is used to show the game over screen when the player dies.
DeathRespawnManager.cs,how does 'OnRespawnClicked' function reset the player's position and rotation?," ```csharp
var playerSpawnPosition = GetSpawnPosition();
playerManager.transform.position = playerSpawnPosition.position;
playerManager.transform.rotation = playerSpawnPosition.rotation;
``` "
DeathRespawnManager.cs,What does 'OnDisable()' function do?," ```csharp
PlayerBehaviourEventHub.OnPlayerHealthEnded -= PlayerHealthEnded;
``` "
DeathRespawnManager.cs,Which of these lines in the 'OnEnable()' function is responsible for activating the event hub?," ```csharp
PlayerBehaviourEventHub.OnPlayerHealthEnded += PlayerHealthEnded;
``` "
DeathRespawnManager.cs,Where in the 'PlayerHealthEnded()' function is the player set to be inactive?," ```csharp
playerManager.gameObject.SetActive(false);
``` "
DeathRespawnManager.cs,How does the code find the Beast Kills Player Sequence Animator's position in 'PlayerHealthEnded()'?," ```csharp
var pos = playerManager.transform.position;
pos.y = beastManager.transform.position.y + 1;
``` "
DeathRespawnManager.cs,What does 'PlayerRespawned()' do in the 'OnRespawnClicked()' function?," ```csharp
PlayerBehaviourEventHub.PlayerRespawned();
``` "
DeathRespawnManager.cs,How does the 'PlayerHealthEnded()' function initially disable the Player Manager?," ```csharp
playerManager.Dead();
``` "
DeathRespawnManager.cs,How does the 'GetSpawnPosition()' function select the player's spawn position?," ```csharp
if (PlayerRespawnPositions.Length == 1) return PlayerRespawnPositions[0];
return playerManager.FarthestPlaceFromPlayer(PlayerRespawnPositions);
``` "
DeathRespawnManager.cs,What does 'PlayerHealthEnded()' function do regarding the Beast Manager?," ```csharp
beastManager.KillPlayer();
``` "
DeathRespawnManager.cs,How does 'OnRespawnClicked()' function unlock the cursor?," ```csharp
Cursor.lockState = CursorLockMode.Locked;
``` "
PlayerHealthManager.cs,What does the 'Awake()' method of the PlayerHealthManager class do?,"The 'Awake()' method is called when the script instance is being loaded and initialized. In this class, it initializes the player's health to the maximum health."
PlayerHealthManager.cs,"In the 'Update()' method, what is the purpose of the '_untilNextHealUp -= Time.deltaTime;' line?",This line decreases the '_untilNextHealUp' variable by the time elapsed since the last frame. This is used to track the time until the player's health can be regenerated.
PlayerHealthManager.cs,"In the 'Update()' method, when does the player's health regenerate?",The player's health regenerates when the '_untilNextHealUp' variable reaches 0.
PlayerHealthManager.cs,What does the 'HealUp()' method do?,The 'HealUp()' method is used to regenerate the player's health by 1. It also resets the '_untilNextHealUp' variable if the player's health is not at the maximum.
PlayerHealthManager.cs,Where is the 'PlayerGotHit()' method called from?,The 'PlayerGotHit()' method is called from the 'PlayerBehaviourEventHub' when the player is hit by an enemy or obstacle.
PlayerHealthManager.cs,What does the 'PlayerGotHit()' method do?,"The 'PlayerGotHit()' method decreases the player's health by 1, resets the '_untilNextHealUp' variable, and checks if the player is dead. If the player is dead, it broadcasts the 'PlayerHealthEnded()' event."
PlayerHealthManager.cs,What does the 'PlayerRespawned()' method do?,The 'PlayerRespawned()' method is called when the player respawns after dying. It resets the player's health to the maximum.
PlayerHealthManager.cs,Where is the 'OnEnable()' method called from?,The 'OnEnable()' method is called when the script is enabled or when the GameObject it is attached to becomes active.
PlayerHealthManager.cs,What does the 'OnEnable()' method do?,The 'OnEnable()' method subscribes to the 'OnPlayerGotHit' and 'OnPlayerRespawned' events from the 'PlayerBehaviourEventHub'.
PlayerHealthManager.cs,Where is the 'OnDisable()' method called from?,The 'OnDisable()' method is called when the script is disabled or when the GameObject it is attached to becomes inactive.
PlayerHealthManager,"When the player gets hit, what event is broadcasted?","```csharp
PlayerBehaviourEventHub.OnPlayerGotHit;++
```"
PlayerHealthManager,"At the beginning, what is the maximum health of the player?","```csharp
private readonly int _maxHealth = 4;
```"
PlayerHealthManager,After how many seconds does the player heal up?,"```csharp
private readonly int _timeToHealUp = 10;
```"
PlayerHealthManager,What is the name of the method called when the player gets hit?,"```csharp
private void PlayerGotHit()
```"
PlayerHealthManager,What is the method called when the player respawns?,"```csharp
private void PlayerRespawned()
```"
PlayerHealthManager,"In the 'Awake' method, what is the initial health of the player?","```csharp
_healthAmount = _maxHealth;
```"
PlayerHealthManager,"When the player heals up, what value is the regen timer reset to?","```csharp
if (_healthAmount != _maxHealth)_untilNextHealUp = _timeToHealUp; 
```"
PlayerHealthManager,"In the Update method, what health amount is checked to determine if the player needs to heal?","```csharp
if (_healthAmount == _maxHealth) return; 
```"
PlayerHealthManager,"In the PlayerGotHit method, what is the name of the event broadcasted when the player's health reaches 0?","```csharp
PlayerBehaviourEventHub.PlayerHealthEnded();
```"
PlayerHealthManager,"In the PlayerGotHit method, what is the condition checked to determine if the player is dead?","```csharp
if (_healthAmount == 0) 
```"
PlayerKnockBack.cs,What is the purpose of the PlayerKnockBack class?,"The PlayerKnockBack class manages the knock back behavior of the player when they are hit. It applies the knock back directly to the player on each frame, and decreases it over time."
PlayerKnockBack.cs,What is the impact variable used for?,"The impact variable stores the direction of the knock back. It is directly applied to the player on each frame, and is decreased over time."
PlayerKnockBack.cs,How is the knock back applied to the player?,The knock back is applied to the player by using the character controller's Move method.
PlayerKnockBack.cs,How does the knock back decrease over time?,The knock back decreases over time by using the Vector3.Lerp method to interpolate between the current impact value and zero.
PlayerKnockBack.cs,When does the knock back stop being applied to the player?,The knock back stops being applied to the player when the impact variable's magnitude is less than 5.
PlayerKnockBack.cs,What happens when the player dies?,"When the player dies, the knock back is stopped for 1 second, and then re-enabled."
PlayerKnockBack.cs,What method is responsible for adding force to the player?,The AddForce method is responsible for adding force to the player. It takes a push direction as a parameter and sets the impact variable to that value.
PlayerKnockBack.cs,What method is responsible for stopping the knock back when the player dies?,"The Dead method is responsible for stopping the knock back when the player dies. It sets the impact variable to zero, disables the component, and then uses DOTween to re-enable it after 1 second."
PlayerKnockBack.cs,What is the purpose of the CharacterController component in this class?,The CharacterController component is used to move the player (apply the knock back). The Move method is called to apply the knock back directly to the player.
PlayerKnockBack.cs,How much time does it take for the knock back to completely disappear?,The knock back completely disappears after 1 second.
PlayerKnockBack.cs,When is the Update function called in PlayerKnockBack script?," ```csharp
private void Update() {}
``` "
PlayerKnockBack.cs,What does the AddForce function do in the PlayerKnockBack script?," ```csharp
public void AddForce(Vector3 pushDir) {}
``` "
PlayerKnockBack.cs,What is the purpose of the variable impact in the PlayerKnockBack script?," ```csharp
private Vector3 impact = Vector3.zero;
``` "
PlayerKnockBack.cs,How is the knockback applied to the player in the PlayerKnockBack script?," ```csharp
characterController.Move(impact * Time.deltaTime);
``` "
PlayerKnockBack.cs,How is the knockback decreased over time in the PlayerKnockBack script?," ```csharp
impact = Vector3.Lerp(impact, Vector3.zero, 5 * Time.deltaTime);
``` "
PlayerKnockBack.cs,How is the knockback stopped when the player dies in the PlayerKnockBack script?," ```csharp
public void Dead() {
  impact=Vector3.zero;
  enabled = false;
  DOTween.Sequence().AppendInterval(1).OnComplete((() => {
    impact=Vector3.zero;
    enabled = true;
  }));
}
``` "
PlayerKnockBack.cs,"What does the DOTween.Sequence().AppendInterval(1).OnComplete((() => {
    impact=Vector3.zero;
    enabled = true;
  })) do in the PlayerKnockBack script?"," ```csharp
DOTween.Sequence().AppendInterval(1).OnComplete((() => {
    impact=Vector3.zero;
    enabled = true;
  }));
``` "
PlayerKnockBack.cs,What does the characterController variable do in the PlayerKnockBack script?," ```csharp
private CharacterController characterController;
``` "
PlayerKnockBack.cs,What happens when the impact vector's magnitude is less than 5 in the PlayerKnockBack script?," ```csharp
if (impact.sqrMagnitude < 5) {
  impact = Vector3.zero;
}
``` "
PlayerKnockBack.cs,How is the knockback applied directly to the player in the PlayerKnockBack script?," ```csharp
characterController.Move(impact * Time.deltaTime);
``` "
PlayerManager.cs,What is the purpose of the PlayerManager class?,"The PlayerManager class controls player behavior and acts as a hub for other player behavior components, handling functionality such as weapon management and player state."
PlayerManager.cs,What components does the PlayerManager manage?,"The PlayerManager manages components such as PlayerGunItemManager for weapon control, FirstPersonController for first-person view, and PlayerKnockBack for handling player knockback."
PlayerManager.cs,When is the PlayerManager initialized?,"The PlayerManager is initialized during the Awake() method, where it sets up references to other components and performs initial setup."
PlayerManager.cs,What happens when the PlayerManager starts?,"At the start of the game, the PlayerManager locks the cursor to restrict mouse movement to the game window."
PlayerManager.cs,What is the purpose of the Dead() method?,The Dead() method is called when the player dies and delegates tasks to FirstPersonController and PlayerKnockBack components for handling death-related behavior.
PlayerManager.cs,What does the ForceTeleport() method do?,"The ForceTeleport() method instantly teleports the player to a specified destination, and it delegates this task to the PlayerGunItemManager component."
PlayerManager.cs,What is the purpose of the SetInstantPositionRotation() method?,The SetInstantPositionRotation() method is called by the LevelManager to set the player's position and rotation to a specified location at the start of the game.
PlayerManager.cs,How does the FarthestPlaceFromPlayer() method determine the farthest place from the player?,The FarthestPlaceFromPlayer() method calculates the distance between the player's position and a list of places and returns the place that is the farthest from the player.
PlayerManager.cs,What is the purpose of the SetActive() method?,"The SetActive() method is a clean way to activate or deactivate the PlayerManager game object, allowing the player to be enabled or disabled."
PlayerManager.cs,What is the Singleton design pattern used for in PlayerManager?,"The PlayerManager class utilizes the Singleton design pattern to ensure that there is only one instance of the player manager in the game, thus allowing centralized control over player behavior and game state."
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the component responsible for managing the player's guns and items?"," ```csharp
private PlayerGunItemManager playerGunItemManager;
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what method disables the player and is called if the game is not running in Debug mode?"," ```csharp
public void SetActive(bool isActive) => gameObject.SetActive(isActive);
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the method that prevents the mouse cursor from moving?"," ```csharp
Cursor.lockState = CursorLockMode.Locked;
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the method that is called by 'DeathRespawnManager' to handle the player's death?"," ```csharp
public void Dead() {
  _firstPersonController.Dead();
  _playerKnockBack.Dead();
}
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the method that instantly teleports the player to a specified destination?"," ```csharp
public void ForceTeleport(Transform destination) => playerGunItemManager.ForceTeleport(destination);
``` "
PlayerManager.cs,"In 'PlayerManager.cs', where is the position and rotation for the player's starting position set?"," ```csharp
public void SetInstantPositionRotation(Transform playerSpawn) {
  transform.SetPositionAndRotation(playerSpawn.position, playerSpawn.rotation);
}
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the method that finds the farthest location from the player among a list of specified locations?"," ```csharp
public Transform FarthestPlaceFromPlayer(Transform[] places) {
  //cache player position
  var playerPos = Instance.transform.position;
  //find the farthest place from the player
  float farthestDistance = 0;
  Transform farthestPlace = null;
  foreach (Transform place in places) {
    var distance = Vector3.Distance(playerPos, place.position);
    if (distance > farthestDistance) {
      farthestDistance = distance;
      farthestPlace = place;
    }
  }
  return farthestPlace;
}
``` "
PlayerManager.cs,"In 'PlayerManager.cs', how is the player's starting position and rotation set?"," ```csharp
transform.SetPositionAndRotation(playerSpawn.position, playerSpawn.rotation);
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what method is responsible for managing First Person Controller and Player Knockback when the player dies?"," ```csharp
public void Dead() {
  _firstPersonController.Dead();
  _playerKnockBack.Dead();
}
``` "
PlayerManager.cs,"In 'PlayerManager.cs', what is the name of the field that references the player's head transform?"," ```csharp
[field: SerializeField] public Transform playerHead { get; private set; }
``` "
PlayerGunItem.cs,What is the purpose of the PlayerGunItem.cs script?,"PlayerGunItem.cs is the base class for all player items in the game. It contains common variables and methods for all items, such as the hand animator, item holder, and activation/deactivation logic."
PlayerGunItem.cs,What does the _isActive variable control?,"The _isActive variable determines whether the item is currently active or not. When an item is active, its item holder is visible and the hand animation is playing."
PlayerGunItem.cs,What is the purpose of the _handVisibleY and _handInVisibleY variables?,"The _handVisibleY and _handInVisibleY variables define the positions of the hand when it is visible and invisible, respectively. These positions are used to move the hand up and down when activating and deactivating items."
PlayerGunItem.cs,What does the _animationSubStateTrigger variable represent?,The _animationSubStateTrigger variable is an abstract property that must be implemented in child classes. It represents the animation trigger that is used to play the item's animation when it is activated.
PlayerGunItem.cs,When is the ActivateItem method called?,"The ActivateItem method is called by the PlayerGunItemManager when the player equips an item. It brings the hand up if needed, plays the item's animation, and activates the item holder."
PlayerGunItem.cs,What does the BringHandUpIfNeeded method do?,"The BringHandUpIfNeeded method checks if the hand is currently down (invisible) and, if so, moves it up to the visible position."
PlayerGunItem.cs,When is the PutHandAway method called?,The PutHandAway method is called by the PlayerGunItemManager when the player unequips all items. It moves the hand down to the invisible position and deactivates the hand game object.
PlayerGunItem.cs,What happens when the NotActiveAnymore method is called?,"The NotActiveAnymore method deactivates the item holder and sets the _isActive variable to false, indicating that the item is no longer active."
PlayerGunItem.cs,When is the Init method called?,The Init method is called by the PlayerGunItemManager when the game starts. It is used to initialize the item's variables and components.
PlayerGunItem.cs,What is the purpose of the LeftClicked and RightClicked methods?,"The LeftClicked and RightClicked methods are abstract methods that must be implemented in child classes. They are called by the PlayerGunItemManager when the player presses the left or right mouse button, respectively, and have the main functionality of the item."
PlayerGunItem.cs,In 'PlayerGunItem.cs' what is the name of the variable used to store the animation trigger of the item?,"```csharp
protected abstract string _animationSubStateTrigger { get; }
```"
PlayerGunItem.cs,How does the function 'ActivateItem' in 'PlayerGunItem.cs' bring the hand up if it is down?,"```csharp
//if hand is down(no item was equipped before). move hand up
if (!handAnimator.gameObject.activeSelf || handAnimator.transform.localPosition.y != _handVisibleY) {
	//activate hand and move it up
	handAnimator.gameObject.SetActive(true);
	handAnimator.transform.DOLocalMoveY(_handVisibleY, 0.5f);
}
```"
PlayerGunItem.cs,What's the name of the function in 'PlayerGunItem.cs' that moves the hand down?,"```csharp
public virtual void PutHandAway(bool instant = false) {
	//stop all hand animations
	handAnimator.transform.DOKill();
	//move hand down
	if (instant) {
		handAnimator.transform.DOLocalMoveY(_handInVisibleY, 0);
		handAnimator.gameObject.SetActive(false);
	} else {
		handAnimator.transform.DOLocalMoveY(_handInVisibleY, 0.5f).OnComplete((() => {
			handAnimator.gameObject.SetActive(false);
		}));
	}
}
```"
PlayerGunItem.cs,What's the name of the function in 'PlayerGunItem.cs' that deactivates the item?,"```csharp
public virtual void NotActiveAnymore() {
	_isActive = false;
	itemHolder.SetActive(false);
}
```"
PlayerGunItem.cs,When is the function 'Init' in 'PlayerGunItem.cs' called?,"```csharp
public virtual void Init() { }
```"
PlayerGunItem.cs,"In 'PlayerGunItem.cs', what is the name of the abstract function that has the main functionality of the item when left click is pressed?","```csharp
public abstract void LeftClicked();
```"
PlayerGunItem.cs,What's the name of the variable that stores the Y position where the hand is visible in 'PlayerGunItem.cs'?,"```csharp
private float _handVisibleY = -1.594f;
```"
PlayerGunItem.cs,"In 'PlayerGunItem.cs', what is the name of the variable that stores the Y position where the hand is invisible?","```csharp
private float _handInVisibleY = -1.848f;
```"
PlayerGunItem.cs,What is the name of the function in 'PlayerGunItem.cs' that resets the item?,"```csharp
public virtual void Reset() { }
```"
PlayerGunItem.cs,What is the name of the function in 'PlayerGunItem.cs' that stops all hand animations?,"```csharp
handAnimator.transform.DOKill();
```"
PlayerGunItemManager.cs,What are the commands used to equip each item?,"Q: unequip
1: LightGun
2: Teleporter
F: FlashLight"
PlayerGunItemManager.cs,How does the game handle item availability? Are they unlocked from the start?,"No, the items are not unlocked from the start. The game uses booleans to keep track of whether the player has the LightGun and Teleporter unlocked."
PlayerGunItemManager.cs,What is the function of the OnItemAction method?,"The OnItemAction method is called when the player presses a key to equip an item. It updates the current active item, deactivates the current item, and activates the new item."
PlayerGunItemManager.cs,What is the purpose of the OnLeftClickedAction method?,The OnLeftClickedAction method delegates the left mouse click input to the current active item.
PlayerGunItemManager.cs,What happens when the player grabs an object?,"When the player grabs an object, the game stops listening to item activation inputs and if the player had an item equipped, it is unequipped."
PlayerGunItemManager.cs,What is the role of the PlayerBehaviourEventHub class?,"The PlayerBehaviourEventHub class is used to listen to various events related to the player's behavior, such as grabbing objects and respawning."
PlayerGunItemManager.cs,"If the player respawns, what happens to the equipped items?","When the player respawns, all equipped items are unequipped and put away, and all items are reset to their initial states."
PlayerGunItemManager.cs,What is the purpose of the ForceTeleport method?,"The ForceTeleport method allows the player to be instantly teleported to a specified destination, which is delegated to the playerTeleportManager."
PlayerGunItemManager.cs,During which Unity event does the OnDisable method get executed?,The OnDisable method is called when the PlayerGunItemManager component is disabled in the Unity editor.
PlayerGunItemManager.cs,What is the purpose of the enum PlayerItems?,"The PlayerItems enum defines a set of constants representing the different items that the player can equip, such as the LightGun, Teleporter, and Flashlight."
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, how do we check if the player has the lightGun?","```csharp
if (!HasLightGun) return;
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, What is the code used to switch between items?","```csharp
switch (itemIndex) {
            case 0:
                //Q -> unEquip
                //just unEquip the current item
                _currentActiveGunItem?.PutHandAway();
                _currentActiveGunItem = null;

                break;
            case 1:
                //1 -> LightGun
                if (!HasLightGun) return;
                _currentActiveGunItem = playerLightGunManager;
                break;
            case 2:
                //2 -> Teleporter
                if (!HasTeleporter) return;
                _currentActiveGunItem = playerTeleportManager;

                break;
            case 5:
                //F -> FlashLight
                _currentActiveGunItem = playerFlashLightManager;

                break;
            default:
                break;
        }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, how does this function `PlayerRespawned()` reset all items?","```csharp
void PlayerRespawned() {
        //empty the hand when player respawns
        _currentActiveGunItem?.NotActiveAnymore();
        _currentActiveGunItem?.PutHandAway(instant: true);
        _currentActiveItem = PlayerItems.Empty;

        //reset all items
        playerLightGunManager.Reset();
        playerTeleportManager.Reset();
        playerFlashLightManager.Reset();
    }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, how does the `OnItemAction()` function check if the item is active?","```csharp
//is the item already active?
if (_currentActiveItem == (PlayerItems)itemIndex) return;
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, what code do you use when the player presses an item action key (1 to 5)?","```csharp
private void OnItemAction(int itemIndex) {
        //is the item already active?
if (_currentActiveItem == (PlayerItems)itemIndex) return;

        //update current active item(enum - _currentActiveItem)
        _currentActiveItem = (PlayerItems)itemIndex;

        //unEquip the current item(object)
        _currentActiveGunItem?.NotActiveAnymore();

        //update current active item(object - _currentActiveGunItem)
        switch (itemIndex) {
            case 0:
                //Q -> unEquip
                //just unEquip the current item
                _currentActiveGunItem?.PutHandAway();
                _currentActiveGunItem = null;

                break;
            case 1:
                //1 -> LightGun
                if (!HasLightGun) return;
                _currentActiveGunItem = playerLightGunManager;
                break;
            case 2:
                //2 -> Teleporter
                if (!HasTeleporter) return;
                _currentActiveGunItem = playerTeleportManager;

                break;
            case 5:
                //F -> FlashLight
                _currentActiveGunItem = playerFlashLightManager;

                break;
            default:
                break;
        }

        //equip the new item
        _currentActiveGunItem?.ActivateItem();
    }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, how does this function `PlayerRespawned()` reset all items?","```csharp
void PlayerRespawned() {
        //empty the hand when player respawns
        _currentActiveGunItem?.NotActiveAnymore();
        _currentActiveGunItem?.PutHandAway(instant: true);
        _currentActiveItem = PlayerItems.Empty;

        //reset all items
        playerLightGunManager.Reset();
        playerTeleportManager.Reset();
        playerFlashLightManager.Reset();
    }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, what is the code you use to instantiate player to a destination?","```csharp
public void ForceTeleport(Transform destination) => playerTeleportManager.ForceTeleport(destination);
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, what code do you use to stop listening to item activation inputs when the player grabs an object?","```csharp
private void OnPlayerGrabbedAnObject() {
        //stop listening to item activation inputs
        StarterAssetsInputs.OnItemAction -= OnItemAction;

        //if player had an item equipped . empty the hand when player grabs an object
        if (_currentActiveItem != PlayerItems.Empty) {
            _currentActiveGunItem.NotActiveAnymore();
            _currentActiveGunItem.PutHandAway();
            _currentActiveItem = PlayerItems.Empty;
        }
    }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, What is the name of the enum used to represent the different items the player can have?","```csharp
enum PlayerItems {
        Empty = 0,
        LightGun = 1,
        TeleportGun = 2,
        Flashlight = 5
    }
```"
PlayerGunItemManager.cs,"In PlayerGunItemManager.cs, what is the code used to update the player's FlashLight?","```csharp
private void Update() {
        //delegate update
        playerFlashLightManager.Update();
        if (_currentActiveItem == PlayerItems.LightGun) {
            playerLightGunManager.Update();
        }
    }
```"
PlayerFlashLightManager.cs,what is the most important variable in the PlayerFlashLightManager.cs class?,the _capacity variable. it holds the amount of charge of the flash light battery.
PlayerFlashLightManager.cs,what can we achieve by overriding the ActivateItem() method?,"we can start the flash light. since PlayerFlashLightManager.cs is inherited from PlayerGunItem.cs, we can use all the functions of PlayerGunItem.cs and override them if needed."
PlayerFlashLightManager.cs,what will happen if the capacity of the flash light is less than 1?,the intensity of the light will be reduced.
PlayerFlashLightManager.cs,In what function do we handle charging the battery of the flash light?,Charging().
PlayerFlashLightManager.cs,What is the purpose of the IsFlashLightFlashing animation parameter?,To control the animation of the hand holding the flashlight.
PlayerFlashLightManager.cs,In what function do we handle draining the battery of the flash light?,Draining().
PlayerFlashLightManager.cs,What is the purpose of the ManuallyChangeTheLightValues() method?,To decrease the intensity of the light when the battery is low.
PlayerFlashLightManager.cs,what is the purpose of the _isFlashing variable?,It indicates whether the flashlight is currently flashing or not.
PlayerFlashLightManager.cs,What is the purpose of the flashLightUiManager variable?,To update the UI elements that display the flashlight's charge level.
PlayerFlashLightManager.cs,what is the purpose of the itemHolder?,It refers to the game object that holds the flashlight in the player's hand.
PlayerFlashLightManager.cs,When is the function NoMoreFlashing() called?,"```csharp
private void NoMoreFlashing() {
  _isFlashing = false;
  handAnimator.SetBool(IsFlashLightFlashing, false);
  itemHolder.SetActive(false);
}
```"
PlayerFlashLightManager.cs,What is the maximum FlashLight battery capacity?,"```csharp
[SerializeField] private float maxCapacity = 10;
```"
PlayerFlashLightManager.cs,How do you start Flashing?,"```csharp
private void StartFlashing() {
  _isFlashing = true;
  handAnimator.SetBool(IsFlashLightFlashing, true);
  itemHolder.SetActive(true);
  if (_capacity > 1) flashLight.intensity = _flashLightDefaultIntensity;
}
```"
PlayerFlashLightManager.cs,How many seconds does it take to fully charge the FlashLight battery?,"The code doesn't specify an exact time, but it does show that it takes approx. 7.4 seconds to charge it by half.
```csharp
if (_capacity < maxCapacity) {
  _capacity += Time.deltaTime * 1.35f;
  flashLightUiManager.Update(_capacity, maxCapacity);
}
```"
PlayerFlashLightManager.cs,How does the code manually change the light values?,"```csharp
private void ManuallyChangeTheLightValues() {
  flashLight.intensity = Mathf.Lerp(0, _flashLightDefaultIntensity, _capacity);
  flashLightMaterial.SetFloat(""_CustomEmissiveAmount"",
     Mathf.Lerp(0, _flashLightMaterialDefaultIntensity, _capacity));
}
```"
PlayerFlashLightManager.cs,Where in the code is the _animationSubStateTrigger assigned?,"```csharp
protected override string _animationSubStateTrigger => ""EquipFlashLight"";
```"
PlayerFlashLightManager.cs,What happens when you RightClick the flashlight?,"```csharp
public override void RightClicked() {
  NoMoreFlashing();
}
```"
PlayerFlashLightManager.cs,How does the code check if the battery is empty?,"```csharp
if (_capacity < 0) {
  NoMoreFlashing();
  _capacity = 0;
}
```"
PlayerFlashLightManager.cs,What is the name of the Animation parameter that is set by the code?,"```csharp
private static readonly int IsFlashLightFlashing = Animator.StringToHash(""IsFlashLightFlashing"");
```"
PlayerFlashLightManager.cs,How is the flashLightUiManager updated?,"```csharp
flashLightUiManager.Update(_capacity, maxCapacity);
```"
LightGunBullet.cs,What does the LightGunBullet.cs class manage?,"The LightGunBullet.cs class manages the behaviors, animations, and collisions of light gun bullets."
LightGunBullet.cs,What is the purpose of the _rigidbody variable in LightGunBullet.cs?,"The _rigidbody variable is a Rigidbody component attached to the bullet, responsible for its physical movement and interactions with other objects in the game."
LightGunBullet.cs,What is the role of the velocity field in LightGunBullet.cs?,"The velocity field determines the initial velocity of the bullet when it is shot, controlling its speed and direction."
LightGunBullet.cs,What does the lightGunLight variable in LightGunBullet.cs represent?,"The lightGunLight variable is a LightGunLight component attached to the bullet, which manages the light it carries and its interactions with other lights in the game."
LightGunBullet.cs,What is the purpose of the _hasCollided variable in LightGunBullet.cs?,"The _hasCollided variable keeps track of whether the bullet has collided with an object. Once set to true, the bullet stops colliding with other objects."
LightGunBullet.cs,What does the _isShot variable control in LightGunBullet.cs?,"The _isShot variable determines the initial state of the bullet. If true, the bullet is shot and its position, rotation, and velocity are set accordingly. If false, the bullet is lying on the ground in its ball form."
LightGunBullet.cs,What is the _bulletSpawn variable used for in LightGunBullet.cs?,The _bulletSpawn variable stores the position and rotation where the bullet is instantiated when it is shot.
LightGunBullet.cs,What is the purpose of the OnCollisionEnter method in LightGunBullet.cs?,"The OnCollisionEnter method handles the collision behavior of the bullet. When the bullet collides with an object, it checks if it is a light. If it is, it attempts to inject the bullet's light into the light. If the injection is successful, the bullet is destroyed. Otherwise, the bullet grows into a ball."
LightGunBullet.cs,What does the HitNonInjectable method do in LightGunBullet.cs?,"The HitNonInjectable method is called when the bullet collides with an object that is not a light. In this case, the bullet grows into a ball, its mass and gravity are adjusted, and it stops moving."
LightGunBullet.cs,What is the role of the OnLightConsumed method in LightGunBullet.cs?,"The OnLightConsumed method is called when the light carried by the bullet is consumed by the player. It disables the bullet's collider, stops all animations, shrinks the bullet, and then destroys it."
LightGunBullet.cs,"In 'LightGunBullet.cs', how does Init() initialize the bullet's position and rotation?"," ```csharp
if (_isShot) {
            transform.SetPositionAndRotation(_bulletSpawn.position, _bulletSpawn.rotation);
            _rigidbody.velocity = transform.up * velocity;
        }
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', how does it check if the bullet collided with a light?"," ```csharp
if (other.gameObject.TryGetComponent(out LightGunLight otherLight)) {
            //try injecting the light
            bool success = otherLight.InjectLight(lightGunLight.LightType);
            //if it was successful, destroy the bullet else grow the bullet into a ball
            if (success) Destroy(gameObject);
            else HitNonInjectable();
        } else HitNonInjectable();
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', what method is called when the bullet hits a non-injectable object?"," ```csharp
private void HitNonInjectable() {
        //no more collisions
        _hasCollided = true;
        
        //grow the bullet into a ball
        transform.DOScale(1, 0.5f);
        _rigidbody.mass = 1;
        _rigidbody.useGravity = true;

        //stop the bullet
        _rigidbody.velocity = Vector3.zero;
    }
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', how does the OnLightConsumed() method shrink the bullet?"," ```csharp
transform.DOScale(0, 0.25f).SetEase(Ease.OutQuad).OnComplete((() => { Destroy(gameObject); }));
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', how is the bullet's velocity set when it is shot?"," ```csharp
_rigidbody.velocity = transform.up * velocity;
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', what is the purpose of the LightGunLight component?"," ```csharp
[SerializeField] private LightGunLight lightGunLight;
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', what is the purpose of the _hasCollided flag?"," ```csharp
//bullet only collides once
private bool _hasCollided;
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', how does the bullet check if it collided with a non-injectable object?"," ```csharp
else HitNonInjectable();
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', what is the purpose of the _isShot flag?"," ```csharp
//is the bullet shot?
private bool _isShot;
``` "
LightGunBullet.cs,"In 'LightGunBullet.cs', what is the purpose of the _rigidbody field?"," ```csharp
[SerializeField] private Rigidbody _rigidbody;
``` "
LightGunLight.cs,What is the purpose of the LightGunLight.cs class?,"The LightGunLight.cs class manages injecting and sucking lights from LightGunLight objects in the game.
 each LightGunLight object is a mesh with an emissive material.
 it can be set to have an additional Unity Light component, in that case, it is called a complex light."
LightGunLight.cs,What is the purpose of the _meshRenderer variable in LightGunLight.cs?,"The _meshRenderer variable is a reference to the Renderer of the GameObject of the LightGunLight component.
 it is used to apply material changes to the light object."
LightGunLight.cs,What does the InjectLight method do in LightGunLight.cs?,InjectLight enables the light of the LightGunLight component by changing its material to the appropriate material based on the LightColor enum and the LightMaterialDatabaseSO.
LightGunLight.cs,What is the purpose of the SuckLight method in LightGunLight.cs?,SuckLight disables the light of the LightGunLight by changing its material to the 'Off' material and updating relevant variables and components.
LightGunLight.cs,What is the purpose of the onChanged UnityEvent in LightGunLight.cs?,"The onChanged UnityEvent is a public UnityEvent of type (int, LightColor) that can be set in the inspector.
 it is invoked when the state of the LightGunLight changes, and it passes the id of the light and its new LightColor enum value as arguments."
LightGunLight.cs,What does the _isComplex boolean variable represent in LightGunLight.cs?,The _isComplex variable determines whether the LightGunLight object has an additional Unity Light component attached to it.
LightGunLight.cs,What is the purpose of the Awake method in LightGunLight.cs?,"The Awake method initializes various variables, including the _hasLight boolean, the LightType enum value, and the _meshRenderer field.
 it also checks for the _isComplex flag and initializes the _additionalLight variable if necessary."
LightGunLight.cs,What does the LightsOut method do in LightGunLight.cs?,The LightsOut method disables the additional Unity Light component (if present) when the power is out by setting its enabled property to false.
LightGunLight.cs,What is the functionality of the LightsBackOn method in LightGunLight.cs?,The LightsBackOn method re-enables the additional Unity Light component (if present) when the power returns by setting its enabled property to true.
LightGunLight.cs,When and why are the LightsOut and LightsBackOn methods invoked in LightGunLight.cs?,"The LightsOut and LightsBackOn methods are invoked when the corresponding LevelEventHub events (OnLightsOut and OnLightsBackOn) are raised, typically when the power is turned off or restored in the game."
LightGunLight.cs,What is the purpose of the LightGunLight component?," ```csharp
The LightGunLight component manages LightGunLight objects, turning them on (injecting lights to them) and off (sucking lights from them).
``` "
LightGunLight.cs,How can you tell if a LightGunLight is a complex light?," ```csharp
_isComplex = transform.GetComponentInChildren<Light>();
if (_isComplex) {
    _additionalLight = transform.GetComponentInChildren<Light>();
}
``` "
LightGunLight.cs,What does InjectLight do?," ```csharp
public bool InjectLight(LightColor lightType = LightColor.White, bool isForced = false) {
    //if the light is already on, don't turn it on again
    if (!isForced && _hasLight) return false;
}
``` "
LightGunLight.cs,How does the LightGunLight component notify listeners that the light has changed?," ```csharp
//broadcast changes 
if (shoutOnLightChange) LevelEventHub.LightGunLightInjected(id, lightType);
onChanged?.Invoke(id, lightType);
``` "
LightGunLight.cs,What does SuckLight do?," ```csharp
public (LightColor lightType, bool _hasAmmo) SuckLight() {
    //if the light is already off, don't turn it off again
    if (!_hasLight) return (LightColor.Off, false);
}
``` "
LightGunLight.cs,What is the purpose of the Peek method in LightGunLight?," ```csharp
public (LightColor _lightGunAmmoLight, bool _hasAmmo) Peek() => (LightType, _hasLight);
``` "
LightGunLight.cs,What happens when the power goes out in relation to the LightGunLight component?," ```csharp
private void LightsOut() {
    _additionalLight.enabled = false;
}
``` "
LightGunLight.cs,How does the LightGunLight component handle power restoration?," ```csharp
private void LightsBackOn() {
    _additionalLight.enabled = true;
}
``` "
LightGunLight.cs,What happens when the LightGunLight component is enabled?," ```csharp
private void OnEnable() {
    //if is complex subscribe (listening) to some events
    if (_isComplex) {
        LevelEventHub.OnLightsOut += LightsOut;
        LevelEventHub.OnLightsBackOn += LightsBackOn;
    }
}
``` "
LightGunLight.cs,How does the LightGunLight component handle being disabled?," ```csharp
private void OnDisable() {
    //if is complex unsubscribe to some events
    if (_isComplex) {
        LevelEventHub.OnLightsOut -= LightsOut;
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
    }
}
``` "
LightGunVisuals.cs,What is the main purpose of the LightGunVisuals class?,"The LightGunVisuals class handles the visuals and sound effects associated with the Light Gun weapon. It manages various indicators and visual elements, including the ammo indicator, focus indicator, and camera shake effects."
LightGunVisuals.cs,What happens when the gun shoots and becomes empty?,"When the Light Gun is fired and becomes empty, the LightGunVisuals class triggers the EmptyAmmo() method, which hides the ammo indicator, sets internal variables, and initiates a camera shake effect."
LightGunVisuals.cs,What action does the GunJustGotFilled() method perform?,"The GunJustGotFilled() method is called when the Light Gun is refilled with light. It adjusts the ammo indicator to display the color of the new light, enables the ammo indicator, sets internal variables, and generates a camera shake effect."
LightGunVisuals.cs,What happens when the player focuses on a light source?,"When the player aims (focuses) on a light source, the FocusedOnLight() method in the LightGunVisuals class is invoked. This method sets the focus indicator color to green or yellow, depending on whether the player has ammo and the light source can provide ammo."
LightGunVisuals.cs,What is the purpose of the OutOfFocus() method?,"The OutOfFocus() method is called when the player stops focusing on a light source. It changes the focus indicator color to red, indicating that the light source is no longer being aimed at."
LightGunVisuals.cs,What action does the OnPullOut() method undertake?,"The OnPullOut() method is executed when the player equips the Light Gun. It triggers a smooth animation to enlarge the focus indicator, making it visible on the screen."
LightGunVisuals.cs,What is the role of the OnPutAway() method?,"The OnPutAway() method is called when the player unequips the Light Gun. It shrinks the focus indicator via an animation, causing it to disappear from the screen."
LightGunVisuals.cs,What is the _focusIndicatorSize variable used for in the LightGunVisuals class?,The _focusIndicatorSize variable stores the initial size of the focus indicator. It is utilized during the OnPullOut() and OnPutAway() methods to animate the focus indicator smoothly.
LightGunVisuals.cs,What is the function of the Init() method in the LightGunVisuals class?,"The Init() method is responsible for initializing the LightGunVisuals class. It records the focus indicator's original size and sets its initial state, including hiding the focus indicator and disabling the ammo indicator."
LightGunVisuals.cs,What is the lightGunMaterials field used for in the LightGunVisuals class?,The lightGunMaterials field is a reference to a scriptable object that contains a database of light materials. The LightGunVisuals class utilizes this database to set the color of the ammo indicator based on the type of light currently in the gun.
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what happens when the player empties the gun?","```csharp
public void EmptyAmmo() {
        //hide the ammo indicator
        ammoIndicator.enabled = false;
        //set variables
        _hasAmmo = false;
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what does the method 'GunJustGotFilled' do?","```csharp
public void GunJustGotFilled(LightColor lightGunAmmoLight) {
        //set the ammo indicator color to the color of the light
        ammoIndicator.enabled = true;
        ammoIndicator.sharedMaterial = lightGunMaterials.GetLightByType(lightGunAmmoLight);
        //set variables
        _hasAmmo = true;
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what does the method 'FocusedOnLight' do?","```csharp
public void FocusedOnLight((LightColor lightGunAmmoLight, bool hasAmmo) data) {
        //changes the focus indicator color to green if can shoot light or suck light from the light, changes to yellow if can't
        focusIndicator.color = (_hasAmmo && !data.hasAmmo) || (!_hasAmmo && data.hasAmmo) ? Color.green : Color.yellow;
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what does the method 'OutOfFocus' do?","```csharp
public void OutOfFocus() {
        //change the focus indicator color to red
        focusIndicator.color = Color.red;
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what does the method 'OnPullOut' do?","```csharp
public void OnPullOut() {
        //show the focus indicator
        focusIndicator.rectTransform.DOScale(_focusIndicatorSize, 0.5f).SetEase(Ease.OutQuad);
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what does the method 'OnPutAway' do?","```csharp
public void OnPutAway() {
        //hide the focus indicator
        focusIndicator.rectTransform.DOScale(0, 0.5f).SetEase(Ease.OutQuad);
    }
```"
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what is the purpose of the '_focusIndicatorSize' variable?","```csharp
private float _focusIndicatorSize;
```
It stores the original size of the focus indicator, used when showing or hiding it."
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what is the purpose of the '_hasAmmo' variable?","```csharp
private bool _hasAmmo;
```
It indicates whether the light gun currently has ammo."
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what is the purpose of the 'ammoIndicator' field?","```csharp
[SerializeField] private MeshRenderer ammoIndicator;
```
A mesh renderer that represents the ammo indicator, which is a mesh that has the same color as the light gun ammo."
LightGunVisuals.cs,"In 'LightGunVisuals.cs', what is the purpose of the 'focusIndicator' field?","```csharp
[SerializeField] private Image focusIndicator;
```
An image that represents the focus indicator, which shows the aiming status of the light gun."
PlayerLightGunManager.cs,What is the purpose of the PlayerLightGunManager class?,"The PlayerLightGunManager class manages the light gun item, its animations, logic of shooting light, and sucking light from the focused light."
PlayerLightGunManager.cs,What is the purpose of the transform playerHead?,The playerHead transform is used to determine the direction the player is aiming and to cast a raycast from the player's head to check if they are focusing on a light.
PlayerLightGunManager.cs,What is the purpose of the distance and layerMask fields?,The distance and layerMask fields are used to define the raycast parameters for checking if the player is focusing on a light. The raycast is cast from the player's head in the direction they are aiming and checks for objects on the specified layer mask within the specified distance.
PlayerLightGunManager.cs,What is the purpose of the LightGunVisuals lightGunVisuals field?,"The lightGunVisuals field is a reference to the LightGunVisuals component, which manages the visual effects of the light gun, such as the gun model and animations."
PlayerLightGunManager.cs,What is the purpose of the AudioClip lightGunSuckSound and lightGunShootSound fields?,"The lightGunSuckSound and lightGunShootSound fields are references to the audio clips that are played when the player sucks light from a light and shoots a light bullet, respectively."
PlayerLightGunManager.cs,What is the purpose of the LightGunBullet lightBullet field?,"The lightBullet field is a reference to the LightGunBullet prefab, which is instantiated and fired when the player shoots the light gun."
PlayerLightGunManager.cs,What is the purpose of the Transform bulletSpawn field?,The bulletSpawn field is a reference to the transform from which the light bullet is instantiated when the player shoots the light gun.
PlayerLightGunManager.cs,What does the FocusingOnALight method do?,The FocusingOnALight method is called when the player is focusing on a light and updates the visuals to show that the player is focused on a light.
PlayerLightGunManager.cs,What does the ShootLight method do?,"The ShootLight method is called when the player shoots the light gun and updates the visuals to show that the gun has been fired, sets the animation parameter to indicate the gun is empty, and plays the light gun sound and light bullet prefab."
PlayerLightGunManager.cs,What does the FillTheGun method do?,"The FillTheGun method is called when the player sucks light from a light source and successfully fills the gun with light. It updates the visuals to show that the gun is now full, sets the animation parameter accordingly, plays a sound, and updates the gun's ammo status."
PlayerLightGunManager.cs,"in 'PlayerLightGunManager.cs', How do you instantiate the bullet and initialize it?"," ```csharp
var bullet = Object.Instantiate(lightBullet);
bullet.Init(_lightGunAmmoLight, bulletSpawn);
``` "
PlayerLightGunManager.cs,In 'PlayerLightGunManager.cs' what is the animator parameter used to set if the gun is full of ammo?," ```csharp
private static readonly int IsLightGunFull = Animator.StringToHash(""IsLightGunFull"");
``` "
PlayerLightGunManager.cs,in 'PlayerLightGunManager.cs' How do you get to the LightGunLight component of the object that player is focusing on?," ```csharp
//get the LightGunLight component from the hit object
_currentFocusedLight = hit.transform.GetComponent<LightGunLight>();
``` "
PlayerLightGunManager.cs,in 'PlayerLightGunManager.cs' How does the gun check if player is focusing(aiming) on a light?," ```csharp
if (Physics.Raycast(playerHead.position, playerHead.forward, out hit, distance, layerMask)) {
  //check if the hit object is a light
  if (hit.transform.gameObject.layer == 11) FocusingOnALight(hit);
  else NotFocusingOnLight();
}
``` "
PlayerLightGunManager.cs,"in 'PlayerLightGunManager.cs', What function gets called when player left clicks with the gun?"," ```csharp
public override void LeftClicked() {
  // can't shoot if there is no ammo or power is off
  if (!_hasAmmo || !GlobalInGameData.IsPowerOn) return;

  ShootLight();
}
``` "
PlayerLightGunManager.cs,How do you check if the gun has ammo in 'PlayerLightGunManager.cs'?," ```csharp
// can't shoot if there is no ammo or power is off
  if (!_hasAmmo || !GlobalInGameData.IsPowerOn) return;
``` "
PlayerLightGunManager.cs,in 'PlayerLightGunManager.cs' How do you check if the player is holding the light gun item?," ```csharp
if (_hasAmmo)
    handAnimator.SetBool(IsLightGunFull, true);
``` "
PlayerLightGunManager.cs,tell me the function in 'PlayerLightGunManager.cs' that fills the gun with the light that was sucked out.," ```csharp
private void FillTheGun() {
  //set the animation parameter
  handAnimator.SetBool(IsLightGunFull, true);

  //update the visuals
  lightGunVisuals.GunJustGotFilled(_lightGunAmmoLight);
  //play the sound
  MusicSoundManager.Instance.PlaySound(lightGunSuckSound);
}
``` "
PlayerLightGunManager.cs,in 'PlayerLightGunManager.cs' what function is called when the item is unequipped?," ```csharp
public override void NotActiveAnymore() {
  base.NotActiveAnymore();
  lightGunVisuals.OnPutAway();
}
``` "
PlayerLightGunManager.cs,in 'PlayerLightGunManager.cs' When does the light gun manager try to suck light from the focused light and fill the gun?," ```csharp
public override void RightClicked() {
  // can't suck light if the gun is full or there is no focused light or power is off
  if (_hasAmmo || _currentFocusedLight == null || !GlobalInGameData.IsPowerOn) return;

  //try to suck light
  (_lightGunAmmoLight, _hasAmmo) = _currentFocusedLight.SuckLight();

  //if succeeded, fill the gun
  if (_hasAmmo) FillTheGun();
}
``` "
PlayerTeleportManager.cs,what is the purpose of PlayerTeleportManager.cs?,"PlayerTeleportManager.cs manages the teleporter item. it handles the logic of the teleporter, the teleport seed, and teleports the player."
PlayerTeleportManager.cs,What is the purpose of the '_teleportPosition' and '_teleportRotation' variables?,"These variables store the position and rotation of the teleport seed. When the player teleports, they will be teleported to this position and rotation."
PlayerTeleportManager.cs,What is the '_hasTeleportPosition' variable used for?,"It is a boolean variable that indicates whether or not there is a teleport seed. If there is a teleport seed, the player can teleport to it."
PlayerTeleportManager.cs,What is the purpose of the 'HasTeleportSeed' animator parameter?,"The 'HasTeleportSeed' animator parameter is used to control the animation of the player's hand. When the player has a teleport seed, the hand animation will change to reflect this."
PlayerTeleportManager.cs,What does the 'Init' method do?,"The 'Init' method initializes the teleport planter, which is responsible for creating and destroying the teleport seed object in the scene."
PlayerTeleportManager.cs,What is the purpose of the 'Teleport' method?,"The 'Teleport' method teleports the player to the teleport seed. It first disables player control, plays the teleport effect, and then sets the player's position and rotation to the teleport seed's position and rotation."
PlayerTeleportManager.cs,What does the 'ForceTeleport' method do?,"The 'ForceTeleport' method teleports the player to a specified destination immediately, regardless of whether or not there is a teleport seed."
PlayerTeleportManager.cs,What is the 'ActivateItem' method called for?,"The 'ActivateItem' method is called when the player equips the teleporter item. It sets the visuals and the animation parameter accordingly, depending on whether or not there is a teleport seed."
PlayerTeleportManager.cs,When is the 'OnSeedDestroyed' method called?,"The 'OnSeedDestroyed' method is called when the teleport seed is destroyed. It removes the teleport seed, sets the visuals, and the animation parameter accordingly."
PlayerTeleportManager.cs,What happens when the player left-clicks?,"When the player left-clicks, the teleporter item is used. If there is a teleport seed, the player teleports to it. Otherwise, nothing happens."
PlayerTeleportManager.cs,How does the PlayerTeleportManager handle the players teleport?," ```csharp
//disable player control
GlobalInGameData.PlayerHasControl = false;
//play teleport effect - TeleportPart2 is called when the pre-Teleport effect is finished
FullScreenEffectsManager.Instance.Teleport(TeleportPart3);
//rest of the teleport logic
TeleportPart2();
``` "
PlayerTeleportManager.cs,How is teleportation broken into parts in PlayerTeleportManager?," ```csharp
//second part of the teleportation.
private void TeleportPart2() {
    //set visuals
    teleporterVisuals.OnTeleported();
    //delete the seed object
    teleportPlanter.DeleteSeed();
    //play teleport animation
    handAnimator.SetTrigger(""OnTeleport"");
}
//third part of the teleportation. does the actual teleportation
private void TeleportPart3() {
    //teleport seed is used, no teleport position
    _hasTeleportPosition = false;
    //disable the controller, set the position and rotation, enable the controller (to avoid bugs)
    controller.enabled = false;
    controller.transform.position = _teleportPosition;
    controller.transform.rotation = _teleportRotation;
    controller.enabled = true;
    //enable player control
    GlobalInGameData.PlayerHasControl = true;
}
``` "
PlayerTeleportManager.cs,What happens when PlayerTeleportManager's ForceTeleport method is called?," ```csharp
//update the teleport position immediately
_hasTeleportPosition = true;
_teleportPosition = Destination.position;
_teleportRotation = Destination.rotation;
_teleportRotation = controller.transform.rotation;
//teleport
Teleport();
``` "
PlayerTeleportManager.cs,How is the teleport seed handled when the item is equipped in PlayerTeleportManager?," ```csharp
if (_hasTeleportPosition) {
    teleporterVisuals.PulledOutTeleporterWithAlreadyPlantedSeed();
    handAnimator.SetBool(HasTeleportSeed, true);
}
``` "
PlayerTeleportManager.cs,What is the purpose of the OnSeedDestroyed method in PlayerTeleportManager?," ```csharp
//no teleport position
_hasTeleportPosition = false;
//set visuals
teleporterVisuals.OnSeedDestroyed();
//set the animation parameter
handAnimator.SetBool(HasTeleportSeed, false);
``` "
PlayerTeleportManager.cs,What is the logic for handling a left click in PlayerTeleportManager?," ```csharp
if (_hasTeleportPosition) {
    Teleport();
}
``` "
PlayerTeleportManager.cs,What happens when the right click is pressed in PlayerTeleportManager?," ```csharp
//set the animation parameter
handAnimator.SetBool(HasTeleportSeed, true);
//set the teleport seed(teleport position and rotation)
_hasTeleportPosition = true;
_teleportPosition = controller.transform.position;
_teleportRotation = controller.transform.rotation;
//set visuals
teleporterVisuals.OnNewSeedPlanted();
//make the seed object in the scene
teleportPlanter.PlantNewSeed(_teleportPosition);
``` "
PlayerTeleportManager.cs,How is the teleport seed set when the right click is pressed in PlayerTeleportManager?," ```csharp
_hasTeleportPosition = true;
_teleportPosition = controller.transform.position;
_teleportRotation = controller.transform.rotation;
``` "
PlayerTeleportManager.cs,"In PlayerTeleportManager, how is the teleportation handled when the left click is pressed?"," ```csharp
if (_hasTeleportPosition) {
    Teleport();
}
``` "
PlayerTeleportManager.cs,What is the purpose of the Teleport() method in PlayerTeleportManager?," ```csharp
//teleports player to the teleport position
private void Teleport() {
    //set the animation parameter
    handAnimator.SetBool(HasTeleportSeed, false);
    //disable player control
    GlobalInGameData.PlayerHasControl = false;
    //play teleport effect - TeleportPart2 is called when the pre-Teleport effect is finished
    FullScreenEffectsManager.Instance.Teleport(TeleportPart3);
    //rest of the teleport logic
    TeleportPart2();
}
``` "
TeleporterVisuals.cs,What is the purpose of the TeleporterVisuals class?,"The TeleporterVisuals class manages the visuals and sounds of the teleporter item, setting animation triggers and parameters, playing sounds, and shaking the camera upon certain actions."
TeleporterVisuals.cs,How does the TeleporterVisuals class achieve the visual effects?,"The TeleporterVisuals class uses an Animator component to set animation triggers and parameters, and leverages a CinemachineImpulseSource to shake the camera upon specific actions."
TeleporterVisuals.cs,Which sound effect is played when a teleport is performed?,The TeleporterVisuals class plays the 'teleportSound' AudioClip when a teleport is performed.
TeleporterVisuals.cs,How does the TeleporterVisuals class handle the visual effects for planting a new teleport seed?,"Upon planting a new teleport seed, the TeleporterVisuals class sets the 'HasSeed' boolean parameter in the Animator to true, plays the 'plantSound' AudioClip, and shakes the camera."
TeleporterVisuals.cs,What visual effect is applied when the teleporter item is equipped with an already planted teleport seed?,"When the teleporter item is equipped with an already planted teleport seed, the TeleporterVisuals class sets the 'HasSeed' boolean parameter in the Animator to true."
TeleporterVisuals.cs,How does the TeleporterVisuals class react when the teleport seed is destroyed?,"Upon the destruction of the teleport seed, the TeleporterVisuals class sets the 'HasSeed' boolean parameter in the Animator to false and plays the 'teleportSound' AudioClip."
TeleporterVisuals.cs,Which component is responsible for triggering the animation effects in the TeleporterVisuals class?,The Animator component is responsible for triggering the animation effects in the TeleporterVisuals class.
TeleporterVisuals.cs,How are the sound effects played in the TeleporterVisuals class?,The TeleporterVisuals class utilizes the MusicSoundManager's PlaySound method to play the sound effects.
TeleporterVisuals.cs,How does the TeleporterVisuals class achieve the camera shake effect?,The TeleporterVisuals class uses the CinemachineImpulseSource component to generate camera shake impulses upon specific actions.
TeleporterVisuals.cs,Which AudioClip is played when a new teleport seed is planted?,The TeleporterVisuals class plays the 'plantSound' AudioClip when a new teleport seed is planted.
TeleporterVisuals.cs,"In 'TeleporterVisuals.cs', when the player teleports, what does this line 'animator.SetBool(""HasSeed"", false);' do ?","```csharp
//set the animation parameter
animator.SetBool(""HasSeed"", false);
```"
TeleporterVisuals.cs,What is the name of the animation trigger that is set when the player teleports ?,"```csharp
//set the animation trigger and parameter
animator.SetTrigger(""Teleport"");
```"
TeleporterVisuals.cs,"In 'TeleporterVisuals.cs', how does one play the teleport sound when a new seed is planted?","```csharp
//play the sound
MusicSoundManager.Instance.PlaySound(plantSound);
```"
TeleporterVisuals.cs,What is the name of the Cinemachine component used to shake the camera when the player teleports?,"```csharp
[SerializeField] private CinemachineImpulseSource cinemachineImpulseSource;
```"
TeleporterVisuals.cs,How is the 'HasSeed' animation parameter set when the player pulls out the teleporter item with a teleport seed already planted?,"```csharp
public void PulledOutTeleporterWithAlreadyPlantedSeed() {
    //set the animation parameter
    animator.SetBool(""HasSeed"", true);
}
```"
TeleporterVisuals.cs,"When the teleport seed is destroyed, what does this line 'MusicSoundManager.Instance.PlaySound(teleportSound);' do?","```csharp
//play the sound
MusicSoundManager.Instance.PlaySound(teleportSound);
```"
TeleporterVisuals.cs,Name of the audio clip that is played when the player teleports ?,"```csharp
[SerializeField] private AudioClip teleportSound,
```"
TeleporterVisuals.cs,"In 'TeleporterVisuals.cs', Where is the reference to the Animator component stored?","```csharp
[SerializeField] private Animator animator;
```"
TeleporterVisuals.cs,What is the name of the method in 'TeleporterVisuals.cs' that is responsible for handling the visuals when a new teleport seed is planted?,"```csharp
public void OnNewSeedPlanted() {
    //set the animation parameter
    animator.SetBool(""HasSeed"", true);
    //play the sound
    MusicSoundManager.Instance.PlaySound(plantSound);
    //shake the camera
    cinemachineImpulseSource.GenerateImpulse();
}
```"
TeleporterVisuals.cs,What is the name of the method that is called when the player teleports?,"```csharp
public void OnTeleported() {
    //set the animation trigger and parameter
    animator.SetTrigger(""Teleport"");
    animator.SetBool(""HasSeed"", false);
    //play the sound
    MusicSoundManager.Instance.PlaySound(teleportSound);
    //shake the camera
    cinemachineImpulseSource.GenerateImpulse();
}
```"
TeleportPlanter.cs,What is the purpose of the TeleportPlanter class?,"The TeleportPlanter class manages the planting (instantiating) of teleport seeds of the teleporter item, and their destruction."
TeleportPlanter.cs,How many teleport seeds can be planted at the same time?,Only one teleport seed can be planted at a time.
TeleportPlanter.cs,What happens when the teleport seed is planted?,The old seed is destroyed and a new seed is instantiated at the player's current position and rotation.
TeleportPlanter.cs,What is the purpose of the _onSeedDestroyedAction variable?,The _onSeedDestroyedAction variable is an Action that is called when the teleport seed is destroyed by collision.
TeleportPlanter.cs,What happens when the teleport seed is destroyed by collision?,The last seed is set to null and the _onSeedDestroyedAction is invoked.
TeleportPlanter.cs,What is the newSeedPrefab variable?,The newSeedPrefab is the prefab of the seed that will be instantiated when a new seed is planted.
TeleportPlanter.cs,What is the purpose of the Init method?,The Init method initializes the TeleportPlanter class and assigns the _onSeedDestroyedAction variable.
TeleportPlanter.cs,What is the PlantNewSeed method responsible for?,The PlantNewSeed method creates a new seed at the specified position.
TeleportPlanter.cs,What is the purpose of the DeleteSeed method?,The DeleteSeed method destroys the last planted seed.
TeleportPlanter.cs,What is the purpose of the SeedDestroyedByCollision method?,The SeedDestroyedByCollision method delegates the call to the PlayerTeleportManager class when the seed is destroyed by collision.
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the '_onSeedDestroyedAction' variable?"," ```csharp
//called when the seed destroyed by collision.
delegates upwards to PlayerTeleportManager.cs
private Action _onSeedDestroyedAction;
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', How does the player plant a new seed?"," ```csharp
public void PlantNewSeed(Vector3 teleportPosition) {
    //destroy the last seed
    DeleteSeed();
    //instantiate a new seed
    _lastSeed=Object.Instantiate(newSeedPrefab,teleportPosition,Quaternion.identity);
    //init the seed
    _lastSeed.Init(SeedDestroyedByCollision);
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the 'Init' method?"," ```csharp
public void Init(Action onSeedDestroyedAction) {
    _onSeedDestroyedAction = onSeedDestroyedAction;
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the '_lastSeed' variable?"," ```csharp
private TeleportSeed _lastSeed;
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the 'DeleteSeed' method?"," ```csharp
public void DeleteSeed() {
    if (_lastSeed) _lastSeed.DestroyYourSelf();
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the 'SeedDestroyedByCollision' method?"," ```csharp
private void SeedDestroyedByCollision() {
    _lastSeed = null;
    _onSeedDestroyedAction.Invoke();
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the 'newSeedPrefab' variable?"," ```csharp
[SerializeField] private TeleportSeed newSeedPrefab;
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what does the 'PlantNewSeed' method do?"," ```csharp
public void PlantNewSeed(Vector3 teleportPosition) {
    //destroy the last seed
    DeleteSeed();
    //instantiate a new seed
    _lastSeed=Object.Instantiate(newSeedPrefab,teleportPosition,Quaternion.identity);
    //init the seed
    _lastSeed.Init(SeedDestroyedByCollision);
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what does the 'DeleteSeed' method do?"," ```csharp
public void DeleteSeed() {
    if (_lastSeed) _lastSeed.DestroyYourSelf();
}
``` "
TeleportPlanter.cs,"In 'TeleportPlanter.cs', what is the purpose of the '_onSeedDestroyedAction' variable?"," ```csharp
//called when the seed destroyed by collision.
delegates upwards to PlayerTeleportManager.cs
private Action _onSeedDestroyedAction;
``` "
TeleportSeed.cs,When is the TeleportSeed initialised?,The TeleportSeed is initialised when the right-click button is pressed to plant the seed.
TeleportSeed.cs,What is the TeleportSeed responsible for?,The TeleportSeed is responsible for managing the seed that is planted when the player presses the right-click button.
TeleportSeed.cs,What happens when something (other than the Player) enters the TeleportSeed's trigger zone?,"When something other than the Player enters the TeleportSeed's trigger zone, the seed is destroyed and delegates upwards to the TeleportPlanter.cs."
TeleportSeed.cs,What is the purpose of the _onDestroyAction variable?,The _onDestroyAction variable is a delegate that points to the function that will be called when the TeleportSeed is destroyed.
TeleportSeed.cs,How is the TeleportSeed destroyed?,The TeleportSeed can be destroyed either by collision with something other than the Player or by calling the DestroyYourSelf() method.
TeleportSeed.cs,What is the purpose of the DestroyYourSelf() method?,The DestroyYourSelf() method is used to destroy the TeleportSeed from outside.
TeleportSeed.cs,What is the name of the method that is called when the TeleportSeed is destroyed by collision?,The method that is called when the TeleportSeed is destroyed by collision is OnTriggerEnter(Collider).
TeleportSeed.cs,What is the TeleportSeed tagged as?,The TeleportSeed is tagged as 'Untagged'.
TeleportSeed.cs,What is the TeleportSeed's layer?,The TeleportSeed's layer is 'Default'.
TeleportSeed.cs,What is the name of the collider component attached to the TeleportSeed?,The collider component attached to the TeleportSeed is named 'Capsule Collider'.
TeleportSeed.cs,in 'TeleportSeed.cs' what is the TeleportSeed.cs used for?," ```csharp
TeleportSeed.cs is used to manage the teleport seed planted when the player presses the right mouse button. When the player presses the left mouse button, the player is teleported to the seed.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' What does the _onDestroyAction do?," ```csharp
_onDestroyAction is a delegate that is called when the seed is destroyed by collision. It delegates the destruction of the seed to the TeleportPlanter.cs script.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' What does the Init function do?," ```csharp
The Init function initializes the TeleportSeed by setting the _onDestroyAction delegate to the specified action.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' what does the OnTriggerEnter function do?," ```csharp
The OnTriggerEnter function is called when something enters the seed's trigger zone. If the object that entered the trigger zone is not the player or is a trigger, the seed is destroyed by collision and the _onDestroyAction delegate is called.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' what does DestroyYourSelf function do?," ```csharp
The DestroyYourSelf function destroys the GameObject that the script is attached to.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' what happens when the Seed is destroyed by something?," ```csharp
When the seed is destroyed by something other than the player, the _onDestroyAction delegate is called.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' what is the purpose of gameObject?," ```csharp
gameObject is a reference to the GameObject that the script is attached to.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' How do you know when Seed was crushed?," ```csharp
You know when the Seed was crushed because the OnTriggerEnter function is called when something enters the seed's trigger zone. If the object that entered the trigger zone is not the player or is a trigger, the seed is destroyed by collision and the _onDestroyAction delegate is called.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' how does the seed know when it was crushed?," ```csharp
The OnTriggerEnter function is called when something enters the seed's trigger zone. If the object that entered the trigger zone is not the player or is a trigger, the seed is destroyed by collision and the _onDestroyAction delegate is called.
``` "
TeleportSeed.cs,in 'TeleportSeed.cs' How can you destroy the seed by code?," ```csharp
You can destroy the seed by code by calling the DestroyYourSelf function.
``` "
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the _animator variable?",The _animator variable is used to reference the Animator component attached to the GameObject. It is responsible for playing animations on the object when the player interacts with it.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the isOneTimeAnimated bool variable?","The isOneTimeAnimated variable determines whether the object can be interacted with only once or multiple times. If it is set to true, the object will be disabled after the first interaction. Otherwise, it will remain interactable."
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the cooldown float variable?","The cooldown variable defines the interval between successive interactions with the object. If it is greater than 0, the object will be disabled for the specified duration after each interaction."
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the onInteractAction UnityEvent variable?",The onInteractAction variable represents an event that is invoked when the player interacts with the object. It allows other scripts to subscribe to this event and execute custom actions when the interaction occurs.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What happens in the Interact method?","The Interact method plays the animation associated with the object, disables the collider if necessary (based on isOneTimeAnimated and cooldown variables), and invokes the onInteractAction event."
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the OnObjectWentOutOfFocus method?",The OnObjectWentOutOfFocus method is an empty method that can be overridden by child classes to provide custom behavior when the player's focus moves away from the object.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What does the component require to be attached to the GameObject?",AnimatedInteractable.cs requires the GameObject to have an Animator component attached to it in order to function properly.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the audioSource variable?",The audioSource variable is used to reference the AudioSource component attached to the GameObject. It is responsible for playing audio when the player interacts with the object.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', What is the purpose of the Start method?",The Start method is used to initialize the _animator variable by referencing the Animator component attached to the GameObject.
AnimatedInteractable.cs,"In 'AnimatedInteractable.cs', Which animation parameter is used to trigger the animation when the player interacts with the object?",The 'OnInteract' trigger parameter is used to trigger the animation when the player interacts with the object.
AnimatedInteractable.cs,"When player focuses on an animated interactable object, what function is called by PlayerInteractableObjectsManager.cs to play the animation and invoke the onInteractAction?","```csharp
Interact()
```"
AnimatedInteractable.cs,What is the name of the trigger parameter in the animator component that needs to be called to play the animation when the player interacts with the animated interactable object?,"```csharp
""OnInteract""
```"
AnimatedInteractable.cs,"If the 'isOneTimeAnimated' field is set to true and the player interacts with the object, what happens with the collider?","```csharp
disable the collider so the player can't interact with it again
```"
AnimatedInteractable.cs,"if 'cooldown' is set to 0, which cooldown value does the AnimatedInteractable object have?","```csharp
there is no cooldown
```"
AnimatedInteractable.cs,"Let's say 'cooldown' is set to 4 seconds, what happens when the player interacts with the AnimatedInteractable object?","```csharp
disable the collider for the duration of the cooldown
```"
AnimatedInteractable.cs,What does the onInteractAction UnityEvent do when invoked?,"```csharp
invoke the onInteractAction
```"
AnimatedInteractable.cs,What is the name of the function called by child classes when the player is no longer focusing on the current interactable object?,"```csharp
OnObjectWentOutOfFocus
```"
AnimatedInteractable.cs,How does the AnimatedInteractable object play the animation when the player interacts with it?,"```csharp
_animator.SetTrigger(""OnInteract"");
```"
AnimatedInteractable.cs,What happens if the collider is disabled and the cooldown is not 0?,"```csharp
DOTween.Sequence().AppendInterval(cooldown).OnComplete(() => { GetComponent<Collider>().enabled = true; });
```"
AnimatedInteractable.cs,What is the purpose of the audioSource field?,"```csharp
to play a sound when the player interacts with the object
```"
CollectableInteractable.cs,what is the purpose of the CollectableInteractable.cs script?,"The CollectableInteractable.cs script is a child of the InteractableObject.cs class. which is the base(abstract) class for all the interactable object in the game. 
This script is responsible for the functionality of collecting an object when the player interacts with it."
CollectableInteractable.cs,How does the CollectableInteractable.cs script handle the player no longer focusing on the current interactive object?,"when the player is no longer focusing on the object, the OnObjectWentOutOfFocus() method is called, which doesn't have any specific logic in this class."
CollectableInteractable.cs,what happens when the player presses the interact button while focusing on a CollectableInteractable.cs object?,"When the player presses the interact button while focused on a CollectableInteractable.cs object, the Interact() method is called. 
This method disables the collider so the player can't interact with the object again, shrinks the object and destroys it, then invokes the event that the player collected a collectable"
CollectableInteractable.cs,How does the CollectableInteractable.cs script shrink the object and destroy it?,"The CollectableInteractable.cs script uses DOTween's DOScale() method to shrink the object over a period of 0.3 seconds with an ease of Ease.OutCubic, 
 and then calls the Destroy() method on the object when the scaling animation is complete."
CollectableInteractable.cs,What is the id variable used for in the CollectableInteractable.cs script?,"The id variable is used to uniquely identify the collectable object. 
When the player collects an object, the script invokes the PlayerCollectedCollectable event, which passes the id variable. 
This can be used to distinguish between different types of collectables and handle them differently if necessary."
CollectableInteractable.cs,What is the purpose of the Interact() method in the CollectableInteractable.cs script?,"The Interact() method in the CollectableInteractable.cs script is responsible for handling the player's interaction with the collectable object. 
When the player presses the interact button while focusing on a collectable object, this method is called. 
It disables the collider to prevent further interaction, shrinks the object using DOTween's DOScale(), and then destroys the object after the shrinking animation is complete."
CollectableInteractable.cs,What is the purpose of the GetComponent<Collider>().enabled = false; line in the Interact() method of the CollectableInteractable.cs script?,"The GetComponent<Collider>().enabled = false; line in the Interact() method of the CollectableInteractable.cs script is used to disable the collider component of the collectable object. 
This prevents the player from interacting with the object again once they have interacted with it."
CollectableInteractable.cs,"What is the purpose of the transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => { Destroy(gameObject); LevelEventHub.PlayerCollectedCollectable(id); })); line in the Interact() method of the CollectableInteractable.cs script?","The transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => { Destroy(gameObject); LevelEventHub.PlayerCollectedCollectable(id); })); line in the Interact() method of the CollectableInteractable.cs script is used to shrink the collectable object over a period of 0.3 seconds with an ease of Ease.OutCubic. 
Once the shrinking animation is complete, the object is destroyed and the PlayerCollectedCollectable event is invoked, passing the id of the collectable as a parameter."
CollectableInteractable.cs,What is the purpose of the LevelEventHub.PlayerCollectedCollectable(id); line in the Interact() method of the CollectableInteractable.cs script?,"The LevelEventHub.PlayerCollectedCollectable(id); line in the Interact() method of the CollectableInteractable.cs script is used to invoke the PlayerCollectedCollectable event, passing the id of the collectable as a parameter. 
This allows other scripts in the game to listen for this event and react accordingly, such as updating the player's score or adding the collectable to the player's inventory."
CollectableInteractable.cs,What happens when the player interacts with a CollectableInteractable.cs object?,"When the player interacts with a CollectableInteractable.cs object, the Interact() method is called. 
This method disables the collider to prevent further interaction, shrinks the object using DOTween's DOScale(), and then destroys the object after the shrinking animation is complete. 
It also invokes the PlayerCollectedCollectable event, passing the id of the collectable as a parameter."
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what happens when the player interacts with a collectable?"," ```csharp
GetComponent<Collider>().enabled = false;
transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
  Destroy(gameObject);
  LevelEventHub.PlayerCollectedCollectable(id);
}));
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', where is the 'PlayerCollectedCollectable(id)' event invoked?"," ```csharp
transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
  Destroy(gameObject);
  LevelEventHub.PlayerCollectedCollectable(id);
}));
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what happens when the player is no longer focusing on the current interactable object?"," ```csharp
protected override void OnObjectWentOutOfFocus() { }
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the 'id' variable used for?"," ```csharp
[SerializeField] private int id;
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'Interact()' method?"," ```csharp
public override void Interact() {
  //disable the collider so the player can't interact with it again
  GetComponent<Collider>().enabled = false;
  //shrink the object and destroy it
  transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
    Destroy(gameObject);
    //invoke the event(player collected a collectable)
    LevelEventHub.PlayerCollectedCollectable(id);
  }));
}
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'OnObjectWentOutOfFocus()' method?"," ```csharp
protected override void OnObjectWentOutOfFocus() { }
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'id' variable?"," ```csharp
[SerializeField] private int id;
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'GetComponent<Collider>().enabled = false;' line?"," ```csharp
GetComponent<Collider>().enabled = false;
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
  Destroy(gameObject);
  LevelEventHub.PlayerCollectedCollectable(id);
}));' line?"," ```csharp
transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
  Destroy(gameObject);
  LevelEventHub.PlayerCollectedCollectable(id);
}));
``` "
CollectableInteractable.cs,"In 'CollectableInteractable.cs', what is the purpose of the 'LevelEventHub.PlayerCollectedCollectable(id);' line?"," ```csharp
LevelEventHub.PlayerCollectedCollectable(id);
``` "
InteractableObject.cs,what is the purpose of the visuals GameObject array in InteractableObject.cs?,"The ""visuals"" array is used to highlight the object when the player is focusing on it by changing the layer of the visuals to ""FocusedHighlightedLayer""."
InteractableObject.cs,What does InteractableObject.ObjectWentInFocus() do?,"The ""ObjectWentInFocus()"" function is called when the player is focusing on the interactable object. It changes the layer of the object's visuals to highlight it and displays the hint for the object in the UI."
InteractableObject.cs,What does the hintText variable in InteractableObject.cs represent?,"The ""hintText"" variable is a string that specifies the hint to be displayed in the UI when the player is focusing on the interactable object."
InteractableObject.cs,Explain the purpose of the ShowHint() function in InteractableObject.cs.,"The ""ShowHint()"" function is responsible for displaying the hint for the interactable object in the UI. It checks if the hint text is empty, and if not, it formats and displays the hint appropriately."
InteractableObject.cs,What does InteractableObject.ObjectWentOutOfFocus() do?,"The ""ObjectWentOutOfFocus()"" function is called when the player is no longer focusing on the interactable object. It changes the layer of the object's visuals back to its default state, calls the abstract ""OnObjectWentOutOfFocus()"" method, and hides the hint in the UI."
InteractableObject.cs,What is the purpose of the OnObjectWentOutOfFocus() method in InteractableObject.cs?,"The ""OnObjectWentOutOfFocus()"" is an abstract method that provides custom logic for when the player is no longer focusing on the interactable object. This method is intended to be overridden by child classes to implement specific behavior for each interactable object type."
InteractableObject.cs,What does the Interact() method in InteractableObject.cs do?,"The ""Interact()"" is an abstract method that defines the behavior when the player interacts with the interactable object. It is intended to be overridden by child classes to implement specific interaction logic for each interactable object type."
InteractableObject.cs,What is the purpose of the Collider component required in InteractableObject.cs?,"The ""Collider"" component is required to enable detection of the interactable object by the ""PlayerInteractableObjectsManager.cs"" script. It allows the game to determine when the player is focusing on or interacting with the object."
InteractableObject.cs,"Why is the ""FocusedHighlightedLayer"" used in InteractableObject.cs?","The ""FocusedHighlightedLayer"" is used to change the layer of the interactable object's visuals when the player is focusing on it. This allows the object to be highlighted visually, making it more noticeable to the player."
InteractableObject.cs,What is the role of the UiEventHub.cs script in InteractableObject.cs?,"The ""UiEventHub.cs"" script is responsible for displaying hints in the UI. It is used by the ""InteractableObject.cs"" script to show the hint associated with the interactable object when the player is focusing on it."
InteractableObject.cs,"When the player is no longer focusing on the current interactable object, how does InteractableObject.cs restore the appearance of the object?"," ```csharp
foreach (GameObject visual in visuals) visual.layer = 0;
```"
InteractableObject.cs,Name the method that is responsible for presenting the hint in InteractableObject.cs?," ```csharp
protected void ShowHint()
```"
InteractableObject.cs,How is the interactable object highlighted when the player is looking at it?," ```csharp
foreach (GameObject visual in visuals) visual.layer = Constants.FocusedHighlightedLayer;
```"
InteractableObject.cs,What method does InteractableObject.cs contain that provides the functionality for when the player interacts with the object?," ```csharp
public abstract void Interact();
```"
InteractableObject.cs,What is the name of the variable that is used to store the hint text in InteractableObject.cs?," ```csharp
protected string hintText;
```"
InteractableObject.cs,"In InteractableObject.cs, what method is called when the player presses the interact button for the current interactable object?"," ```csharp
public abstract void Interact();
```"
InteractableObject.cs,How does InteractableObject.cs handle the case where the hint text is empty?," ```csharp
if (hintText.Length == 0) return;
```"
InteractableObject.cs,What is the functionality of the ObjectWentOutOfFocus method in InteractableObject.cs?," ```csharp
protected abstract void OnObjectWentOutOfFocus();
```"
InteractableObject.cs,"When the player stops looking at an interactable object, how does InteractableObject.cs remove the hint from the UI?"," ```csharp
UiEventHub.MainHint("""");
```"
InteractableObject.cs,Which method in InteractableObject.cs is responsible for handling custom logic when the player is no longer focused on the current interactable object?," ```csharp
protected abstract void OnObjectWentOutOfFocus();
```"
PlayerInteractableObjectsManager.cs,What is the purpose of 'PlayerInteractableObjectsManager.cs' class?,The 'PlayerInteractableObjectsManager.cs' class is responsible for detecting whether the player is focusing on an interactable object and calling the methods of that object when the player interacts with it. Also manages when player is not focusing on interactable objects.
PlayerInteractableObjectsManager.cs,What does 'PlayerInteractableObjectsManager.cs' do when the raycast hits an interactable object?,"If the raycast hits an interactable object, it calls the 'ObjectWentInFocus' method of that object, and sets the current focused interactable object to that object."
PlayerInteractableObjectsManager.cs,What does 'PlayerInteractableObjectsManager.cs' do when the raycast doesn't hit an interactable object?,"If the raycast doesn't hit an interactable object, it calls the 'ObjectWentOutOfFocus' method of the current focused interactable object (if there is one), and sets the current focused interactable object to null."
PlayerInteractableObjectsManager.cs,What is the purpose of the '_currentInteractableObject' variable?,The '_currentInteractableObject' variable stores the interactable object that the player is currently focusing on.
PlayerInteractableObjectsManager.cs,What does 'PlayerInteractableObjectsManager.cs' do when the player presses the interact button?,"When the player presses the interact button, the 'PlayerInteractableObjectsManager.cs' class checks if the player is focusing on an interactable object, and if so, it calls the 'Interact' method of that object."
PlayerInteractableObjectsManager.cs,What is the purpose of the OnInteractAction event?,"The OnInteractAction event is used to listen for when the player presses the interact button. When this event is triggered, the 'PlayerInteractableObjectsManager.cs' class calls the 'OnInteractAction' method to perform the appropriate actions."
PlayerInteractableObjectsManager.cs,What is the purpose of the StarterAssetsInputs.OnInteractAction event?,"The StarterAssetsInputs.OnInteractAction event is used to listen for when the player presses the interact button. When this event is triggered, the 'PlayerInteractableObjectsManager.cs' class calls the 'OnInteractAction' method to perform the appropriate actions."
PlayerInteractableObjectsManager.cs,What is the purpose of the OnEnable() method?,The OnEnable() method is used to subscribe to the OnInteractAction event when the 'PlayerInteractableObjectsManager.cs' class is enabled.
PlayerInteractableObjectsManager.cs,What is the purpose of the OnDisable() method?,The OnDisable() method is used to unsubscribe from the OnInteractAction event when the 'PlayerInteractableObjectsManager.cs' class is disabled.
PlayerInteractableObjectsManager.cs,What is the purpose of the '_playerManager' variable?,The '_playerManager' variable stores a reference to the PlayerManager component on the player object.
PlayerInteractableObjectsManager.cs,in 'PlayerInteractableObjectsManager.cs' how does the script check if the player is in focus of an interactable object?," ```csharp
RaycastHit hit;
if (Physics.Raycast(_playerHead.position, _playerHead.forward, out hit, distance, layerMask)) {
  if (hit.transform.gameObject.layer == 10) FocusingOnAnInteractableObject(hit);
  else NotFocusingOnAnInteractableObject();
} else {
  NotFocusingOnAnInteractableObject();
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the code to assign the current interactable object to null if the player is not focusing on an interactable object.," ```csharp
private void NotFocusingOnAnInteractableObject() {
  Debug.DrawRay(_playerHead.position, _playerHead.forward * distance, Color.red);
  if (_currentInteractableObject) _currentInteractableObject.ObjectWentOutOfFocus();
  _currentInteractableObject = null;
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' How is the OnInteractAction Event handled?," ```csharp
private void OnInteractAction() {
  if (_currentInteractableObject) _currentInteractableObject.Interact();
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' How does the player manager get assigned to _playerManager?," ```csharp
private void Start() {
  _playerManager = GetComponent<PlayerManager>();
  _playerHead = _playerManager.playerHead;
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the layer mask the raycast uses?," ```csharp
[SerializeField] private LayerMask layerMask;
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the layer number that interactable objects use?," ```csharp
if (hit.transform.gameObject.layer == 10) FocusingOnAnInteractableObject(hit);
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the code used to check if there is an interactable object in focus and when an interactable object is in focus?," ```csharp
if (_currentInteractableObject) {
  if (!_currentInteractableObject) {
    _currentInteractableObject = hit.transform.GetComponent<InteractableObject>();
    _currentInteractableObject.ObjectWentInFocus();
  } else if (_currentInteractableObject.gameObject != hit.transform.gameObject) {
    _currentInteractableObject.ObjectWentOutOfFocus();
    _currentInteractableObject = hit.transform.GetComponent<InteractableObject>();
    _currentInteractableObject.ObjectWentInFocus();
  }
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the script subscribed to?," ```csharp
private void OnEnable() {
  StarterAssetsInputs.OnInteractAction += OnInteractAction;
}
``` "
PlayerInteractableObjectsManager.cs,In 'PlayerInteractableObjectsManager.cs' What is the script unsubscribed to?," ```csharp
private void OnDisable() {
  StarterAssetsInputs.OnInteractAction -= OnInteractAction;
}
``` "
PlayerInteractableObjectsManager.cs,in 'PlayerInteractableObjectsManager.cs' what is the distance the raycast uses?," ```csharp
[SerializeField] private float distance;
``` "
PowerSwitch.cs,what is the purpose of the PowerSwitch.cs class?,"The PowerSwitch.cs class manages the power switches in the game. it adds extra functionality to the switch when the player interacts with it, and it also manages the switch's state and visuals based on the current power state of the level."
PowerSwitch.cs,"in 'OnSwitchFlipped' function, what is the event that is broadcasted when the player interacts with the switch?",'LevelEventHub.PowerSwitchActivated(id)' event is broadcasted. This event contains the id of the switch that was activated.
PowerSwitch.cs,in 'PowerSwitch.cs' what is the purpose of the _powerIndicator variable?,The _powerIndicator is a SimpleLight component that is used to visually indicate the state of the switch. It turns on and changes color when the player interacts with the switch.
PowerSwitch.cs,What happens when the player interacts with the switch?,"When the player interacts with the switch, the 'OnSwitchFlipped' method is called. This method turns on the visual indicator and broadcasts an event that the power switch was activated. The event contains the id of the switch."
PowerSwitch.cs,What happens to the PowerSwitch.cs collider when the power is out?,"When the power is out, the collider of the PowerSwitch.cs is enabled, which allows the player to interact with the switch."
PowerSwitch.cs,in 'PowerSwitch.cs' what is the purpose of the switchAnimator variable?,The switchAnimator variable is an animator component that is used to animate the switch when its state changes.
PowerSwitch.cs,in 'PowerSwitch.cs' what is the purpose of the switchCollider variable?,The switchCollider variable is a collider component that is used to control whether or not the player can interact with the switch. It is disabled when the power is on and enabled when the power is out.
PowerSwitch.cs,What happens to the PowerSwitch.cs collider when the power is back on?,"When the power is back on, the collider of the PowerSwitch.cs is disabled, which prevents the player from interacting with the switch."
PowerSwitch.cs,what is the purpose of the LightsOut function?,"The LightsOut function is called when the power goes out. It updates the switch's animation and collider state, and it turns on the visual indicator to show that the switch is off."
PowerSwitch.cs,what is the purpose of the LightsBackOn function?,"The LightsBackOn function is called when the power comes back on. It updates the switch's animation and collider state, and it turns off the visual indicator to show that the switch is on."
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the method that's called when the player interacts with a switch?"," ```csharp
public void OnSwitchFlipped(){
//visuals
    _powerIndicator.TurnOn(LightColor.Green);

    //broadcast an event that the power switch was activated
    LevelEventHub.PowerSwitchActivated(id);
}
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the method that's called when power is back on?"," ```csharp
private void LightsBackOn(){
    switchCollider.enabled = false;
}
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the animator variable?"," ```csharp
private Animator switchAnimator;
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the method that's called when power is out?"," ```csharp
private void LightsOut(){
    //animate switch to off position
    switchAnimator.Play(""Turn Off"");
    //enable the collider so the player can interact with it
    switchCollider.enabled = true;

    //visuals
    _powerIndicator.gameObject.SetActive(true);
    _powerIndicator.TurnOn(LightColor.Red);
}
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the collider variable?"," ```csharp
private Collider switchCollider;
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the method that's called when the script is enabled?"," ```csharp
private void OnEnable(){
    //subscribing (listening) to some events
    LevelEventHub.OnLightsOut += LightsOut;
    LevelEventHub.OnLightsBackOn += LightsBackOn;
}
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the method that's called when the script is disabled?"," ```csharp
private void OnDisable(){
    //unsubscribing to some events
    LevelEventHub.OnLightsOut -= LightsOut;
    LevelEventHub.OnLightsBackOn -= LightsBackOn;
}
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the audio clip variable?"," ```csharp
[SerializeField] private AudioClip switchFlipSound;
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the simple light variable?"," ```csharp
[SerializeField] private SimpleLight _powerIndicator;
``` "
PowerSwitch.cs,"In 'PowerSwitch.cs', what is the name of the id variable?"," ```csharp
[SerializeField] private int id = -1;
``` "
SimpleDoor.cs,What is the purpose of the SimpleDoor.cs class?,The SimpleDoor.cs class is a Unity script that allows you to add doors to your game that can be opened and closed by the player.
SimpleDoor.cs,What other class does SimpleDoor.cs inherit from?,"The SimpleDoor.cs class inherits from the InteractableObject.cs class, which is the base class for all interactable objects in the game."
SimpleDoor.cs,What is the purpose of the IsLocked and IsOpen variables?,"The IsLocked and IsOpen variables store the current state of the door, whether it is locked or open."
SimpleDoor.cs,What is the purpose of the _lockIndicatorsRenderers array?,The _lockIndicatorsRenderers array contains references to the MeshRenderer components of the door's lock indicators.
SimpleDoor.cs,What are the lockedMaterial and unlockedMaterial variables used for?,The lockedMaterial and unlockedMaterial variables are used to change the material of the door's lock indicators depending on whether the door is locked or unlocked.
SimpleDoor.cs,"What is the purpose of the audioSource, doorOpenSound, and doorLockedSound variables?","The audioSource, doorOpenSound, and doorLockedSound variables are used to play audio when the door is opened or locked."
SimpleDoor.cs,What is the purpose of the Unlock() and Lock() methods?,"The Unlock() and Lock() methods are used to change the state of the door, setting it to unlocked or locked, respectively."
SimpleDoor.cs,What is the purpose of the OnObjectWentOutOfFocus() method?,The OnObjectWentOutOfFocus() method is called when the player is no longer focusing on the door. It can be overridden by child classes to add custom logic.
SimpleDoor.cs,What is the purpose of the ForceClose() and ForceOpen() methods?,"The ForceClose() and ForceOpen() methods are used to close or open the door via script, regardless of its current state."
SimpleDoor.cs,What does the Interact() method do?,"The Interact() method is called when the player presses the interact button while focusing on the door. It opens or closes the door, plays an audio clip, and updates the door's state and hint text."
SimpleDoor.cs,in 'SimpleDoor.cs' how does the script initialize the door state?," ```csharp
private void Start() {
        _animator = GetComponent<Animator>();
        IsOpen = false;
        
        //initialize the door state
        if (IsLocked) Lock();
        else Unlock();
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' how does the script unlock the door?," ```csharp
public void Unlock() {
        IsLocked = false;
        hintText = ""Open the door"";

        //change the material of the lock indicators to the unlocked material
        foreach (var meshRenderer in _lockIndicatorsRenderers) meshRenderer.material = unlockedMaterial;
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' how does the script lock the door?," ```csharp
public void Lock() {
        IsLocked = true;
        hintText = ""*Door is Locked"";

        //change the material of the lock indicators to the locked material
        foreach (var meshRenderer in _lockIndicatorsRenderers) meshRenderer.material = lockedMaterial;
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' what does the function 'ForceClose' do?," ```csharp
public void ForceClose() {
        if (!IsOpen) return;
        IsOpen = false;
        _animator.SetTrigger(""OnInteract"");
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' what does the function 'ForceOpen' do?," ```csharp
public void ForceOpen() {
        if (IsOpen) return;
        IsOpen = true;
        _animator.SetTrigger(""OnInteract"");
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' what is the code responsible for the door interactions from the player?," ```csharp
public override void Interact() {
        //if the door is locked, play the locked door animation and sound and return
        if (IsLocked) {
            _animator.Play(""LockedDoor"");
            audioSource.PlayOneShot(doorLockedSound);
            return;
        }

        //play sound
        audioSource.PlayOneShot(doorOpenSound);
        //change the state of the door
        IsOpen = !IsOpen;
        //play the animation
        _animator.SetTrigger(""OnInteract"");
        //change the hint text
        hintText = (hintText == ""Open the door"") ? ""Close the door"" : ""Open the door"";
        ShowHint();
    }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' when does the script play the locked door animation and sound?," ```csharp
if (IsLocked) {
            _animator.Play(""LockedDoor"");
            audioSource.PlayOneShot(doorLockedSound);
            return;
        }
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' what does the script do after playing the door's sound and animation?," ```csharp
        //change the state of the door
        IsOpen = !IsOpen;
        //play the animation
        _animator.SetTrigger(""OnInteract"");
        //change the hint text
        hintText = (hintText == ""Open the door"") ? ""Close the door"" : ""Open the door"";
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' how does the script change the hint text based on the current door state?," ```csharp
hintText = (hintText == ""Open the door"") ? ""Close the door"" : ""Open the door"";
``` "
SimpleDoor.cs,in 'SimpleDoor.cs' where is the door sound played from?," ```csharp
audioSource.PlayOneShot(doorOpenSound);
``` "
GrabbableObjects.cs,What is the purpose of the GrabbableObjects.cs class?,The GrabbableObjects.cs class extends the InteractableObject.cs class and adds the functionality of grabbing and holding + unGrabbing the object when the player interacts with it.
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the '_rb' private variable?","The '_rb' private variable is a reference to the Rigidbody component of the object, which is used to control the physics of the object when it is being grabbed."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the '_characterController' private variable?","The '_characterController' private variable is a reference to the CharacterController component of the player, which is used to control the movement of the player."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the '_lastPosition' private variable?","The '_lastPosition' private variable is used to store the position of the object before it is grabbed, so that it can be used to calculate the velocity of the object when it is ungrabbed."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the '_objectHoldPosition' private variable?",The '_objectHoldPosition' private variable is used to store the position where the object should be held when it is grabbed.
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the 'Grab' method?","The 'Grab' method is called when the player interacts with the object to grab it. It sets the target position for the object, sets various variables, and invokes events."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the 'UnGrab' method?","The 'UnGrab' method is called when the player ungrabs the object. It sets various variables, broadcasts events, and applies velocity to the object if specified."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the 'onGrabbed' UnityEvent field?","The 'onGrabbed' UnityEvent field is used to invoke an event when the object is grabbed. This can be used to trigger various actions, such as playing a sound effect or updating the UI."
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the 'IsGrabbed' property?",The 'IsGrabbed' property is used to check if the object is currently grabbed.
GrabbableObjects.cs,"In the GrabbableObjects.cs class, what is the purpose of the 'MetaData' field?","The 'MetaData' field is used to store additional data about the object, such as its weight or value."
GrabbableObjects.cs,"In 'GrabbableObjects.cs', what is the difference between a small and big object?"," ```csharp
A big object is held in a different position than a small object.
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', what is the main responsibility of this script?"," ```csharp
This script adds the functionality of grabbing and holding + unGrabbing the object when the player interacts with it.
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', how does the object check if the player is interacting with it?"," ```csharp
public override void Interact() {
    //broadcast event
    PlayerBehaviourEventHub.GrabbableObjectInteracted(this);
}
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', how does the object lerp to the target position?"," ```csharp
transform.position = Vector3.Lerp(_lastPosition, _objectHoldPosition.position, Time.deltaTime * 3);
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', where is the player's hint text set?"," ```csharp
hintText = ""release"";
ShowHint();
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', what event is invoked when the player grabs an object?"," ```csharp
onGrabbed?.Invoke();
PlayerBehaviourEventHub.PlayerGrabbedAnObject();
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', what is the name of the method that is called when the player ungrabs an object?"," ```csharp
public void UnGrab(bool applyVelocity)
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', how does the script calculate the velocity to apply to the object when it is ungrabbed?"," ```csharp
var delta = transform.position - _lastPosition;
var velocity = delta / Time.deltaTime;
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', what is the maximum velocity that can be applied to a grabbable object when it is ungrabbed?"," ```csharp
if (velocityMagnitude > Constants.GrabbableObjectMaximumVelocity)
    velocity = velocity.normalized * Constants.GrabbableObjectMaximumVelocity;
``` "
GrabbableObjects.cs,"In 'GrabbableObjects.cs', how is the IsGrabbed variable set to true?"," ```csharp
IsGrabbed = true;
``` "
PlayerHoldObjectsManager.cs,What is the purpose of the PlayerHoldObjectsManager class?,"The purpose of this class is to handle the grabbing and releasing of grabbable objects by the player.
When the player interacts with a grabbable object, an event is triggered, and this class calls the appropriate methods to grab or ungrab the object."
PlayerHoldObjectsManager.cs,Which component is responsible for subscribing and unsubscribing to the events related to grabbable object interaction?,The MonoBehaviour component is responsible for subscribing and unsubscribing to the events related to grabbable object interaction.
PlayerHoldObjectsManager.cs,Which class is responsible for managing the player's interactions?,"The PlayerManager class is responsible for managing the player's interactions, including interactions with grabbable objects."
PlayerHoldObjectsManager.cs,What are the two transform variables used for in this class?,"The two transform variables, smallObjectHoldPosition and bigObjectHoldPosition, are used to specify the target positions where small and big grabbable objects should be held, respectively, when picked up by the player."
PlayerHoldObjectsManager.cs,What method is called when the player interacts with a grabbable object?,The OnGrabbableObjectInteracted method is called when the player interacts with a grabbable object. This method checks if the object is currently grabbed and calls the appropriate method to grab or ungrab the object.
PlayerHoldObjectsManager.cs,What event is the class listening to in the OnEnable method?,"In the OnEnable method, the class listens to the OnGrabbableObjectInteracted event, which is triggered when the player interacts with a grabbable object."
PlayerHoldObjectsManager.cs,What happens when the OnGrabbableObjectInteracted event is triggered?,"When the OnGrabbableObjectInteracted event is triggered, the class calls the OnGrabbableObjectInteracted method, which checks if the object is currently grabbed and calls the appropriate method to grab or ungrab the object."
PlayerHoldObjectsManager.cs,What is the purpose of the OnDisable method in this class?,The purpose of the OnDisable method is to unsubscribe from the OnGrabbableObjectInteracted event when the class is disabled.
PlayerHoldObjectsManager.cs,When would the OnGrabbableObjectInteracted event be triggered?,"The OnGrabbableObjectInteracted event is triggered when the player interacts with a grabbable object, such as when the player presses a button or performs an action to interact with the object."
PlayerHoldObjectsManager.cs,What is the purpose of the PlayerBehaviourEventHub class?,"The exact purpose of the PlayerBehaviourEventHub class is not available in the given context, but it appears to be a class that provides event handling functionality related to player behavior."
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what is called when the player interacts with a grabbable object?," ```csharp
private void OnGrabbableObjectInteracted(GrabbableObjects obj) {...}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what is the code that grabs/unGrabs the object?," ```csharp
if (obj.IsGrabbed) obj.UnGrab(true);
else obj.Grab(playerManager.playerHead, playerManager.characterController, obj.IsBig ? bigObjectHoldPosition : smallObjectHoldPosition);
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' when is the 'OnGrabbableObjectInteracted' method called?," ```csharp
private void OnGrabbableObjectInteracted(GrabbableObjects obj) {
if (obj.IsGrabbed) obj.UnGrab(true);
else obj.Grab(playerManager.playerHead, playerManager.characterController, obj.IsBig ? bigObjectHoldPosition : smallObjectHoldPosition);
}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what does the 'OnEnable' method do?," ```csharp
private void OnEnable() {
//subscribing (listening) to some events
PlayerBehaviourEventHub.OnGrabbableObjectInteracted += OnGrabbableObjectInteracted;
}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what does the 'OnDisable' method do?," ```csharp
private void OnDisable() {
//unsubscribing to some events
PlayerBehaviourEventHub.OnGrabbableObjectInteracted -= OnGrabbableObjectInteracted;
}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what is passed to the 'Grab' method of the 'GrabbableObjects.cs' script?," ```csharp
if (obj.IsGrabbed) obj.UnGrab(true);
else obj.Grab(playerManager.playerHead, playerManager.characterController, obj.IsBig ? bigObjectHoldPosition : smallObjectHoldPosition);
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what is passed to the 'UnGrab' method of the 'GrabbableObjects.cs' script?," ```csharp
if (obj.IsGrabbed) obj.UnGrab(true);
else obj.Grab(playerManager.playerHead, playerManager.characterController, obj.IsBig ? bigObjectHoldPosition : smallObjectHoldPosition);
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what event is listened to?," ```csharp
private void OnEnable() {
//subscribing (listening) to some events
PlayerBehaviourEventHub.OnGrabbableObjectInteracted += OnGrabbableObjectInteracted;
}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' what event is unsubscribed from?," ```csharp
private void OnDisable() {
//unsubscribing to some events
PlayerBehaviourEventHub.OnGrabbableObjectInteracted -= OnGrabbableObjectInteracted;
}
``` "
PlayerHoldObjectsManager.cs,In 'PlayerHoldObjectsManager.cs' how is the target position of small and big objects determined?," ```csharp
[SerializeField] private Transform smallObjectHoldPosition, bigObjectHoldPosition;
``` "
PowerCoreObject.cs,what are the main functions of the PowerCoreObject class?,"The PowerCoreObject class handles the insertion and ejection of a power core into and out of a power station, including animations, physics, and event broadcasting."
PowerCoreObject.cs,What is the role of the coreInstallTarget and the coreMidInstallTarget variables?,The coreInstallTarget and coreMidInstallTarget variables specify the final and intermediate positions for the power core during the insertion animation.
PowerCoreObject.cs,How does the OnEnteredPowerStation function contribute to the insertion process?,"The OnEnteredPowerStation function is called when the power core enters the trigger zone of the power station, disabling colliders, adjusting gravity, and initiating the insertion animation sequence."
PowerCoreObject.cs,What happens when the player interacts with the power station?,"When the player interacts with the power station, the Eject function is called, moving the power core to its intermediate position, disabling colliders, enabling gravity, applying a force to eject the core, and broadcasting events."
PowerCoreObject.cs,What is the purpose of the _rb variable?,"The _rb variable references the Rigidbody component of the power core object, which is manipulated during the insertion and ejection processes to control physics and movement."
PowerCoreObject.cs,What event is broadcasted when the power core is inserted?,The PowerCoreInserted event is broadcasted when the power core is successfully inserted into the power station.
PowerCoreObject.cs,What event is broadcasted when the power core is ejected?,The PowerCoreEjected event is broadcasted when the power core is ejected from the power station.
PowerCoreObject.cs,How does the insertAnimationDuration1 variable influence the insertion animation?,"The insertAnimationDuration1 variable determines the duration of the first phase of the insertion animation, where the power core moves to its intermediate position and rotates into alignment."
PowerCoreObject.cs,How does the insertAnimationDuration2 variable influence the insertion animation?,"The insertAnimationDuration2 variable determines the duration of the second phase of the insertion animation, where the power core moves to its final position within the power station."
PowerCoreObject.cs,What is the id variable used for?,"The id variable is used to identify the specific power core object and differentiate it from others in the scene, especially when broadcasting events related to insertion and ejection."
PowerCoreObject.cs,In 'PowerCoreObject.cs' how can you disable the gravity of the power core? ," ```csharp
_rb.useGravity = false;  
``` "
PowerCoreObject.cs,What happens when the player interacts with the power station," ```csharp
Eject(); 
``` "
PowerCoreObject.cs,what is the amount of time it takes the power core to complete its first insertion animation?," ```csharp
insertAnimationDuration1 = 0.5f,
``` "
PowerCoreObject.cs,"when the power core is ejected, what happens to its collider?"," ```csharp
GetComponent<Collider>().enabled = true;
``` "
PowerCoreObject.cs,What is the target position that the core moves to during the first insertion animation?," ```csharp
coreMidInstallTarget.position,
``` "
PowerCoreObject.cs,"when the power core is in the air, what does it do to eject itself out of the station?"," ```csharp
_rb.AddForce(new Vector3(20, 50, 20));
``` "
PowerCoreObject.cs,what function is used to tell the power core that it is ejected?," ```csharp
LevelEventHub.PowerCoreEjected(id);
``` "
PowerCoreObject.cs,What is the target position that the core moves to during the second insertion animation?," ```csharp
coreInstallTarget.position,
``` "
PowerCoreObject.cs,what is the amount of time it takes the power core to complete its second insertion animation?," ```csharp
insertAnimationDuration2 = 0.5f,
``` "
PowerCoreObject.cs,What is the target rotation that the core rotates to during the first insertion animation?," ```csharp
coreInstallTarget.rotation,
``` "
PowerCoreStation.cs,What is the parent class of 'PowerCoreStation.cs'?,'PowerCoreStation.cs' inherits from 'InteractableObject.cs'.
PowerCoreStation.cs,what is the purpose of 'PowerCoreStation.cs'?,"As an extension of the 'InteractableObject.cs', it implements a power station, with logic for detecting, inserting and ejecting the power core."
PowerCoreStation.cs,"'PowerCoreStation.cs' has a private variable called '_isCoreInside', what is it's purpose?",The '_isCoreInside' variable is a boolean that keeps track of whether the power core is currently inside the station.
PowerCoreStation.cs,What happens when a power core enters the station's trigger zone?,"The station detects the core and calls the 'CoreDetected()' method, which fully inserts the core into the station and plays an insertion sound."
PowerCoreStation.cs,What is the purpose of the 'OnEnteredPowerStation()' method in 'PowerCoreStation.cs'?,The 'OnEnteredPowerStation()' method is a callback that is called when the power core fully enters the station. It plays an insertion sound and updates the station's state.
PowerCoreStation.cs,What happens when the player interacts with the station?,"When the player interacts with the station, the station calls the 'Interact()' method, which ejects the power core (if it is inside), plays an ejection sound, and updates the station's state."
PowerCoreStation.cs,What is the purpose of the '_justEjected' variable in 'PowerCoreStation.cs'?,The '_justEjected' variable is a boolean that keeps track of whether the power core was just ejected from the station.
PowerCoreStation.cs,What happens when a power core is ejected from the station?,"When a power core is ejected from the station, the station plays an ejection sound, updates its state, and sets the '_justEjected' variable to true."
PowerCoreStation.cs,What is the purpose of the '_isDetachable' variable in 'PowerCoreStation.cs'?,The '_isDetachable' variable determines whether the power core can be ejected from the station.
PowerCoreStation.cs,When is the 'OnObjectWentOutOfFocus()' method called in 'PowerCoreStation.cs'?,The 'OnObjectWentOutOfFocus()' method is called when the player is no longer focusing on the station.
PowerCoreStation.cs,where does the core fully insert itself when entering the station's trigger zone?," ```csharp
coreObject.OnEnteredPowerStation(() => { audioSource.PlayOneShot(insertSound); });
``` "
PowerCoreStation.cs,How does the station check if the entering collider is the correct power core?," ```csharp
if (coreObject && coreObject == core) {
  //ejected core should not be inserted again
  if (_justEjected) {
    _justEjected = false;
    return;
  }
  //core detected, fully insert it
  CoreDetected(coreObject);
}
``` "
PowerCoreStation.cs,What happens if the power core is not detachable?," ```csharp
if (!isDetachable) {
  coreObject.transform.parent = transform;
  GetComponent<Collider>().enabled = false;
}
``` "
PowerCoreStation.cs,What happens when the player stops focusing on the current interactable object?," ```csharp
protected override void OnObjectWentOutOfFocus() { }
``` "
PowerCoreStation.cs,what does the player need to do to interact with the station?," ```csharp
public override void Interact() {
  if (!_isCoreInside) return;

  //play sound
  audioSource.PlayOneShot(ejectSound);
  hintText = """";

  //eject the core
  core.Eject();
  _justEjected = true;
  _isCoreInside = false;
}
``` "
PowerCoreStation.cs,What is the sound played when the core ejects itself from the station?," ```csharp
audioSource.PlayOneShot(ejectSound);
``` "
PowerCoreStation.cs,what is the variable used to make sure the ejected power core cannot insert itself back into the station?," ```csharp
_justEjected``` "
PowerCoreStation.cs,What happens when the core enters the station?," ```csharp
_isCoreInside = true;
hintText = ""Eject"";
``` "
PowerCoreStation.cs,What is the hint text that shows when the player focuses on this station?," ```csharp
if (_isCoreInside) hintText = ""Eject"";
else hintText = """";
``` "
PowerCoreStation.cs,What are the sounds played when the power core enters/ejects the station?," ```csharp
[SerializeField] private AudioSource audioSource;
[SerializeField] private AudioClip insertSound, ejectSound;
``` "
LightMaterialDatabaseSO.cs,What is the purpose of LightMaterialDatabaseSO class?,"It is a scriptable object that serves as a database of light materials, providing a unified way to manage and access different light materials in the game."
LightMaterialDatabaseSO.cs,How can I access the specific light materials stored in this scriptable object?,"You can access individual light materials by using their respective property names, such as Red, Blue, Green, White, Purple, Golden, and Off."
LightMaterialDatabaseSO.cs,What is the purpose of the GetLightByType method?,The GetLightByType method allows you to retrieve the appropriate light material based on a provided LightColor enum value.
LightMaterialDatabaseSO.cs,How do I get the LightColor enum value associated with a specific light material?,You can use the GetLightTypeByMaterial method to obtain the LightColor enum value corresponding to a given light material.
LightMaterialDatabaseSO.cs,Is it possible to retrieve all light materials except for the Off material?,"Yes, you can use the GetAllLightGunLightsExceptOff method to obtain an array containing all light materials except for the Off material."
LightMaterialDatabaseSO.cs,What are the different light colors represented by the LightColor enum?,"The LightColor enum includes the following values: White, Red, Green, Blue, Purple, Golden, and Off."
LightMaterialDatabaseSO.cs,How do I change the light material of an object in the game?,This functionality is not directly provided by the LightMaterialDatabaseSO class. You would need to implement your own logic for changing light materials based on your game's requirements.
LightMaterialDatabaseSO.cs,Can I create my own custom light materials and add them to this database?,"Yes, you can create your own light materials and assign them to the appropriate property fields in the LightMaterialDatabaseSO scriptable object."
LightMaterialDatabaseSO.cs,How does the LightMaterialDatabaseSO class ensure that light materials are efficiently loaded and stored in memory?,This information is not provided within the context of this class.
LightMaterialDatabaseSO.cs,Are there multiple instances of the LightMaterialDatabaseSO class in a Unity project?,This information is not provided within the context of this class.
LightMaterialDatabaseSO.cs,What is the name of the red light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Red { get; private set; }
```"
LightMaterialDatabaseSO.cs,What code is used to get a light material by LightColor ?,"```csharp
public Material GetLightByType(LightColor type) {
        return type switch {
            LightColor.White => White,
            LightColor.Red => Red,
            LightColor.Green => Green,
            LightColor.Blue => Blue,
            LightColor.Golden => ...
        };
    }
```"
LightMaterialDatabaseSO.cs,What code is used to get LightColor by light material?,"```csharp
public LightColor GetLightTypeByMaterial(Material material) {
        if (material == Red) {
            return LightColor.Red;
        } ...
    }
```"
LightMaterialDatabaseSO.cs,What is the name of the blue light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Blue { get; private set; }
```"
LightMaterialDatabaseSO.cs,How to get light materials except Off lights?,"```csharp
public Material[] GetAllLightGunLightsExceptOff() {
        return new []{ Red, Blue, Green,Purple,Golden, White };
    }
```"
LightMaterialDatabaseSO.cs,What is the name of the off light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Off { get; private set; }
```"
LightMaterialDatabaseSO.cs,What is the name of the white light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material White { get; private set; }
```"
LightMaterialDatabaseSO.cs,What is the name of the green light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Green { get; private set; }
```"
LightMaterialDatabaseSO.cs,What is the name of the purple light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Purple { get; private set; }
```"
LightMaterialDatabaseSO.cs,What is the name of the golden light material in 'LightMaterialDatabaseSO.cs'?,"```csharp
public Material Purple { get; private set; }
```"
Constants.cs,What is the purpose of Constants.cs?,Constants.cs is a static class used to store all the constants used in the game. These constants can be accessed from anywhere in the code and are immutable.
Constants.cs,What debug flags are defined in Constants.cs?,"Constants.cs defines two debug flags: DebugMode and Immortal. DebugMode enables debug functionality throughout the game, while Immortal prevents the player from dying."
Constants.cs,What are the different player speeds defined in Constants.cs?,"Constants.cs defines three player speeds: PlayerSpeedCrouch, PlayerSpeedWalk, and PlayerSpeedRun. These speeds are used to control the player's movement speed in different states."
Constants.cs,How fast can grabbable objects move?,Grabbable objects have a maximum velocity of 15 units per second.
Constants.cs,What is the layer used for focused highlighted objects?,The FocusedHighlightedLayer is used to identify objects that are being focused or highlighted. This layer is used to apply special effects or visual cues to these objects.
Constants.cs,How much light is emitted by the light gun?,"The light gun emits 40 units of light emission, affecting the lighting in the game."
Constants.cs,What is the static class PlayerPrefsKeys used for?,"The static class PlayerPrefsKeys contains keys for accessing player preferences, allowing for persistent data storage of level times and other settings."
Constants.cs,How do you access the player's time for a specific level using Constants.cs?,"To access the player's time for a specific level using Constants.cs, use the LevelTime() method, passing in the level number as an argument. For example, to get the player's time for level 3, you would use: \""Constants.PlayerPrefsKeys.LevelTime(3)\""."
Constants.cs,Can the constants defined in Constants.cs be changed during runtime?,"No, the constants defined in Constants.cs are immutable and cannot be changed during runtime. This ensures that they remain consistent throughout the game."
Constants.cs,What is the purpose of the DebugMode flag?,"The DebugMode flag is used to enable or disable debug functionality throughout the game. When enabled, additional debug information may be displayed or special features may be accessible."
Constants.cs,Can you write the line of code used to get the time the player took to complete the second level of the game?,"```csharp
float time = PlayerPrefs.GetFloat(Constants.PlayerPrefsKeys.LevelTime(2));
```"
Constants.cs,Assign a value to 'GrabbableObjectMaximumVelocity'.,"```csharp
public const float GrabbableObjectMaximumVelocity = 15;
```"
Constants.cs,Show all the values assigned to the 'Speeds' constants.,"```csharp
public const float PlayerSpeedCrouch = 3;
public const float PlayerSpeedWalk = 5;
public const float PlayerSpeedRun = 8;
public const float BeastFastSpeed = 20;
```"
Constants.cs,How can you specify that the first level time has been saved in the PlayerPrefs?,"```csharp
PlayerPrefs.SetFloat(Constants.PlayerPrefsKeys.LevelTime(1), time);
```"
Constants.cs,What is the value assigned to 'FocusedHighlightedLayer'?,"```csharp
public const int FocusedHighlightedLayer = 5;
```"
Constants.cs,Write the line of code used to access the 'Immortal' constant.,"```csharp
if (Constants.Immortal) {
  //your code
}
```"
Constants.cs,In which layer is the player currently placed?,"```csharp
int layer = player.layer;
```"
Constants.cs,Assign a new value to 'LightGunLightEmissionAmount'.,"```csharp
public const int LightGunLightEmissionAmount = 40;
```"
Constants.cs,You have a float variable named 'time' which is set to the time the player took to complete the first level. Show how to store it.,"```csharp
PlayerPrefs.SetFloat(Constants.PlayerPrefsKeys.LevelTime(1), time);
```"
Constants.cs,What is the code used to get the speed at which the player runs?,"```csharp
public const float PlayerSpeedRun = 8;
```"
FootstepManager.cs,What is the purpose of the FootstepManager class?,The FootstepManager class is responsible for playing footstep sounds based on the player's speed.
FootstepManager.cs,Where is the FootstepManager class serialized?,The FootstepManager class is serialized so that it can be edited in the Unity inspector.
FootstepManager.cs,How does the FootstepManager class determine when to play a footstep sound?,The FootstepManager class uses a timer to determine when to play a footstep sound. The timer is updated based on the player's speed.
FootstepManager.cs,What happens when the player's speed changes?,"If the player's speed changes, the FootstepManager class resets the footstep timer. This prevents duplicate footstep sounds from being played when the player starts running."
FootstepManager.cs,What is the purpose of the _footstepTime variable?,The _footstepTime variable is used to track the time until the next footstep sound is played.
FootstepManager.cs,What is the purpose of the _lastSpeed variable?,The _lastSpeed variable is used to track the player's previous speed.
FootstepManager.cs,What happens when the FootstepManager class plays a footstep sound?,"When the FootstepManager class plays a footstep sound, it updates the footstep timer based on the player's speed."
FootstepManager.cs,What are the different types of footstep sounds that the FootstepManager class can play?,"The FootstepManager class can play three different types of footstep sounds: crouch, walk, and sprint."
FootstepManager.cs,How does the FootstepManager class select which footstep sound to play?,The FootstepManager class selects which footstep sound to play based on the player's speed.
FootstepManager.cs,What is the purpose of the Update() method in the FootstepManager class?,The Update() method in the FootstepManager class is responsible for updating the footstep timer and playing footstep sounds based on the player's speed.
FootstepManager.cs,In 'FootstepManager.cs' what does the Update method do first thing before playing any footstep sounds (if any)?," ```csharp
if (speed == 0 || !FirstPersonController.Grounded) {
  _footstepTime = 0;
  return;
}
``` "
FootstepManager.cs,in 'FootstepManager.cs' what does the condition `_lastSpeed < speed` in the `Update` method do? ," ```csharp
if (_lastSpeed < speed) {
  _footstepTime = 0;
}
``` "
FootstepManager.cs,In 'FootstepManager.cs' what is the formula for the footstep timer when the player is running? ," ```csharp
_footstepTime = sprintAudioDelay;
``` "
FootstepManager.cs,"In `FootstepManager.cs`, how does it play the foot step sounds? "," ```csharp
source.PlayOneShop(footStepSounds[Random.Range(0, footStepSounds.Length - 1)]);
``` "
FootstepManager.cs,In 'FootstepManager.cs' How do we update the footsteps timer? ," ```csharp
UpdateFootstepTimer(speed);
``` "
FootstepManager.cs,In 'FootstepManager.cs' What is the general flow of the Update method? ," ```csharp
if (speed == 0 || !FirstPersonController.Grounded) {
  _footstepTime = 0;
  return;
}
if (_lastSpeed < speed) {
  _footstepTime = 0;
}
_lastSpeed = speed;
_footstepTime -= Time.deltaTime;
if (_footstepTime <= 0) {
  source.PlayOneShop(footStepSounds[Random.Range(0, footStepSounds.Length - 1)]);
  UpdateFootstepTimer(speed);
}
``` "
FootstepManager.cs,In 'FootstepManager.cs' What happens when we call UpdateFootstepTimer? ," ```csharp
//set footstep timer based on player speed
switch (speed) {
  case <=Constants.PlayerSpeedCrouch: 
    //player is crouching
    _footstepTime = crouchAudioDelay;
    break;
  case <Constants.PlayerSpeedRun: 
    //player is walking
    _footstepTime = walkAudioDelay;
    break;
  default: 
    //player is running
    _footstepTime = sprintAudioDelay;
    break;
}
``` "
FootstepManager.cs,In 'FootstepManager.cs' what sounds are played for footsteps? ," ```csharp
footStepSounds
``` "
FootstepManager.cs,In 'FootstepManager.cs' what does the _footstepTime variable represent? ," ```csharp
//timer for when to play footstep sound
private float _footstepTime;
``` "
FootstepManager.cs,in 'FootstepManager.cs' what does the source AudioSource do? ," ```csharp
[SrializeField] private AudioSource source;
``` "
GameManager.cs,What is the purpose of the GameManager class?,The GameManager class serves as a central point for accessing data like material databases and facilitating interaction between different systems in the game.
GameManager.cs,How can other systems access the material databases in GameManager?,"Other systems can access the material databases by referencing the GameManager class and its properties, such as \""LightGunMaterials\"" and \""SimpleLightMaterials.\"""
GameManager.cs,What happens when the game is closed? Explain the OnDestroy method's actions.,"When the game is closed, the OnDestroy method resets the materials of the LightGun lights to their default values."
GameManager.cs,Which property holds the database of light materials for LightGun lights?,"The \""LightGunMaterials\"" property stores the database of light materials specifically used for LightGun lights."
GameManager.cs,What data type is used to represent the material databases in GameManager?,"The material databases are represented using the ScriptableObject class, denoted by \""LightMaterialDatabaseSO\""."
GameManager.cs,"Can you elaborate on the \""SingletonMonoBehaviour\"" base class mentioned in the script header?","The \""SingletonMonoBehaviour\"" base class is a custom class that enforces a singleton pattern, ensuring there is only one instance of the GameManager class active in the scene."
GameManager.cs,"What is the purpose of the \""Constants\"" class mentioned in the code?","The \""Constants\"" class is likely a collection of constant values used throughout the project, providing a central location for managing and accessing these values."
GameManager.cs,How does the GameManager class ensure that only one instance exists?,"The \""SingletonMonoBehaviour\"" base class implements a singleton pattern, which restricts the creation of multiple instances of the GameManager class."
GameManager.cs,"What is the significance of the \""_MyEĘĘęě\"" property in the code?","The \""_MyEĘĘęě\"" property is used to control the intensity of the light emitted by LightGun lights. Setting this property to \""Constants.LightGunLightęAmount\"" ensures a consistent brightness level for these lights."
GameManager.cs,"What is the purpose of the \""SerializeField\"" attribute on the \""LightGunMaterials\"" and \""SimpleLightMaterials\"" fields?","The \""SerializeField\"" attribute allows Unity to serialize the \""LightGunMaterials\"" and \""SimpleLightMaterials\"" fields in the Unity editor, making them visible and editable in the inspector."
GameManager.cs,How can we access the LightGunMaterials in other systems?," ```csharp
GameManager.Instance.LightGunMaterials
``` "
GameManager.cs,What does OnDestroy() do?," ```csharp
//reset LightGun lights materials
foreach (Material lightGunLightMaterial in LightGunMaterials.GetAllLightGunLightsExceptOff()) {
  lightGunLightMaterial.SetFloat(""_MyEmissiveIntensity"", Constants.LightGunLightEmissionAmount);
}
``` "
GameManager.cs,"In the inspector, what is the serialized field name of the light gun materials database?"," ```csharp
LightGunMaterials
``` "
GameManager.cs,What is the serialized field name of the simple light materials database?," ```csharp
SimpleLightMaterials
``` "
GameManager.cs,Which system component holds references to the light material databases?," ```csharp
[field: SerializeField] public LightMaterialDatabaseSO LightGunMaterials { get; private set; }
[field: SerializeField] public LightMaterialDatabaseSO SimpleLightMaterials { get; private set; }
``` "
GameManager.cs,What is the name of the MonoBehavior class that GameManager inherits from?," ```csharp
SingletonMonoBehaviour<GameManager>
``` "
GameManager.cs,When is OnDestroy() called?," ```csharp
//called when game is closed
``` "
GameManager.cs,How can we set the '_MyEmissiveIntensity' property of a light material?," ```csharp
lightMaterial.SetFloat(""_MyEmissiveIntensity"", Constants.LightGunLightEmissionAmount);
``` "
GameManager.cs,What is the constant value used to set the '_MyEmissiveIntensity' property of a light material?," ```csharp
Constants.LightGunLightEmissionAmount
``` "
GameManager.cs,How can we access the GameManager instance?," ```csharp
GameManager.Instance
``` "
GameStarter.cs,What is the purpose of the GameStarter.cs class?,"The purpose of the GameStarter.cs class is to manage the game start when the game launches, set up the main menu, and listen for the game start UI button."
GameStarter.cs,Is GameStarter.cs a singleton?,"Yes, GameStarter.cs is a singleton, meaning there is only one instance of this class in the game."
GameStarter.cs,When is the Awake method of GameStarter.cs called?,The Awake method of GameStarter.cs is called before the Start method.
GameStarter.cs,What is the purpose of the _mainMenuCamera variable in GameStarter.cs?,The _mainMenuCamera variable is a reference to the main menu camera in the scene.
GameStarter.cs,What is the purpose of the _mainMenuCanvas variable in GameStarter.cs?,"The _mainMenuCanvas variable is a reference to the main menu canvas in the scene, which contains the start game button."
GameStarter.cs,Under what condition are Level1 and Level1.5 loaded additively at Awake?,Level1 and Level1.5 are loaded additively at Awake when Constants.DebugMode is false.
GameStarter.cs,What is the default priority of the main menu camera?,"The default priority of the main menu camera is 12, which shows the main menu."
GameStarter.cs,What happens when the start game button in the main menu is pressed?,"When the start game button in the main menu is pressed, the StartGame method is called."
GameStarter.cs,What is the purpose of the SetMenuCameraPositionAndRotation method in GameStarter.cs?,The SetMenuCameraPositionAndRotation method is used to set the position and rotation of the main menu camera when the game starts.
GameStarter.cs,When is the SetMenuCameraPositionAndRotation method called?,The SetMenuCameraPositionAndRotation method is called at the start of each level by the LevelManager.
GameStarter.cs,In what condition will the level be loaded and the main menu UI shown?,"```csharp
if (!Constants.DebugMode) {
  SceneManager.LoadScene(""Level1"", LoadSceneMode.Additive);
  SceneManager.LoadScene(""Level1.5"", LoadSceneMode.Additive);
  _mainMenuCamera.Priority = 12;
  _mainMenuCanvas.SetActive(true);
}
``` "
GameStarter.cs,What is the name of the script which is listening to the main menu UI button?,"```csharp
GameStarter
``` "
GameStarter.cs,What function does GameStarter.cs call to broadcast the event when the game starts?,"```csharp
GlobalEventHub.GameStart();
``` "
GameStarter.cs,What is the name of the function that is responsible for setting the position and rotation of the main menu?,"```csharp
SetMenuCameraPositionAndRotation
``` "
GameStarter.cs,In what condition does the game start immediately?,"```csharp
if (Constants.DebugMode) {
  StartGame();
}
``` "
GameStarter.cs,What is the priority of _mainMenuCamera?,"```csharp
12
``` "
GameStarter.cs,What happens when the player presses the start game button?,"```csharp
_mainMenuCamera.gameObject.SetActive(false);
Destroy(_mainMenuCanvas);
Destroy(_mainMenuCamera.gameObject);
GlobalEventHub.GameStart();
``` "
GameStarter.cs,What happens inside Start()? ,"```csharp
if (Constants.DebugMode) {
  StartGame();
}
``` "
GameStarter.cs,What happens at the end of each level?,"```csharp
_mainMenuCamera.transform.SetPositionAndRotation(position, rotation);
``` "
GameStarter.cs,What function is called when the start game button is pressed?,"```csharp
StartGame
``` "
GlobalInGameData.cs,What is the access modifier of the 'CurrentLevel' field in 'GlobalInGameData.cs'?,public
GlobalInGameData.cs,What is the data type of the 'HasLoadedItsFirstLevel' field in 'GlobalInGameData.cs'?,boolean
GlobalInGameData.cs,What is the accessibility scope of the 'IsPowerOn' field in 'GlobalInGameData.cs'?,It is accessible from anywhere in the code.
GlobalInGameData.cs,What is the initial value of the 'IsPlayerAlive' field in 'GlobalInGameData.cs'?,true
GlobalInGameData.cs,What is the data type of the 'PlayerHasControl' variable in 'GlobalInGameData.cs'?,boolean
GlobalInGameData.cs,What is the purpose of the 'IsPlayerHoldingSomething' field in 'GlobalInGameData.cs'?,To indicate whether the player is holding any objects.
GlobalInGameData.cs,What is the default value of the 'IsPlayerAlive' field in 'GlobalInGameData.cs'?,true
GlobalInGameData.cs,Which modifier is used for 'CurrentLevel' in 'GlobalInGameData.cs'?,public static
GlobalInGameData.cs,Is the 'HasLoadedItsFirstLevel' field in 'GlobalInGameData.cs' public? ,"Yes, it is public."
GlobalInGameData.cs,'GlobalInGameData.cs' manages what type of data?,Some global data that is used in the game.
GlobalInGameData.cs,"in 'GlobalInGameData.cs', how do we check if the player has control over his character?"," ```csharp
public static bool PlayerHasControl = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default boolean value of 'IsPlayerAlive' ?"," ```csharp
public static bool IsPlayerAlive = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', How do we set that the player is holding something?"," ```csharp
public static bool IsPlayerHoldingSomething = false;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default boolean value of 'IsPowerOn' ?"," ```csharp
public static bool IsPowerOn = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default boolean value of 'HasLoadedItsFirstLevel' ?"," ```csharp
public static bool HasLoadedItsFirstLevel = false;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default value of 'CurrentLevel' ?"," ```csharp
public static int CurrentLevel;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default boolean value of 'PlayerHasControl' ?"," ```csharp
public static bool PlayerHasControl = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', how do we check if the player is alive?"," ```csharp
public static bool IsPlayerAlive = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', how do we check if the power is on?"," ```csharp
public static bool IsPowerOn = true;
``` "
GlobalInGameData.cs,"in 'GlobalInGameData.cs', what is the default boolean value of 'PlayerHasControl' ?"," ```csharp
public static bool PlayerHasControl = true;
``` "
MusicSoundManager,What is the purpose of the MusicSoundManager class?,"The MusicSoundManager class is responsible for managing all music, ambient sounds and manually played sounds in the game."
MusicSoundManager,How can other systems access the MusicSoundManager class?,Other systems can access the MusicSoundManager class through MusicSoundManager.Instance.
MusicSoundManager,What are the different types of audio sources available in the MusicSoundManager class?,"The MusicSoundManager class has three different types of audio sources: soundSource, musicSource, and ambientSource."
MusicSoundManager,What is the purpose of the Ambient1 and Ambient2 AudioClip fields in the MusicSoundManager class?,The Ambient1 and Ambient2 AudioClip fields store the audio clips for the ambient sounds that can be played by the MusicSoundManager class.
MusicSoundManager,What are the LightGunSuck and LightGunShoot AudioClip fields used for in the MusicSoundManager class?,The LightGunSuck and LightGunShoot AudioClip fields store the audio clips for the sounds played by the light gun.
MusicSoundManager,What is the purpose of the BeastScream AudioClip field?,The BeastScream AudioClip field stores the audio clip for the scream sound made by the beast.
MusicSoundManager,What is the role of the FootstepManager field in the MusicSoundManager class?,"The FootstepManager field references the FootstepManager component, which is responsible for managing the sounds of footsteps."
MusicSoundManager,What does the PlaySound method in the MusicSoundManager class do?,The PlaySound method plays the specified audio clip through the soundSource audio source.
MusicSoundManager,What does the PlayMusic method in the MusicSoundManager class do?,The PlayMusic method plays the specified audio clip through the musicSource audio source.
MusicSoundManager,What is the purpose of the PlayAmbient method in the MusicSoundManager class?,The PlayAmbient method plays the specified audio clip through the ambientSource audio source.
MusicSoundManager.cs,What is MusicSoundManager's role in the game?,"```csharp
MusicSoundManager handles and plays all music, ambient sounds and manually played sound in the game.
```"
MusicSoundManager.cs,Which variable contains the Beast scream?,"```csharp
public AudioClip BeastScream { get; private set; }
```"
MusicSoundManager.cs,Explain what 'PlaySound' does?,"```csharp
Plays an AudioClip on 'soundSource' AudioSource
```"
MusicSoundManager.cs,Explain what 'PlaySoundWithDelay' does?,"```csharp
Plays an AudioClip on 'soundSource' AudioSource with a delay of 'delayMilli' (in milliseconds)
```"
MusicSoundManager.cs,What are the 3 types of AudioSources that MusicSoundManager contains?,"```csharp
1. soundSource
2. musicSource
3. ambientSource
```"
MusicSoundManager.cs,Explain what 'Update' does?,"```csharp
Calls 'Update' on the 'footstepManager' object
```"
MusicSoundManager.cs,What is the name of the private variable that holds a reference to the 'FootstepManager' object?,"```csharp
footstepManager
```"
MusicSoundManager.cs,Explain what 'PlayMusic' does?,"```csharp
Plays an AudioClip on 'musicSource' AudioSource
```"
MusicSoundManager.cs,Explain what 'PlayAmbient' does?,"```csharp
Plays an AudioClip on 'ambientSource' AudioSource
```"
MusicSoundManager.cs,What is the name of the variable that holds the LightGun shoot AudioClip?,"```csharp
public AudioClip LightGunShoot { get; private set; }
```"
PreLoader.cs,What is the purpose of the PreLoader.cs class?,The PreLoader.cs class is used to instantiate the Systems object before any scene is loaded.
PreLoader.cs,What happens in the 'InstantiateSystems' method?,"In the 'InstantiateSystems' method, the screen resolution is set to 1920x1080 and the Systems object is instantiated. The Systems object is a prefab that holds low-level systems and must be present in every scene, and it's created before any other object."
PreLoader.cs,Why is the Systems object needed to be instantiated before any other object?,"The Systems object holds low-level systems that are necessary for the game's functionality. By instantiating it before any other object, these systems can be properly initialized and ready for use when needed."
PreLoader.cs,How is the Systems object instantiated?,"The Systems object is instantiated using the 'Object.Instantiate(Resources.Load(""Systems""))' method. This loads the Systems prefab from the Resources folder and creates an instance of it in the scene."
PreLoader.cs,Why is the 'Object.DontDestroyOnLoad' method used on the Systems object?,"The 'Object.DontDestroyOnLoad' method is used on the Systems object to ensure that it persists across scene loads. This means that the Systems object will not be destroyed when a new scene is loaded, allowing its low-level systems to continue functioning throughout the game."
PreLoader.cs,What is the significance of setting the screen resolution in the 'InstantiateSystems' method?,"Setting the screen resolution in the 'InstantiateSystems' method ensures that the game is displayed at the desired resolution from the start. By explicitly setting it to 1920x1080, the game will be displayed in full HD resolution."
PreLoader.cs,Can the screen resolution be changed after the 'InstantiateSystems' method is executed?,"Yes, the screen resolution can be changed after the 'InstantiateSystems' method is executed. However, it is generally not recommended to do so during gameplay as it may cause visual artifacts or disruption to the game's performance."
PreLoader.cs,What is the reason behind loading the Systems object from the Resources folder?,"Loading the Systems object from the Resources folder ensures that it is always available, regardless of the current scene. The Resources folder is a special folder in Unity that contains assets that are accessible from any scene, making it an ideal location to store the Systems object."
PreLoader.cs,Is the Systems object a singleton?,"The Systems object is not explicitly defined as a singleton in the code provided. However, since it is instantiated before any scene is loaded and persists across scenes, it effectively acts as a singleton, ensuring that there is only one instance of the Systems object throughout the game."
PreLoader.cs,What are the potential consequences of not instantiating the Systems object before any other object?,"Not instantiating the Systems object before any other object could lead to issues with the game's low-level systems not being properly initialized. This could result in errors, unexpected behavior, or even crashes during gameplay."
PreLoader.cs,"In 'PreLoader.cs', how is the screen resolution set?","```csharp
Screen.SetResolution(1920, 1080, true);
```"
PreLoader.cs,"In 'PreLoader.cs', how is the 'systems' object instantiated?","```csharp
Object.Instantiate(Resources.Load(""Systems""));
```"
PreLoader.cs,"In 'PreLoader.cs', how is the 'systems' object prevented from being destroyed when loading a new scene?","```csharp
Object.DontDestroyOnLoad(Object.Instantiate(Resources.Load(""Systems"")));
```"
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'RuntimeInitializeOnLoadMethod' attribute?","```csharp
[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
```

The 'RuntimeInitializeOnLoadMethod' attribute specifies that the 'InstantiateSystems' method should be called before any scene is loaded."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'DontDestroyOnLoad' method?","```csharp
Object.DontDestroyOnLoad(Object.Instantiate(Resources.Load(""Systems"")));
```

The 'DontDestroyOnLoad' method prevents the 'systems' object from being destroyed when loading a new scene."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'Resources.Load' method?","```csharp
Object.Instantiate(Resources.Load(""Systems""));
```

The 'Resources.Load' method is used to load the 'systems' prefab from the resources folder."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'SetResolution' method?","```csharp
Screen.SetResolution(1920, 1080, true);
```

The 'SetResolution' method is used to set the screen resolution to 1920x1080."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'true' argument in the 'SetResolution' method?","```csharp
Screen.SetResolution(1920, 1080, true);
```

The 'true' argument in the 'SetResolution' method specifies that the screen should be set to full screen."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'Instantiate' method?","```csharp
Object.Instantiate(Resources.Load(""Systems""));
```

The 'Instantiate' method is used to create an instance of the 'systems' prefab."
PreLoader.cs,"In 'PreLoader.cs', what is the purpose of the 'DontDestroyOnLoad' method in the 'InstantiateSystems' method?","```csharp
Object.DontDestroyOnLoad(Object.Instantiate(Resources.Load(""Systems"")));
```

The 'DontDestroyOnLoad' method is used to prevent the 'systems' object from being destroyed when loading a new scene."
SingletonMonoBehaviour.cs,What is the purpose of the SingletonMonoBehaviour class?,The SingletonMonoBehaviour class is a custom implementation of the singleton pattern for MonoBehaviour classes.
SingletonMonoBehaviour.cs,How does the SingletonMonoBehaviour class work?,The SingletonMonoBehaviour class uses the Instance property to access the singleton instance of the class.
SingletonMonoBehaviour.cs,What is the Awake() method in the SingletonMonoBehaviour class?,The Awake() method is called when the script instance is being loaded.
SingletonMonoBehaviour.cs,What does the Awake() method do in the SingletonMonoBehaviour class?,"In the Awake() method, the SingletonMonoBehaviour class checks if an instance of the class already exists. If it does, it logs an error message and destroys the current instance. If it doesn't, it sets the Instance property to the current instance."
SingletonMonoBehaviour.cs,What is the purpose of the Instance property in the SingletonMonoBehaviour class?,The Instance property is used to access the singleton instance of the class.
SingletonMonoBehaviour.cs,How do I use the SingletonMonoBehaviour class?,"To use the SingletonMonoBehaviour class, you can inherit from it and then access the singleton instance of your class using the Instance property."
SingletonMonoBehaviour.cs,What are the benefits of using the SingletonMonoBehaviour class?,"The benefits of using the SingletonMonoBehaviour class include ease of use, improved performance, and increased reliability."
SingletonMonoBehaviour.cs,What are the limitations of the SingletonMonoBehaviour class?,The limitations of the SingletonMonoBehaviour class include the potential for memory leaks and the difficulty in testing classes that use singletons.
SingletonMonoBehaviour.cs,When should I use the SingletonMonoBehaviour class?,You should use the SingletonMonoBehaviour class when you need to have a single instance of a class that is accessible from anywhere in your code.
SingletonMonoBehaviour.cs,Are there any alternatives to the SingletonMonoBehaviour class?,"Yes, there are alternatives to the SingletonMonoBehaviour class, such as using static classes or dependency injection."
SingletonMonoBehaviour.cs,"in 'SingletonMonoBehaviour.cs', how can a class become a Singleton?"," ```csharp
public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T> {...}
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what will happen when awake is called if a second instance of this class already exists?"," ```csharp
//destroy this object
Destroy(gameObject);
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', how is the instance set?"," ```csharp
Instance = this as T;
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the purpose of the 'gameObject' variable?"," ```csharp

destroy this object
Destroy(gameObject);
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what does the 'LogError' function do?"," ```csharp
Debug.LogError(""Duplicate Singleton "" + GetType().Name);
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the purpose of the 'GetType()' function?"," ```csharp
GetType().Name
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the name of the static property that can be used to access the singleton instance?"," ```csharp
public static T Instance { get; private set; }
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the purpose of the 'Instance' property?"," ```csharp
//publicly accessed singleton instance
public static T Instance { get; private set; }
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the purpose of the 'Awake' method?"," ```csharp
protected virtual void Awake() {...}
``` "
SingletonMonoBehaviour.cs,"In 'SingletonMonoBehaviour.cs', what is the purpose of the 'if (Instance)' statement?"," ```csharp
if (Instance) {...}
``` "
Utils.cs,What is the purpose of the 'Utils' class?,The 'Utils' class is a static class that contains various utility functions that can be conveniently accessed by any class in the project.
Utils.cs,What is the 'Normalize' function used for?,"The 'Normalize' function is used to normalize a color value by dividing each of its red, green, and blue components by its maximum component value, resulting in a normalized color with a maximum component value of 1."
Utils.cs,What is the syntax for the Normalize function?,"The syntax for the Normalize function is: public static Color Normalize(this Color color), where 'color' is the Color value to be normalized."
Utils.cs,How does the Normalize function ensure that the maximum color component becomes 1?,"The Normalize function divides each of the color's red, green, and blue components by the maximum component value. As a result, the color's maximum component value becomes 1, and all other components are scaled down proportionally."
Utils.cs,What are the benefits of using the Normalize function?,"Using the Normalize function ensures that color values are consistent in terms of their maximum component value, making it easier to perform color operations and comparisons."
Utils.cs,Does the Normalize function modify the original color passed to it?,"No, the Normalize function does not modify the original color passed to it. Instead, it returns a new normalized color, leaving the original color unchanged."
Utils.cs,Can the Normalize function be used on a Color32 variable?,"The Normalize function is specifically designed for Color values. It cannot be directly applied to Color32 variables, as they have different data types."
Utils.cs,What is a typical scenario where the Normalize function might be useful?,"A typical scenario where the Normalize function might be useful is when you want to compare or blend two or more colors. By normalizing the colors first, you can ensure that they are on the same scale and can be compared or blended more effectively."
Utils.cs,What is the return type of the Normalize function?,The return type of the Normalize function is Color. It returns a new normalized color value with a maximum component value of 1.
Utils.cs,Does the Normalize function take any parameters other than the color to be normalized?,"No, the Normalize function takes only one parameter, which is the Color value to be normalized. It does not require any additional parameters."
Utils.cs,"In the 'Utils' class, what C# code is used for dividing all components of a color by the max color component to normalize it?","```csharp
var max = color.maxColorComponent;
return new Color(color.r / max, color.g / max, color.b / max);
```"
FlashLightUiManager.cs,What is the purpose of the FlashLightUiManager class?,The FlashLightUiManager class is responsible for managing the user interface (UI) related to the flashlight in the game.
FlashLightUiManager.cs,What is the purpose of the fillAmount field in FlashLightUiManager?,The fillAmount field is an instance of the Image class and represents the image component that displays the battery level of the flashlight.
FlashLightUiManager.cs,What does the Update method do in FlashLightUiManager?,"The Update method is used to update the UI elements related to the flashlight, specifically the fillAmount image which indicates the battery level."
FlashLightUiManager.cs,What is the purpose of the capacity and max parameters in the Update method?,"The capacity parameter represents the current battery level of the flashlight, and the max parameter represents the maximum battery capacity."
FlashLightUiManager.cs,How does the FlashLightUiManager update the fillAmount image?,The FlashLightUiManager updates the fillAmount image by setting its fillAmount property to the ratio of the current battery level (capacity) to the maximum battery capacity (max).
FlashLightUiManager.cs,What happens when the fillAmount property of the fillAmount image is set?,"When the fillAmount property of the fillAmount image is set, the image's fill amount changes, visually representing the current battery level of the flashlight."
FlashLightUiManager.cs,In what context is the FlashLightUiManager class used?,"The FlashLightUiManager class is used in the context of a game, where it manages the UI elements related to the flashlight, such as displaying the battery level."
FlashLightUiManager.cs,What is the relationship between FlashLightUiManager and PlayerFlashLightManager?,"The FlashLightUiManager class is a field in the PlayerFlashLightManager class, indicating that the FlashLightUiManager is used to manage the UI elements related to the flashlight within the context of the PlayerFlashLightManager."
FlashLightUiManager.cs,Is the FlashLightUiManager class directly responsible for controlling the flashlight itself?,"No, the FlashLightUiManager class is not directly responsible for controlling the flashlight itself. It is primarily concerned with managing the UI elements that display information about the flashlight, such as the battery level."
FlashLightUiManager.cs,What is the purpose of the [SerializeField] attribute on the fillAmount field?,"The [SerializeField] attribute on the fillAmount field indicates that the field should be serialized and exposed in the Unity Editor, allowing it to be assigned in the inspector."
FlashLightUiManager.cs,"In 'FlashLightUiManager.cs', how does the script update the UI image according to the battery level?","```csharp
fillAmount.fillAmount = capacity / max;
```"
FlashLightUiManager.cs,Which method is called by 'PlayerFlashLightManager' when the battery of the flashlight is changed in 'FlashLightUiManager.cs'?,"```csharp
public void Update(float capacity, float max) {
...
}
```"
FlashLightUiManager.cs,What script is 'FlashLightUiManager' a field in in 'FlashLightUiManager.cs'?,"```csharp
PlayerFlashLightManager
```"
FlashLightUiManager.cs,"In 'FlashLightUiManager.cs', what is the purpose of the 'fillAmount' variable?","```csharp
The 'fillAmount' variable is an Image component used to show the battery level of the flashlight.
```"
FlashLightUiManager.cs,What is the name of the class that 'FlashLightUiManager' is a part of in 'FlashLightUiManager.cs'?,"```csharp
FlashLightUiManager
```"
FlashLightUiManager.cs,What is the type of the 'fillAmount' variable in 'FlashLightUiManager.cs'?,"```csharp
Image
```"
FlashLightUiManager.cs,What does 'FlashLightUiManager' do when it is called by 'PlayerFlashLightManager' in 'FlashLightUiManager.cs'?,"```csharp
It updates the UI image to show the current battery level of the flashlight.
```"
FlashLightUiManager.cs,What is the purpose of the 'Update' method in 'FlashLightUiManager.cs'?,"```csharp
The 'Update' method is used to update the UI image to show the current battery level of the flashlight.
```"
FlashLightUiManager.cs,"In 'FlashLightUiManager.cs', what is the name of the method that is called when the battery of the flashlight is changed?","```csharp
Update
```"
FlashLightUiManager.cs,What is the name of the UI image that is used to show the battery level of the flashlight in 'FlashLightUiManager.cs'?,"```csharp
fillAmount
```"
FullScreenEffectsManager,What is the primary purpose of the 'FullScreenEffectsManager' class?,"The 'FullScreenEffectsManager' class is a singleton that manages fullscreen effects like the low on health effect and teleport effect, providing a centralized point of control for these visual effects."
FullScreenEffectsManager,What two materials are used for the low on health effect and teleport effect?,The 'healthMaterial' and 'teleportMaterial' materials are used for the low on health effect and teleport effect respectively.
FullScreenEffectsManager,How does the 'FullScreenEffectsManager' show the low on health effect?,"It enables the '_healthEffect' custom pass, animates the intensity of the effect using the 'DOFloat' method, and hides the effect when health is full."
FullScreenEffectsManager,What is the role of the '_teleportEffect' custom pass?,"The '_teleportEffect' custom pass is responsible for the visual effect during teleportation. It shows the teleport effect, plays an animation, and then hides the effect when the animation is complete."
FullScreenEffectsManager,How does the 'FullScreenEffectsManager' reset the health effect?,It sets the '_visibility' property of the 'healthMaterial' to 0 and disables the '_healthEffect' custom pass.
FullScreenEffectsManager,What is the purpose of the 'healthToSlider' array?,The 'healthToSlider' array is used to map health values to corresponding slider values for the low on health effect. It determines the intensity of the effect based on the player's health.
FullScreenEffectsManager,When is the 'Teleport' method called?,The 'Teleport' method is called by the 'PlayerTeleportManager' when the player teleports.
FullScreenEffectsManager,How does the 'FullScreenEffectsManager' handle the teleport effect?,It shows the teleport effect by setting the '_Center_Void_Size' property of the 'teleportMaterial' and enables the '_teleportEffect' custom pass. It then plays an animation using DOTween and hides the effect when the animation is complete.
FullScreenEffectsManager,What occurs when the 'FullScreenEffectsManager' is destroyed?,"Upon destruction, the 'FullScreenEffectsManager' resets the health effect and disables the '_healthEffect' custom pass, ensuring a clean shutdown."
FullScreenEffectsManager,"In the context of the 'FullScreenEffectsManager', what is the purpose of the 'customPassVolume' field?","The 'customPassVolume' field references a 'Volume' component that contains the 'CustomPass' objects used for the low on health and teleport effects, allowing the 'FullScreenEffectsManager' to control these effects."
FullScreenEffectsManager.cs,How does the FullScreenEffectsManager get the custom passes from the volume?," ```csharp
_healthEffect = customPassVolume.customPasses[0];
_teleportEffect = customPassVolume.customPasses[1];
``` "
FullScreenEffectsManager.cs,What is the function called when health is changed in FullScreenEffectsManager?," ```csharp
public void HealthLowHealthEffect(int healthAmount)
``` "
FullScreenEffectsManager.cs,Describe what the code does when the player's health is changed and the 'HealthLowHealthEffect' function is called in the FullScreenEffectsManager.," ```csharp
healthMaterial.DOFloat(healthToSlider[healthAmount], ""_visibility"", 0.5f);
``` "
FullScreenEffectsManager.cs,What happens when the player's health is full and the '_healthEffect.enabled' variable is set to true?," ```csharp
healthMaterial.SetFloat(""_visibility"", 0);
_healthEffect.enabled = false;
``` "
FullScreenEffectsManager.cs,What are the unity fullscreen materials used for low on health and teleport effects?," ```csharp
[SerializeField] private Material healthMaterial, teleportMaterial;
``` "
FullScreenEffectsManager.cs,What function is called by PlayerTeleportManager when player teleports?," ```csharp
public void Teleport(Action OnTeleportEffectEnded)
``` "
FullScreenEffectsManager.cs,What is the function called when object is destroyed in FullScreenEffectsManager?," ```csharp
private void OnDestroy()
``` "
FullScreenEffectsManager.cs,What does the function called when object is destroyed do in FullScreenEffectsManager?," ```csharp
ResetHealth();
``` "
FullScreenEffectsManager.cs,What is reset when the function called when object is destroyed is invoked?," ```csharp
ResetHealth();
``` "
FullScreenEffectsManager.cs,What are the custom passes that are used for low on health and teleport effects?," ```csharp
[SerializeField] private CustomPassVolume customPassVolume;
``` "
GamePlayCanvasManager.cs,What is the purpose of the GamePlayCanvasManager.cs class?,"The GamePlayCanvasManager.cs class manages the activation and deactivation of the gameplay canvas, which contains all the user interface elements for gameplay."
GamePlayCanvasManager.cs,What design pattern is the GamePlayCanvasManager.cs class implemented in?,"The GamePlayCanvasManager.cs class is implemented using the Singleton design pattern, which ensures that there is only one instance of the class in the entire game."
GamePlayCanvasManager.cs,What method is used to disable the gameplay UI?,"To disable the gameplay UI, the DisableGameplayUi method is called, which deactivates the GameObject associated with the GamePlayCanvasManager.cs class."
GamePlayCanvasManager.cs,What is the purpose of the EnableGameplayUi method?,The EnableGameplayUi method is used to activate the gameplay UI at the start of the game.
GamePlayCanvasManager.cs,How can you access the singleton instance of the GamePlayCanvasManager.cs class?,The singleton instance of the GamePlayCanvasManager.cs class can be accessed using the static Instance property.
GamePlayCanvasManager.cs,What is the name of the GameObject that is deactivated when calling the DisableGameplayUi method?,The name of the GameObject that is deactivated when calling the DisableGameplayUi method is the same as the name of the GameObject that contains the GamePlayCanvasManager.cs script.
GamePlayCanvasManager.cs,What happens when the EnableGameplayUi method is called?,"When the EnableGameplayUi method is called, the GameObject associated with the GamePlayCanvasManager.cs class is activated, making the gameplay UI visible."
GamePlayCanvasManager.cs,Is the GamePlayCanvasManager.cs class responsible for managing any other UI elements in the game?,"No, the GamePlayCanvasManager.cs class is specifically designed to manage the gameplay UI, which includes all the user interface elements related to gameplay."
GamePlayCanvasManager.cs,Can you instantiate multiple instances of the GamePlayCanvasManager.cs class?,"No, due to the implementation of the Singleton design pattern, only one instance of the GamePlayCanvasManager.cs class can exist at a time."
GamePlayCanvasManager.cs,Is there a way to modify the UI elements that are managed by the GamePlayCanvasManager.cs class?,"Yes, you can modify the UI elements managed by the GamePlayCanvasManager.cs class by modifying the child objects of the GameObject that contains the GamePlayCanvasManager.cs script."
GamePlayCanvasManager.cs,"In 'GamePlayCanvasManager.cs', what is the function used to call at the start of the game to activate gameplay ui?","```csharp
public void EnableGameplayUi() => gameObject.SetActive(true);
```"
GamePlayCanvasManager.cs,How do you deactivate the gameplay UI in 'GamePlayCanvasManager.cs'?,"```csharp
public void DisableGameplayUi() => gameObject.SetActive(false);
```"
GamePlayCanvasManager.cs,What is the inheritance type of 'GamePlayCanvasManager' in 'GamePlayCanvasManager.cs'?,"```csharp
public class GamePlayCanvasManager : SingletonMonoBehaviour<GamePlayCanvasManager> {
```"
GamePlayCanvasManager.cs,What is the responsibility of the 'GamePlayCanvasManager' in 'GamePlayCanvasManager.cs'?,"```csharp
/*
 * Ui.GamePlayCanvasManager
 * Manages activation and deactivation of gameplay canvas (all gameplay ui elements)
 * is singleton
 */
```"
GamePlayCanvasManager.cs,How do you get an instance of 'GamePlayCanvasManager' class from anywhere in the project in 'GamePlayCanvasManager.cs'?,"```csharp
GamePlayCanvasManager.GetInstance();
```"
GamePlayCanvasManager.cs,Can you create multiple instances of the 'GamePlayCanvasManager' class at the same time in 'GamePlayCanvasManager.cs'?,"```csharp
//no, it is a singleton, so it only exists once in each Scene.
```"
GamePlayCanvasManager.cs,"In 'GamePlayCanvasManager.cs', what is the purpose of the ```gameObject.SetActive(boolean)``` method in the class' functions?","```csharp
//activates or deactivates the gameplay ui (all the UI elements).
```"
GamePlayCanvasManager.cs,What namespaces are present in 'GamePlayCanvasManager.cs'?,"```csharp
using UnityEngine;
```"
GamePlayCanvasManager.cs,What is the return type of the 'gameObject' property in 'GamePlayCanvasManager.cs'?,"```csharp
//GameObject
```"
GamePlayCanvasManager.cs,What is the access modifier used for the 'EnableGameplayUi' and 'DisableGameplayUi' functions in 'GamePlayCanvasManager.cs'?,"```csharp
//public
```"
UIBeastManager.cs,What is the purpose of the UIBeastManager class?,The UIBeastManager class manages the beast state indicator on the user interface (UI) for each state.
UIBeastManager.cs,What happens when the beast's state is changed?,"The UIBeastManager class listens to events and updates the UI accordingly, changing the color and scale of the beast state indicator."
UIBeastManager.cs,What is the purpose of the 'OnEnable()' method?,"The 'OnEnable()' method subscribes the UIBeastManager class to specific events, allowing it to listen for changes in the beast's state."
UIBeastManager.cs,What is the purpose of the 'OnDisable()' method?,"The 'OnDisable()' method unsubscribes the UIBeastManager class from specific events, preventing it from listening for changes in the beast's state when it is disabled."
UIBeastManager.cs,What is the purpose of the 'BeastStateUpdate()' method?,"The 'BeastStateUpdate()' method is called when the beast's state is changed. It updates the UI accordingly, changing the color and scale of the beast state indicator."
UIBeastManager.cs,What are the different states that the beast can be in?,"The beast can be in the following states: OnTarget, Roaming, and RoamingOnTarget."
UIBeastManager.cs,How does the UIBeastManager class update the UI for the 'OnTarget' state?,"For the 'OnTarget' state, the UIBeastManager class sets the beast state indicator to red and scales it to a size of 1."
UIBeastManager.cs,How does the UIBeastManager class update the UI for the 'Roaming' state?,"For the 'Roaming' state, the UIBeastManager class sets the beast state indicator to green and scales it to a size of 0.2."
UIBeastManager.cs,How does the UIBeastManager class update the UI for the 'RoamingOnTarget' state?,"For the 'RoamingOnTarget' state, the UIBeastManager class sets the beast state indicator to orange and scales it to a size of 0.6."
UIBeastManager.cs,When does the UIBeastManager class activate the UI canvas?,"The UIBeastManager class activates the UI canvas when the beast's state is changed, unless the state is 'None'."
UIBeastManager.cs,In 'UIBeastManager.cs' how does the function 'BeastStateUpdate' get the information about the beasts state?,"```csharp
private void BeastStateUpdate(BeastManager.State state) {
  //activate canvas if it is not active
  if (!canvas.gameObject.activeSelf) canvas.gameObject.SetActive(true);
  Debug.Log(state);
  //update ui according to the state. set beastStateIndicators color and scale
  switch (state) {
    case BeastManager.State.OnTarget:
      beastStateIndicator.rectTransform.DOScale(1, 0.5f);
      beastStateIndicator.DOColor(Color.red, 0.5f);
      break;

    case BeastManager.State.Roaming:
      beastStateIndicator.rectTransform.DOScale(0.2f, 0.5f);
      beastStateIndicator.DOColor(Color.green, 0.5f);
      break;

    case BeastManager.State.RoamingOnTarget:
      beastStateIndicator.rectTransform.DOScale(0.6f, 0.5f);
      beastStateIndicator.DOColor(orangeColor, 0.5f);
      break;

    default:
      canvas.gameObject.SetActive(false);
      break;
  }
}
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what does the function 'OnDisable' do?,"```csharp
private void OnDisable() {
  //unsubscribing to some events
  LevelEventHub.OnBeastStateUpdate -= BeastStateUpdate;
}
```"
UIBeastManager.cs,In 'UIBeastManager.cs' how does the BeastStateUpdate function change the beastStateIndicators scale and color based on the beasts state?,"```csharp
switch (state) {
    case BeastManager.State.OnTarget:
      beastStateIndicator.rectTransform.DOScale(1, 0.5f);
      beastStateIndicator.DOColor(Color.red, 0.5f);
      break;

    case BeastManager.State.Roaming:
      beastStateIndicator.rectTransform.DOScale(0.2f, 0.5f);
      beastStateIndicator.DOColor(Color.green, 0.5f);
      break;

    case BeastManager.State.RoamingOnTarget:
      beastStateIndicator.rectTransform.DOScale(0.6f, 0.5f);
      beastStateIndicator.DOColor(orangeColor, 0.5f);
      break;

    default:
      canvas.gameObject.SetActive(false);
      break;
  }
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what does the function 'BeastStateUpdate' do?,"```csharp
private void BeastStateUpdate(BeastManager.State state) {
  //activate canvas if it is not active
  if (!canvas.gameObject.activeSelf) canvas.gameObject.SetActive(true);
  Debug.Log(state);
  //update ui according to the state. set beastStateIndicators color and scale
  switch (state) {
    case BeastManager.State.OnTarget:
      beastStateIndicator.rectTransform.DOScale(1, 0.5f);
      beastStateIndicator.DOColor(Color.red, 0.5f);
      break;

    case BeastManager.State.Roaming:
      beastStateIndicator.rectTransform.DOScale(0.2f, 0.5f);
      beastStateIndicator.DOColor(Color.green, 0.5f);
      break;

    case BeastManager.State.RoamingOnTarget:
      beastStateIndicator.rectTransform.DOScale(0.6f, 0.5f);
      beastStateIndicator.DOColor(orangeColor, 0.5f);
      break;

    default:
      canvas.gameObject.SetActive(false);
      break;
  }
}
```"
UIBeastManager.cs,In 'UIBeastManager.cs' in the function 'OnEnable' what event subscribes the BeastStateUpdate function?,"```csharp
private void OnEnable() {
  //subscribing (listening) to some events
  LevelEventHub.OnBeastStateUpdate += BeastStateUpdate;
}
```"
UIBeastManager.cs,In 'UIBeastManager.cs' how does the BeastStateUpdate function activate the canvas if it is not already active?,"```csharp
if (!canvas.gameObject.activeSelf) canvas.gameObject.SetActive(true);
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what is the color for the beast state OnTarget?,"```csharp
case BeastManager.State.OnTarget:
  beastStateIndicator.DOColor(Color.red, 0.5f);
  break;
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what is the color for the beast state Roaming?,"```csharp
case BeastManager.State.Roaming:
  beastStateIndicator.DOColor(Color.green, 0.5f);
  break;
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what is the color for the beast state RoamingOnTarget?,"```csharp
case BeastManager.State.RoamingOnTarget:
  beastStateIndicator.DOColor(orangeColor, 0.5f);
  break;
```"
UIBeastManager.cs,In 'UIBeastManager.cs' what is the color for the beast state that hides the canvas?,"```csharp
default:
  canvas.gameObject.SetActive(false);
  break;
```"
UICurrentObjectivesManager.cs,What is the purpose of the UICurrentObjectivesManager class?,The purpose of the UICurrentObjectivesManager class is to manage the user interface (UI) elements that display the current objectives. It responds to game events to update the UI accordingly.
UICurrentObjectivesManager.cs,What does the UICurrentObjectivesManager class do when it receives the OnCurrentObjectiveUpdate event?,"When the UICurrentObjectivesManager class receives the OnCurrentObjectiveUpdate event, it checks if the message is empty. If it's empty, the UI element is hidden; otherwise, it shows the message and updates the UI element's text."
UICurrentObjectivesManager.cs,What happens when the UICurrentObjectivesManager class is enabled?,"When the UICurrentObjectivesManager class is enabled, it subscribes to the OnCurrentObjectiveUpdate event, which allows it to listen for updates related to current objectives."
UICurrentObjectivesManager.cs,What happens when the UICurrentObjectivesManager class is disabled?,"When the UICurrentObjectivesManager class is disabled, it unsubscribes from the OnCurrentObjectiveUpdate event, which prevents it from listening for further updates related to current objectives."
UICurrentObjectivesManager.cs,What is the purpose of the currentObjectiveText field?,The currentObjectiveText field is a reference to the TextMeshProUGUI component which displays the current objective message.
UICurrentObjectivesManager.cs,Where is the UICurrentObjectivesManager class located in the Unity project's scene hierarchy?,This information is not available in the provided code snippet.
UICurrentObjectivesManager.cs,Which events does the UICurrentObjectivesManager class subscribe to?,The UICurrentObjectivesManager class subscribes to the OnCurrentObjectiveUpdate event.
UICurrentObjectivesManager.cs,What is the purpose of the Start method in the UICurrentObjectivesManager class?,"The Start method is called when the game object is initialized. In this case, it hides the UI element by setting it inactive."
UICurrentObjectivesManager.cs,How does the UICurrentObjectivesManager class determine whether to show or hide the UI element for displaying current objectives?,"The UICurrentObjectivesManager class checks if the message is empty. If the message is empty, it hides the UI element; otherwise, it shows the message and updates the UI element's text."
UICurrentObjectivesManager.cs,What is the responsibility of the UiEventHub class mentioned in the code?,This information is not available in the provided code snippet.
UICurrentObjectivesManager.cs,"UICurrentObjectivesManager calls a function when current objective is changed, what's its name?"," ```csharp
private void CurrentObjectiveUpdate(string message) {
    //if message is empty, hide the ui element
    if (message == """") {
        currentObjectiveText.transform.parent.gameObject.SetActive(false);
        return;
    }

    //show the message
    currentObjectiveText.transform.parent.gameObject.SetActive(true);
    currentObjectiveText.text = message;
}
``` "
UICurrentObjectivesManager.cs,What's the name of the function that executes when UICurrentObjectivesManager is enabled in 'UICurrentObjectivesManager.cs' ?," ```csharp
private void OnEnable() {
    //subscribing (listening) to some events
    UiEventHub.OnCurrentObjectiveUpdate += CurrentObjectiveUpdate;
}
``` "
UICurrentObjectivesManager.cs,What's the name of the function that executes when UICurrentObjectivesManager is disabled in 'UICurrentObjectivesManager.cs' ?," ```csharp
private void OnDisable() {
    //unsubscribing to some events
    UiEventHub.OnCurrentObjectiveUpdate -= CurrentObjectiveUpdate;
}
``` "
UICurrentObjectivesManager.cs,What is the code used to hide the UI element in 'UICurrentObjectivesManager.cs' ?," ```csharp
currentObjectiveText.transform.parent.gameObject.SetActive(false);
``` "
UICurrentObjectivesManager.cs,What is the code used to show the UI element in 'UICurrentObjectivesManager.cs' ?," ```csharp
currentObjectiveText.transform.parent.gameObject.SetActive(true);
``` "
UICurrentObjectivesManager.cs,What is the code used to update the UI text with the message in 'UICurrentObjectivesManager.cs' ?," ```csharp
currentObjectiveText.text = message;
``` "
UICurrentObjectivesManager.cs,How does UICurrentObjectivesManager check if the message is empty in 'UICurrentObjectivesManager.cs' ?," ```csharp
if (message == """") {
    //hide the ui element
    currentObjectiveText.transform.parent.gameObject.SetActive(false);
    return;
}
``` "
UICurrentObjectivesManager.cs,"In 'UICurrentObjectivesManager.cs', what event is listened to when a current objective is changed?"," ```csharp
UiEventHub.OnCurrentObjectiveUpdate
``` "
UICurrentObjectivesManager.cs,What's the name of the component's field used to hold the text that will be updated in 'UICurrentObjectivesManager.cs' ?," ```csharp
[SerializeField] private TextMeshProUGUI currentObjectiveText;
``` "
UICurrentObjectivesManager.cs,What is the code used to subscribe to events in 'UICurrentObjectivesManager' ?," ```csharp
UiEventHub.OnCurrentObjectiveUpdate += CurrentObjectiveUpdate;
``` "
UiHintManager.cs,what is the responsibility of the UiHintManager class?,"UiHintManager is responsible for the hint messages that are displayed on the UI. It listens to different events that happen in the game and updates the UI accordingly by showing or hiding hints, and changing the text displayed on the UI."
UiHintManager.cs,What happens when the UiHintManager class is enabled?,"When the UiHintManager class is enabled, it subscribes to specific events using the UiEventHub.OnMainHint += OnMainHint; This allows the class to listen for changes in the main hint and respond accordingly."
UiHintManager.cs,What happens when the UiHintManager class is disabled?,"When the UiHintManager class is disabled, it unsubscribes from specific events using the UiEventHub.OnMainHint -= OnMainHint; This ensures that the class no longer listens for changes in the main hint and will not respond to them."
UiHintManager.cs,What does the mainHintText variable in the UiHintManager class represent?,The mainHintText variable is a reference to a TextMeshProUGUI component in the UI. It is used to display the main hint message on the UI.
UiHintManager.cs,What is the purpose of the Start method in the UiHintManager class?,"The Start method is called when the UiHintManager class is first initialized. It is used to initialize the UI by hiding the main hint text initially, ensuring that no hints are displayed until necessary."
UiHintManager.cs,"What event is listened to in the UiHintManager class, and what is the corresponding method that handles it?","The UiEventHub.OnMainHint event is listened to in the UiHintManager class. When this event is triggered, the OnMainHint method in the UiHintManager class is called to handle the event."
UiHintManager.cs,What is the purpose of the OnMainHint method in the UiHintManager class?,"The OnMainHint method in the UiHintManager class is responsible for updating the UI when the main hint message changes. It checks if the message is empty. If it is, it hides the main hint text. Otherwise, it shows the main hint text and sets its text to the provided message."
UiHintManager.cs,How does the UiHintManager class manage hints?,"The UiHintManager class manages hints by subscribing to events using the UiEventHub.OnMainHint += OnMainHint; This allows it to listen for changes in the main hint. When the main hint changes, it updates the UI accordingly by showing or hiding the main hint text, and setting the text displayed on the UI to the new hint message."
UiHintManager.cs,When does the UiHintManager class become active?,"The UiHintManager class becomes active when it is enabled. This can happen through scripting or through the Unity editor. When the class is enabled, it subscribes to the necessary events using the UiEventHub.OnMainHint += OnMainHint; and starts listening for changes in the main hint."
UiHintManager.cs,What happens when the UiHintManager class is disabled?,"When the UiHintManager class is disabled, it unsubscribes from the events it was listening to using the UiEventHub.OnMainHint -= OnMainHint; This ensures that the class no longer listens for changes in the main hint and will not respond to them."
UiHintManager.cs,"In 'UiHintManager.cs', where is the object to display the hints initialized?"," ```csharp
[SerializeField] private TextMeshProUGUI mainHintText;
``` "
UiHintManager.cs,"In 'UiHintManager.cs', what happens when OnMainHint is called?"," ```csharp
if (message == """") {
  mainHintText.transform.parent.gameObject.SetActive(false);
  return;
}
``` "
UiHintManager.cs,"In 'UiHintManager.cs', how is the hint message set in the UI?"," ```csharp
mainHintText.text = message;
``` "
UiHintManager.cs,"In 'UiHintManager.cs', how is the UI element to show hints hidden?"," ```csharp
mainHintText.transform.parent.gameObject.SetActive(false);
``` "
UiHintManager.cs,"In 'UiHintManager.cs', what event is subscribed to in OnEnable?"," ```csharp
UiEventHub.OnMainHint += OnMainHint;
``` "
UiHintManager.cs,"In 'UiHintManager.cs', what event is unsubscribed from in OnDisable?"," ```csharp
UiEventHub.OnMainHint -= OnMainHint;
``` "
UiHintManager.cs,"In 'UiHintManager.cs', when is the hint UI shown?"," ```csharp
if (message != """") {
  mainHintText.transform.parent.gameObject.SetActive(true);
}
``` "
UiHintManager.cs,"In 'UiHintManager.cs', where is the OnDisable method called?"," ```csharp
private void OnDisable() {
  //unsubscribing to some events
  UiEventHub.OnMainHint -= OnMainHint;
}
``` "
UiHintManager.cs,"In 'UiHintManager.cs', what is the function of the OnMainHint method?"," ```csharp
void OnMainHint(string message) {
  //if message is empty, hide the ui element
  if (message == """") {
    mainHintText.transform.parent.gameObject.SetActive(false);
    return;
  }

  //show the hint
  mainHintText.transform.parent.gameObject.SetActive(true);
  mainHintText.text = message;
}
``` "
UiHintManager.cs,"In 'UiHintManager.cs', where is the OnEnable method called?"," ```csharp
private void OnEnable() {
  //subscribing (listening) to some events
  UiEventHub.OnMainHint += OnMainHint;
}
``` "
BeastAttack.cs,write the entire class of BeastAttack.cs,"```csharp
 using Cinemachine;
using DG.Tweening;
using UnityEngine;

/*
 * Beast.BeastAttack
 * manages the beast attack behaviour
 */
public class BeastAttack : MonoBehaviour {
    [SerializeField] private float strength = 10;
    [SerializeField] private AudioSource audioSource;
    [SerializeField] private AudioClip attackAudioClip;
    [SerializeField] private CinemachineImpulseSource impulseSource;
    [SerializeField] private BeastManager beastManager;

    private Collider _collider;
    public bool IsOnCoolDown => !_collider.enabled;

    private void Awake() {
        _collider = GetComponent<Collider>();
    }

    //when colliding with something, check if it is the player, if it is, hit the player.
    private void OnTriggerEnter(Collider other) {
        Debug.Log(""hit "" + other.name);

        // cant' hit player if beast is escaping
        if (beastManager.CurrentState.State == BeastManager.State.Escaping) return;

        //check if the player is hit
        if (other.TryGetComponent<PlayerKnockBack>(out PlayerKnockBack playerKnockBack)) {
            Vector3 pushDir = other.transform.position - transform.position;

            //send event to player behaviour event hub. broadcast that the player got hit
            PlayerBehaviourEventHub.PlayerGotHit();

            //when the beast hits the player, the player is pushed back
            playerKnockBack.AddForce(pushDir * strength);
            _collider.enabled = false;
            audioSource.PlayOneShot(attackAudioClip);
            impulseSource.GenerateImpulse();

            //reset cooldown
            DOTween.Sequence().AppendInterval(2).AppendCallback(() => { _collider.enabled = true; });
        }
    }
} 
```"
BeastKillsPlayerSequenceAnimator.cs,write the entire class of BeastKillsPlayerSequenceAnimator.cs,"```csharp
 using UnityEngine;
using UnityEngine.Playables;

/*
 * Beast.BeastKillsPlayerSequenceAnimator
 * manages the beast killing player animation sequence
 */
public class BeastKillsPlayerSequenceAnimator : MonoBehaviour {
    [SerializeField] private PlayableDirector director;

    // called by DeathRespawnManager when the player is killed. activates the animation sequence
    public void StartSequence(Vector3 position, Quaternion rotation) {
        // set the director position and rotation to the player position and rotation, activate and play it
        director.transform.position = position;
        director.transform.rotation = rotation;
        director.gameObject.SetActive(true);

        director.Play();
    }


    // called by DeathRespawnManager when the player clicks on the respawn button. deactivates the animation sequence
    public void OnRespawnClicked() {
        director.gameObject.SetActive(false);
    }
} 
```"
BeastManager.cs,write the entire class of BeastManager.cs,"```csharp
 using System;
using DG.Tweening;
using UnityEngine;
using UnityEngine.AI;

/*
 * Beast.BeastManager
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState
 * BeastManager.cs is the main class of the beast, it manages the state of the beast and the transitions between them
 * BeastManager is a singleton (SingletonMonoBehaviour)
 */
public class BeastManager : SingletonMonoBehaviour<BeastManager> {
    // BeastManager.State is an enum containing all the states, each child of BeastState.cs must have one of these
    public enum State {
        Sleep,
        OnTarget,
        Roaming,
        RoamingOnTarget,
        Escaping,
        Killing
    }

    [SerializeField] private Transform player;
    [SerializeField] private Transform head;

    //navMeshAgent is used to control the beast movement, it is disabled at the beginning and is enabled when the beast is at BeastSpawnOnMeshPos
    [SerializeField] private NavMeshAgent navMeshAgent;

    //all the beast states
    [SerializeField] private BeastStateSleep _sleepState;
    [SerializeField] private BeastStateScaping _scapingState;
    [SerializeField] private BeastStateOnTarget _onTargetState;
    [SerializeField] private BeastStateRoaming _roamingState;
    [SerializeField] private BeastStateKilling _killingState;

    //layer mask for ray casting to find the player
    [SerializeField] private LayerMask findingPlayerRayLayerMask;

    //beast hideout
    private Transform _beastSleepPos;

    public static Transform BeastSleepPos {
        get => Instance._beastSleepPos;
        set {
            Instance._beastSleepPos = value;
            Instance.transform.position = value.position;
        }
    }

    //beast spawn position of the level, must be on the navMeshSurface so that navMeshAgent can control it
    public static Transform BeastSpawnOnMeshPos;

    // a list of all the beast roaming positions in the level - beast visits them one by one
    public static Transform[] BeastRoamingPositions;

    public BeastState CurrentState { get; private set; }

    protected override void Awake() {
        base.Awake();

        //beast is not active at the beginning
        gameObject.SetActive(false);
    }


    private void Start() {
        // initialize all the beast states
        _sleepState.Init(transform, player, head, navMeshAgent, ChangeState, findingPlayerRayLayerMask);
        _scapingState.Init(transform, player, head, navMeshAgent, ChangeState, findingPlayerRayLayerMask);
        _onTargetState.Init(transform, player, head, navMeshAgent, ChangeState, findingPlayerRayLayerMask);
        _roamingState.Init(transform, player, head, navMeshAgent, ChangeState, findingPlayerRayLayerMask);
        _killingState.Init(transform, player, head, navMeshAgent, ChangeState, findingPlayerRayLayerMask);

        //set the initial state to State.Sleep
        CurrentState = _sleepState;
    }

    //change the beast state (changing the beast state is only possible from here, this method is private but passed to beast states as a C# Action)
    private void ChangeState(State state) {
        //broadcast LevelEventHub.BeastStateUpdate 
        LevelEventHub.BeastStateUpdate(state);
        var temp = CurrentState.State;
        Debug.Log(state);

        //update CurrentState accordingly 
        CurrentState = state switch {
            State.Sleep => _sleepState,
            State.OnTarget => _onTargetState,
            State.Roaming => _roamingState,
            State.Escaping => _scapingState,
            State.Killing => _killingState,
            _ => throw new ArgumentOutOfRangeException(nameof(state), state, null)
        };

        //activate new state and pass the previous state to it
        CurrentState.OnStateActivated(temp);
    }


    private void Update() {
        CurrentState.Update();
    }


    // called by PowerOutageBeastReleaseManager.cs when power is out, it actives the beast, moves it to BeastSpawnOnMeshPos and sets the state to State.Roaming
    [ContextMenu(""ActivateBeast"")]
    public void ActivateBeast() {
        gameObject.SetActive(true);

        //manually move the beast to BeastSpawnOnMeshPos so that it can be controlled by navMeshAgent of Unity
        transform.DOMove(BeastSpawnOnMeshPos.position, 1f).OnComplete(() => {
            //when at BeastSpawnOnMeshPos, active the navMeshAgent and change the state to State.Roaming
            navMeshAgent.enabled = true;
            ChangeState(State.Roaming);
        });
    }

    //called by PlayerHealthEnded when beast hits player but player has no health, it changes the state to State.Killing (show tha killing animation)
    public void KillPlayer() {
        ChangeState(State.Killing);
    }


    //when lights are back, change state to State.Escaping
    private void LightsBackOn() {
        ChangeState(State.Escaping);
    }


    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightsBackOn += LightsBackOn;
    }


    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
    }
} 
```"
BeastState.cs,write the entire class of BeastState.cs,"```csharp
 ﻿using System;
using UnityEngine;
using UnityEngine.AI;

/*
 * Beast.States.BeastState
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState
 * BeastState.cs is the base class (abstract class also Serializable too) of the beast states, it contains all the common variables and methods
 */

[Serializable]
public abstract class BeastState {
    // ChangeState() from BeastManager is always passed as changeState, so that the state can change the state of the beast
    protected Action<BeastManager.State> changeState;

    protected Transform player;
    protected Transform head;
    protected NavMeshAgent navMeshAgent;
    protected Transform beastTransform;
    protected LayerMask layerMask;
    protected float normalSpeed;


    // the state of the beast (enum)
    public abstract BeastManager.State State { get; protected set; }

    //injected dependencies
    public void Init(Transform beastTransform, Transform player, Transform head, NavMeshAgent navMeshAgent,
        Action<BeastManager.State> changeState, LayerMask layerMask) {
        // set dependencies
        this.beastTransform = beastTransform;
        this.changeState = changeState;
        this.player = player;
        this.head = head;
        this.navMeshAgent = navMeshAgent;
        this.layerMask = layerMask;

        normalSpeed = navMeshAgent.speed;
    }


    // look at a position
    protected void LookAt(Vector3 pos) {
        //get the direction to look at (in Quaternion)
        var lookVector = pos - head.position;
        var targetRotation = Quaternion.LookRotation(lookVector);

        //lerp the rotation of the head to look at the position
        head.rotation = Quaternion.Slerp(head.rotation, targetRotation, 10 * Time.deltaTime);
    }

    public abstract void Update();

    // called when the state is activated
    public abstract void OnStateActivated(BeastManager.State lastState);
} 
```"
BeastStateKilling.cs,write the entire class of BeastStateKilling.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Beast.States.BeastStateKilling
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState all states are Serializable too
 * killing state : players health is 0 and the beast is killing the player (killing animation is being played, beast must just look at the player and do nothing)
 */

[Serializable]
public class BeastStateKilling : BeastState {
    //state enum
    public override BeastManager.State State { get; protected set; } = BeastManager.State.Killing;


    private float _killAnimationDuration = 4f;
    private float _timeLeft;

    public override void Update() {
        // look at the player and do nothing, then change state to roaming
        LookAt(player.position);
        _timeLeft -= Time.deltaTime;
        if (_timeLeft < 0) {
            changeState(BeastManager.State.Roaming);
        }
    }

    //state is just activated
    public override void OnStateActivated(BeastManager.State lastState) {
        // reset some variables 
        navMeshAgent.speed = normalSpeed;
        _timeLeft = _killAnimationDuration;
        navMeshAgent.ResetPath();
    }
} 
```"
BeastStateOnTarget.cs,write the entire class of BeastStateOnTarget.cs,"```csharp
 ﻿using System;
using UnityEngine;
using UnityEngine.AI;

/*
 * Beast.States.BeastStateOnTarget
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState all states are Serializable too
 * on target state : beast is chasing a target. hearing the player makes beast enter its hunting mode (On target mode) (BeastStateOnTarget.cs) and it will start chasing the player
 * on each update the beast will check if the player is in its line of sight, if so it will start chasing the player's exact position, if no, change state to roaming state (state will skip to RoamingOnTarget)
 */

[Serializable]
public class BeastStateOnTarget : BeastState {
    //how far the beast can see
    [SerializeField] private float eyeSightDistance;

    //if distance to player is more than this and beast can see the player, beast will run to the player
    [SerializeField] private float distanceToPlayerThatBeastRuns;

    //beast attack manager
    [SerializeField] private BeastAttack beastAttack;

    //state enum
    public override BeastManager.State State { get; protected set; } = BeastManager.State.OnTarget;

    private NavMeshPath _lastValidPath;


    //check if the player is in line of sight, if so, start chasing the player's position, if no,change state to roaming state
    public override void Update() {
        LookAt(player.position);
        if (!navMeshAgent.enabled) return;


        //check if there is a valid path to the player, if not, use the last valid path
        NavMeshPath path = new NavMeshPath();
        var isPathValid = navMeshAgent.CalculatePath(player.position, path);
        if (isPathValid) {
            _lastValidPath = path;
        }
        else if (_lastValidPath != null) {
            path = _lastValidPath;
        }

        //check if the player is in sight or beast is on cool down (beast is attacking the player so the player is already be in sight)
        if ((CheckForPlayerInSight() || beastAttack.IsOnCoolDown)) {
            //player is in sight, chase the player
            navMeshAgent.SetPath(path);

            // set the appropriate speed
            if (navMeshAgent.remainingDistance > distanceToPlayerThatBeastRuns)
                navMeshAgent.speed = Constants.BeastFastSpeed;
            else navMeshAgent.speed = normalSpeed;
        }
        else {
            navMeshAgent.speed = normalSpeed;

            //player is not in sight, change state to roaming state, the roaming state will first go to player's last seen position then start roaming (a behaviour known as RoamingOnTarget)
            changeState(BeastManager.State.Roaming);
        }
    }


    //check if the player is in the beasts line of sight
    private bool CheckForPlayerInSight() {
        //set the direction to look at (from beast to player) (player position - beast position)
        RaycastHit hit;
        Vector3 direction = (player.position - new Vector3(0, 0.5f, 0)) - beastTransform.position;

        Debug.DrawRay(beastTransform.position, direction * eyeSightDistance, Color.black);
        //raycast to find the player
        if (Physics.Raycast(beastTransform.position, direction, out hit, eyeSightDistance, layerMask)) {
            //check if what the ray hit is the player
            if (hit.collider.CompareTag(""Player"")) {
                return true;
            }
        }

        //player is not in sight
        return false;
    }

    //state is just activated
    public override void OnStateActivated(BeastManager.State lastState) {
        //sanity check the normalSpeed
        normalSpeed = navMeshAgent.speed;
    }
} 
```"
BeastStateRoaming.cs,write the entire class of BeastStateRoaming.cs,"```csharp
 ﻿using System;
using StarterAssets;
using UnityEngine;

/*
 * Beast.States.BeastStateRoaming
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState all states are Serializable too
 * roaming state : beast is roaming around the site. beast will look at the roaming points and will go to them one by one
 * when the power is out, the beast will enter roaming state(from sleep state BeastStateSleep) and will start roaming around the site
 * if previous state was on target(BeastStateOnTarget), beast will go to the player's last seen position then start roaming
 */

[Serializable]
public class BeastStateRoaming : BeastState {
    [SerializeField] private float walkHearRadius = 5f;
    [SerializeField] private float runHearRadius = 10f;
    [SerializeField] private float eyeSightDistance;
    private float detectionAngle = 45f;

    private Vector3 _currentPoint;
    private int _currentPointIndex;

    //state enum
    public override BeastManager.State State { get; protected set; } = BeastManager.State.Roaming;


    //check for player in sight or player making sound, if no keep roaming
    public override void Update() {
        LookAt(_currentPoint);
        if (!navMeshAgent.enabled) return;

        //check if the player is in sight
        if (CheckForPlayerInSight()) {
            //player is in sight, change state to on target state
            changeState(BeastManager.State.OnTarget);
            return;
        }

        //check if the player is making sound
        if (CheckForPlayerFootstepSound()) {
            //player is making sound, roam to player's last heard position (enter a hidden sub state RoamingOnTarget)
            LevelEventHub.BeastStateUpdate(BeastManager.State.RoamingOnTarget);
            _currentPoint = player.position;
        }
        else if (navMeshAgent.velocity == Vector3.zero && navMeshAgent.remainingDistance < 5f) {
            //beast reached the current roaming point, get a new roaming point
            Debug.Log(""beast new roaming position"");
            UpdateDestination();
        }

        //set the navMeshAgent destination to the current roaming point
        navMeshAgent.SetDestination(_currentPoint);
    }

    //check for player footstep sound, crouching makes no sound, walking makes some sound, running makes more sound.
    private bool CheckForPlayerFootstepSound() {
        switch (FirstPersonController.PlayerSpeed) {
            case <= Constants.PlayerSpeedCrouch:
                //player is crouching, beast cant hear it
                return false;
            case < Constants.PlayerSpeedRun:
                //player is walking
                return CheckForSoundProximity(walkHearRadius);
            default:
                //player is running
                return CheckForSoundProximity(runHearRadius);
        }


        //check if the player is the beasts hear radius
        bool CheckForSoundProximity(float hearRadius) {
            var distance = Vector3.Distance(beastTransform.position, player.position);

            if (distance < hearRadius) {
                //beast heard the player
                Debug.Log(
                    $""beast heard the player at hear radius : {hearRadius} at speed {FirstPersonController.PlayerSpeed}"");

                //increase the detection angle to 90 degrees (beast field of view)
                detectionAngle = 90;
                return true;
            }

            //player is not in the beasts hear radius
            return false;
        }
    }

    //check if the player is in the beasts line of sight
    private bool CheckForPlayerInSight() {
        //calculate the direction to look at (from beast to player) (player position - beast position)
        RaycastHit hit;
        Vector3 direction = (player.position - new Vector3(0, 0.5f, 0)) - beastTransform.position;

        Debug.DrawRay(beastTransform.position, direction * eyeSightDistance, Color.black);
        Debug.DrawRay(beastTransform.position, beastTransform.forward.normalized * eyeSightDistance, Color.black);


        //raycast to find the player
        if (Physics.Raycast(beastTransform.position, direction, out hit, eyeSightDistance, layerMask)) {
            //check if what the ray hit is the player
            if (hit.collider.CompareTag(""Player"")) {
                //check if the player is also in the beasts field of view
                var angle = Vector3.Angle(direction, beastTransform.forward);
                Debug.Log(""saw player angel "" + angle);
                if (angle < detectionAngle) {
                    //player is insight and in the beasts field of view
                    Debug.Log(""beast saw player"");
                    return true;
                }
            }
        }

        //player is not in sight or not in the beasts field of view
        return false;
    }


    //state is just activated - set correct roaming position
    public override void OnStateActivated(BeastManager.State lastState) {
        if (lastState != BeastManager.State.OnTarget) {
            //previous state was not on target, beast is roaming to a new position
            UpdateDestination();
            Debug.Log(""beast woke up"");
        }
        else {
            //previous state was on target, beast is roaming to player's last seen position (enter a hidden sub state RoamingOnTarget)
            LevelEventHub.BeastStateUpdate(BeastManager.State.RoamingOnTarget);
            Debug.Log(""Roaming to player position"");

            //increase the detection angle to 90 degrees (beast field of view)
            detectionAngle = 90;

            //current roaming point is player's last seen position(current position)
            _currentPoint = player.position;
        }
    }

    //called when new roaming position is needed
    private void UpdateDestination() {
        //reset the detection angle to 45 degrees (beast field of view)
        detectionAngle = 45;

        //send event to update and broadcast the state
        LevelEventHub.BeastStateUpdate(BeastManager.State.Roaming);

        //update the current roaming point to the next point in the array
        _currentPointIndex++;
        if (_currentPointIndex >= BeastManager.BeastRoamingPositions.Length) _currentPointIndex = 0;
        _currentPoint = BeastManager.BeastRoamingPositions[_currentPointIndex].position;
    }
} 
```"
BeastStateScaping.cs,write the entire class of BeastStateScaping.cs,"```csharp
 ﻿using System;

/*
 * Beast.States.BeastStateScaping
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState all states are Serializable too
 * escaping state (BeastStateScaping.cs) : beast is escaping to its hiding place. when the beast is out and the player brings the power back on, the beast will escape to its hiding place, upon reaching its hiding place the beast will enter sleep state
 */

[Serializable]
public class BeastStateScaping : BeastState {
    //state enum
    public override BeastManager.State State { get; protected set; } = BeastManager.State.Escaping;


    public override void Update() {
        LookAt(beastTransform.forward);

        //check if the beast reached its hiding place
        if (navMeshAgent.remainingDistance < 3.1f) {
            //beast reached its hiding place, change state to sleep
            changeState(BeastManager.State.Sleep);
            return;
        }


        //set the destination to the beast's spawn position (it is near the hideout)
        navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
    }

    //state just activated - go to the beast's hideout position
    public override void OnStateActivated(BeastManager.State lastState) {
        //set the destination to the beast's spawn position (it is near the hideout)
        navMeshAgent.SetDestination(BeastManager.BeastSpawnOnMeshPos.position);
        //set the navMeshAgent speed to fast(beast runs to its hiding place)
        navMeshAgent.speed = Constants.BeastFastSpeed;
    }
} 
```"
BeastStateSleep.cs,write the entire class of BeastStateSleep.cs,"```csharp
 ﻿using System;
using DG.Tweening;

/*
 * Beast.States.BeastStateSleep
 * Beast is implemented as a custom made state machine, each state is a class that inherits from BeastState all states are Serializable too
 * sleep state : beast is not active. when the power is on, the beast will be in sleep state and will not be active
 */

[Serializable]
public class BeastStateSleep : BeastState {
    //state enum
    public override BeastManager.State State { get; protected set; } = BeastManager.State.Sleep;

    public override void Update() {
        LookAt(BeastManager.BeastSleepPos.position);
    }

    //state is just activated - move beast to hideout and deactivate it
    public override void OnStateActivated(BeastManager.State lastState) {
        //reset some variables and deactivate the navMeshAgent component
        navMeshAgent.speed = normalSpeed;
        navMeshAgent.enabled = false;

        //move the beast to its hideout position, out of the player's sight and deactivate it there
        beastTransform.DOMove(BeastManager.BeastSleepPos.position, 1f).SetEase(Ease.InCubic).OnComplete((() => {
            beastTransform.gameObject.SetActive(false);
        }));
    }
} 
```"
GlobalEventHub.cs,write the entire class of GlobalEventHub.cs,"```csharp
 using System;

/*
 * EventHubs.GlobalEventHub
 * EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
 * each event has two parts:
 * - first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
 * any class can subscribe to the event by adding a method to the event delegate
 * public static event Action eventName;
 * - second we have the method that triggers the event, which is a static method that invokes the event delegate
 * any class can trigger the event by calling the static method
 * public static void EventName() => eventName?.Invoke();
 * GlobalEventHub has global game events
 */

public static class GlobalEventHub {
    //game start event called by GameStarter.cs
    public static event Action OnGameStart;
    public static void GameStart() => OnGameStart?.Invoke();
} 
```"
LevelEventHub.cs,write the entire class of LevelEventHub.cs,"```csharp
 ﻿using System;

/*
 * EventHubs.LevelEventHub
 * EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
 * each event has two parts:
 * - first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
 * any class can subscribe to the event by adding a method to the event delegate
 * public static event Action eventName;
 * - second we have the method that triggers the event, which is a static method that invokes the event delegate
 * any class can trigger the event by calling the static method
 * public static void EventName() => eventName?.Invoke();
 * LevelEventHub has inside Level related events
 */

public static class LevelEventHub {
    // power core inserted event called by PowerCoreObject.cs when the power core is fully inserted into the power station, method parameters: power core id
    public static event Action<int> OnPowerCoreInserted;
    public static void PowerCoreInserted(int id) => OnPowerCoreInserted?.Invoke(id);

    // power core ejected event called by PowerCoreObject.cs when the power core is ejected from the power station,method parameters: power core id
    public static event Action<int> OnPowerCoreEjected;
    public static void PowerCoreEjected(int id) => OnPowerCoreEjected?.Invoke(id);


    //called by LevelLightsManager.cs when the lights go out
    public static event Action OnLightsOut;
    public static void LightsOut() => OnLightsOut?.Invoke();


    //called by LevelLightsManager.cs when the lights come back on
    public static event Action OnLightsBackOn;
    public static void LightsBackOn() => OnLightsBackOn?.Invoke();


    //called by LightGunLight.cs when the lightObject Light type gets updated, either new light was injected or the light was sucked out, method parameters: lightObjects id, the new light type
    public static event Action<int, LightColor> OnLightGunLightInjected;

    public static void LightGunLightInjected(int id, LightColor lightType) =>
        OnLightGunLightInjected?.Invoke(id, lightType);


    // called by BeastManager.cs or its states when state is changed, method parameters: beast state
    public static event Action<BeastManager.State> OnBeastStateUpdate;
    public static void BeastStateUpdate(BeastManager.State state) => OnBeastStateUpdate?.Invoke(state);


    // called by PlayerDetector.cs of Player Detector objects when the player enters the trigger area, method parameters: detectors id
    public static event Action<int> OnPlayerDetectorTriggered;
    public static void PlayerDetectorTriggered(int id) => OnPlayerDetectorTriggered?.Invoke(id);


    // called by PowerSwitch.cs when the power switch is activated, method parameters: power switch id
    public static event Action<int> OnPowerSwitchActivated;
    public static void PowerSwitchActivated(int id) => OnPowerSwitchActivated?.Invoke(id);


    // called by CollectableInteractable.cs when the player collects a collectable,method parameters: collectable id
    public static event Action<int> OnPlayerCollectedCollectable;
    public static void PlayerCollectedCollectable(int id) => OnPlayerCollectedCollectable?.Invoke(id);
} 
```"
PlayerBehaviourEventHub.cs,write the entire class of PlayerBehaviourEventHub.cs,"```csharp
 using System;


/*
 * EventHubs.PlayerBehaviourEventHub
 * EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
 * each event has two parts:
 * - first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
 * any class can subscribe to the event by adding a method to the event delegate
 * public static event Action eventName;
 * - second we have the method that triggers the event, which is a static method that invokes the event delegate
 * any class can trigger the event by calling the static method
 * public static void EventName() => eventName?.Invoke();
 * PlayerBehaviourEventHub has player related events
 */

public static class PlayerBehaviourEventHub {

    //called by GrabbableObjects.cs when the player interacts with a grabbable object, method parameters: object
    //PlayerHoldObjectsManager.cs listens to this event to grab/ungrab the object
    public static event Action<GrabbableObjects> OnGrabbableObjectInteracted;
    public static void GrabbableObjectInteracted(GrabbableObjects obj) => OnGrabbableObjectInteracted?.Invoke(obj);
    
    
    //called by GrabbableObjects.cs when the object is fully grabbed (player fully grabbed an object)
    public static event Action OnPlayerGrabbedAnObject;
    public static void PlayerGrabbedAnObject() => OnPlayerGrabbedAnObject?.Invoke();
    
    
    //called by GrabbableObjects.cs when the object is fully unGrabbed (player fully unGrabbed an object)
    public static event Action OnPlayerUnGrabbedAnObject;
    public static void PlayerUnGrabbedAnObject() => OnPlayerUnGrabbedAnObject?.Invoke();


    //called by BeastAttack.cs when the player gets hit by the beast
    public static event Action OnPlayerGotHit;
    public static void PlayerGotHit() => OnPlayerGotHit?.Invoke();
    
    
    //called by PlayerHealthManager.cs when the player health reaches 0
    public static event Action OnPlayerHealthEnded;
    public static void PlayerHealthEnded() => OnPlayerHealthEnded?.Invoke();
    
    
    //called by DeathRespawnManager.cs when the player fully respawns
    public static event Action OnPlayerRespawned;
    public static void PlayerRespawned() => OnPlayerRespawned?.Invoke();

} 
```"
UiEventHub.cs,write the entire class of UiEventHub.cs,"```csharp
 ﻿using System;

/*
 * EventHubs.UiEventHub
 * EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
 * each event has two parts:
 * - first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
 * any class can subscribe to the event by adding a method to the event delegate
 * public static event Action eventName;
 * - second we have the method that triggers the event, which is a static method that invokes the event delegate
 * any class can trigger the event by calling the static method
 * public static void EventName() => eventName?.Invoke();
 * UiEventHub has Ui events
 */

public static class UiEventHub {
    
    //called by InteractableObject.cs when player is looking at it and it has a hint message, method parameters: hint text
    public static event Action<string> OnMainHint;
    public static void MainHint(string message) => OnMainHint?.Invoke(message);
    
    
    //current main objective of the game, method parameters: hint text
    //for now it is only called by PowerSwitchUiHelper.cs when there is an update to the power switches
    public static event Action<string> OnCurrentObjectiveUpdate;
    public static void CurrentObjectiveUpdate(string message) => OnCurrentObjectiveUpdate?.Invoke(message);

} 
```"
FallenToVoidObjectDestroyer.cs,write the entire class of FallenToVoidObjectDestroyer.cs,"```csharp
 using UnityEngine;

/*
 * General.FallenToVoidObjectDestroyer
 * Destroy any object that falls to the void
 */

public class FallenToVoidObjectDestroyer : MonoBehaviour {
    //an object with this component is at the very bottom of any level, if anything hits it, it will be destroyed
    private void OnTriggerEnter(Collider other) {
        Destroy(other.gameObject);
    }
} 
```"
PlayerDetector.cs,write the entire class of PlayerDetector.cs,"```csharp
 using UnityEngine;
using UnityEngine.Events;

/*
 * General.PlayerDetector
 * Detects when player enters its trigger zone and broadcasts an event, used to detect when player passes or enters an area
 */

public class PlayerDetector : MonoBehaviour {
    [SerializeField] private int id;

    //should the object be destroyed after the first trigger?
    [SerializeField] bool oneTime;

    //should broadcast it globally?
    [SerializeField] private bool shoutOnTrigger = true;

    //unity event that can be set in the inspector
    [SerializeField] private UnityEvent onTriggerEnter;

    //when player enters the trigger zone, broadcast a global event and onTriggerEnter event
    private void OnTriggerEnter(Collider other) {
        if (oneTime) Destroy(gameObject);
        if (shoutOnTrigger) LevelEventHub.PlayerDetectorTriggered(id);
        onTriggerEnter?.Invoke();
    }
} 
```"
SimpleLight.cs,write the entire class of SimpleLight.cs,"```csharp
 using UnityEngine;

/*
 * General.SimpleLight
 * manages simple lights, turning them on and off
 * each simple light is a mesh with an emissive material
 * if it has an Unity Light as its child (to make it brighter) it is called a complex light
 */

public class SimpleLight : MonoBehaviour {
    //the material database
    [SerializeField] private LightMaterialDatabaseSO materials;

    private Renderer _meshRenderer;

    //complex light
    private bool _isComplex;
    private Light _additionalLight;

    private void Awake() {
        _meshRenderer = GetComponent<Renderer>();

        //set _isComplex: if the light has a Unity Light child, it is a complex light
        _isComplex = transform.childCount != 0;
        if (_isComplex) _additionalLight = transform.GetComponentInChildren<Light>();
    }

    //turns the light on
    public void TurnOn(LightColor lightType = LightColor.White, bool isForced = true) {
        //if the light is already on, don't turn it on again
        if (!isForced && _meshRenderer.sharedMaterial != materials.Off) return;

        //update the material (from the database)
        var material = materials.GetLightByType(lightType);
        _meshRenderer.sharedMaterial = material;

        //if the light has an additional light, turn it on and set its color
        if (_isComplex) {
            _additionalLight.enabled = true;
            //get the emissive color from the material properties and set it as the additional light color
            Color color = material.GetColor(""_EmissiveColor"");
            _additionalLight.color = color.Normalize();
        }
    }

    //turns the light off
    public void TurnOff() {
        //change the material to the off material
        var material = materials.GetLightByType(LightColor.Off);
        _meshRenderer.sharedMaterial = material;
        //if the light has an additional light, turn it off
        if (_isComplex) _additionalLight.enabled = false;
    }
} 
```"
KitsController.cs,write the entire class of KitsController.cs,"```csharp
 using UnityEngine;
using UnityEngine.AI;

/*
 * Kits.KitsController
 * Manages Kits movement and animation
 * movement is done using navmesh agent, animation is done using 2d blend tree
 */

public class KitsController : MonoBehaviour {
    //movement components
    [SerializeField] private CharacterController characterController;
    [SerializeField] private NavMeshAgent navMeshAgent;
    [SerializeField] private Transform destinations;

    [SerializeField] private Material kitsMaskMaterial;
    [SerializeField] private Animator animator;
    private Vector3 _lastFacing;

    //animator parameters
    private static readonly int Velocity = Animator.StringToHash(""Velocity"");
    private static readonly int RotationVelocity = Animator.StringToHash(""RotationVelocity"");
    private const float KitsRunAnimationConvertedToAgentSpeed = 5.35f;


    //initialization
    void Start() {
        _lastFacing = transform.forward;
        kitsMaskMaterial.SetColor(""_EmissiveColor"", Color.black);
    }

    void Update() {
        UpdateAnimator();
    }

    //update animator parameters (kits animation is a 2d blend tree with parameters: velocity and rotation velocity)
    private void UpdateAnimator() {
        //calculate and normalize velocity
        float velocity = navMeshAgent.velocity.magnitude / KitsRunAnimationConvertedToAgentSpeed;
        //set velocity
        animator.SetFloat(Velocity, velocity);

        //calculate and normalize rotation velocity
        Vector3 currentFacing = transform.forward;
        var currentAngularVelocity =
            Vector3.SignedAngle(currentFacing, _lastFacing, Vector3.up) / (Time.deltaTime * 180); //degrees per second
        _lastFacing = currentFacing;
        //set rotation velocity
        animator.SetFloat(RotationVelocity, currentAngularVelocity);
    }


    //kits starts running to a random destination - set navmesh destination
    [ContextMenu(""go there"")]
    private void GoThere() {
        // navMeshAgent.SetDestination(destinations.GetChild(Random.Range(0,destinations.childCount-1)).position);


        navMeshAgent.SetDestination(destinations.position);
    }

    //when power goes out - lit up kits mask
    private void LightsOut() {
        kitsMaskMaterial.SetColor(""_EmissiveColor"", new Color(17.1483746f, 17.1483746f, 17.1483746f));
    }

    //when power is back - kits mask is no longer lit
    private void LightsBackOn() {
        kitsMaskMaterial.SetColor(""_EmissiveColor"", Color.black);
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightsOut += LightsOut;
        LevelEventHub.OnLightsBackOn += LightsBackOn;
    }

    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightsOut -= LightsOut;
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
    }
} 
```"
LevelLightsManager.cs,write the entire class of LevelLightsManager.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;

/*
 * Level.LevelLightsManager
 * Manages level lights : turns off the power,  when all power switches are activated turns back the power
 */

public class LevelLightsManager : MonoBehaviour {
    //light material database 
    [SerializeField] private LightMaterialDatabaseSO lightMaterialDatabaseSo;

    //different in each level
    [SerializeField] private GameObject emergencyLights;
    [SerializeField] private AudioSource beastScreamSource;
    [SerializeField] private int powerSwitchCount;

    private int _powerSwitchActivated;
    private PowerSwitchUiHelper powerSwitchUiHelper;

    private void Start() {
        powerSwitchUiHelper = new PowerSwitchUiHelper(powerSwitchCount);
    }

    //called by PowerOutageBeastReleaseManager - turns off the power
    public void LightsOut() {
        //play sound and update ui
        beastScreamSource.PlayOneShot(MusicSoundManager.Instance.BeastScream);
        powerSwitchUiHelper.LightsOut();

        //broadcast event
        LevelEventHub.LightsOut();
        GlobalInGameData.IsPowerOn = false;

        //set all emissive materials to 0 emissive(dimmed) (turning off the power)
        foreach (Material lightGunLightMaterial in lightMaterialDatabaseSo.GetAllLightGunLightsExceptOff()) {
            lightGunLightMaterial.DOFloat(0f, ""_MyEmissiveIntensity"", 2f).SetEase(Ease.OutExpo);
        }

        //turn on emergency lights
        emergencyLights.SetActive(true);
    }

    //called when all power switches are activated - brings back the power on
    private void LightsBackOn() {
        //update ui 
        powerSwitchUiHelper.LightsBackOn();
        //broadcast event
        LevelEventHub.LightsBackOn();
        GlobalInGameData.IsPowerOn = true;

        //change all emissive materials that were previously dimmed to full emissive (bringing back the power)
        foreach (Material lightGunLightMaterial in lightMaterialDatabaseSo.GetAllLightGunLightsExceptOff()) {
            lightGunLightMaterial.DOFloat(Constants.LightGunLightEmissionAmount, ""_MyEmissiveIntensity"", 2f)
                .SetEase(Ease.InExpo);
        }

        //turn off emergency lights
        emergencyLights.SetActive(false);
    }

    //called when a power switch is activated - manages activated power switch count to turn back the power or not
    private void OnPowerSwitchActivated(int id) {
        _powerSwitchActivated++;

        //update ui
        powerSwitchUiHelper.PowerSwitchActivated(_powerSwitchActivated);

        //if all power switches are activated - turn back the power
        if (_powerSwitchActivated == powerSwitchCount) {
            LightsBackOn();
            _powerSwitchActivated = 0;
        }
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPowerSwitchActivated += OnPowerSwitchActivated;
    }

    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerSwitchActivated -= OnPowerSwitchActivated;
    }
} 
```"
LevelManager.cs,write the entire class of LevelManager.cs,"```csharp
 ﻿using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;

/*
 * Level.LevelManager
 * Base class for all level managers (is an abstract singleton)
 * manages level - loads next level, unloads current level, sets start positions
 * Holds some level specific fields
 */

public abstract class LevelManager<T> : SingletonMonoBehaviour<T> where T : LevelManager<T> {
    [Header(""Generic Level Fields"")] [SerializeField]
    protected SimpleDoor mainDoor;

    [SerializeField] private AudioClip ambientSound;
    [SerializeField] protected int levelNumber = 1;

    [Header(""Core GamePlay Related"")] 
    [SerializeField] protected Transform mainMenuCameraTransform;
    [Header(""Player Related"")] 
    [SerializeField] protected Transform playerSpawn;
    [SerializeField] protected Transform[] playerRespawns;
    [Header(""Beast Related"")] 
    [SerializeField] protected Transform beastSleepPos;
    [SerializeField] protected Transform beastSpawnOnMeshPos;
    [SerializeField] protected Transform[] beastRoamingPositions;


    protected float _startTime;

    //initialization
    protected override void Awake() {
        base.Awake();

        //inject some level specific dependencies/data
        DeathRespawnManager.PlayerRespawnPositions = playerRespawns;
        BeastManager.BeastSleepPos = beastSleepPos;
        BeastManager.BeastSpawnOnMeshPos = beastSpawnOnMeshPos;
        BeastManager.BeastRoamingPositions = beastRoamingPositions;
        GlobalInGameData.CurrentLevel = levelNumber;

        //if not in debug mode set menu camera position and rotation and set player position and rotation to where it must be at the start
        if (!Constants.DebugMode) {
            GameStarter.Instance.SetMenuCameraPositionAndRotation(mainMenuCameraTransform.position,
                mainMenuCameraTransform.rotation);

            if (!GlobalInGameData.HasLoadedItsFirstLevel) {
                GlobalInGameData.HasLoadedItsFirstLevel = true;

                PlayerManager.Instance.SetInstantPositionRotation(playerSpawn);
            }
        }
    }


    protected virtual void Start() {
        //play ambient sound
        MusicSoundManager.Instance.PlayAmbient(ambientSound);
        _startTime = Time.time;
    }

    //called when a player fully enters the next level
    protected void UnloadLevel() {
        //get middle scene
        var middleScene = SceneManager.GetSceneByName(""Level"" + levelNumber + "".5"");

        //move mainDoor to middle scene to prevent it from being destroyed
        mainDoor.transform.SetParent(middleScene.GetRootGameObjects()[0].transform);

        //unload level
        var operation = SceneManager.UnloadSceneAsync(""Level"" + levelNumber);
        operation.completed += _ => { Resources.UnloadUnusedAssets(); };
    }

    //called when a player exits the level - loads next level
    protected void FinishedAndExitedLevel() {
        //calculate time to beat level and save it
        var totalTimeToBeatLevel = Time.time - _startTime;
        PlayerPrefs.SetFloat(Constants.PlayerPrefsKeys.LevelTime(levelNumber), totalTimeToBeatLevel);

        //lock main door preventing player from re-entering level
        mainDoor.ForceClose();
        mainDoor.Lock();

        //load next level with Coroutine to prevent frame drops
        StartCoroutine(LoadNextLevelAsync());
    }

    // Coroutine to load next level
    IEnumerator LoadNextLevelAsync() {
        //load next level scene
        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(""Level"" + (levelNumber + 1), LoadSceneMode.Additive);
        while (!asyncLoad.isDone) {
            yield return null;
        }
        //scene loaded
    }


    //called when a player detector is triggered - used to detect player exiting level
    protected virtual void PlayerDetectorTriggered(int id) {
        //player exited level but is mid way to next level
        if (id == 8) FinishedAndExitedLevel();
        //player fully entered next level
        if (id == (levelNumber + 1) * 1000) UnloadLevel();
    }


    //called when the game starts - enables player and gameplay ui
    protected virtual void GameStart() {
        PlayerManager.Instance.SetActive(true);
        GamePlayCanvasManager.Instance.EnableGameplayUi();
    }


    protected virtual void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
        GlobalEventHub.OnGameStart += GameStart;
    }


    protected virtual void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
        GlobalEventHub.OnGameStart -= GameStart;
    }
} 
```"
LevelRoomPuzzleMaster.cs,write the entire class of LevelRoomPuzzleMaster.cs,"```csharp
 ﻿/*
 * Level.LevelRoomPuzzleMaster
 * Base abstract class for all puzzle room managers
 * has nothing. just used for cleaner code. forces to implement OnEnable and OnDisable
 */

public abstract class LevelRoomPuzzleMaster {
    public virtual void OnStart() { }
    public abstract void OnEnable();
    public abstract void OnDisable();
} 
```"
LevelSummaryAdapter.cs,write the entire class of LevelSummaryAdapter.cs,"```csharp
 ﻿using TMPro;
using UnityEngine;

/*
 * Level.LevelSummaryAdapter
 * shows previous level summary on level summary screen
 */

public class LevelSummaryAdapter : MonoBehaviour {
    [SerializeField] private int levelNumber;
    [SerializeField] private TextMeshPro totalTime;

    private void Start() {
        //display previous level summary - get it from player prefs
        totalTime.SetText(PlayerPrefs.GetFloat(Constants.PlayerPrefsKeys.LevelTime(levelNumber)).ToString());
    }
} 
```"
PowerOutageBeastReleaseManager.cs,write the entire class of PowerOutageBeastReleaseManager.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Level.PowerOutageBeastReleaseManager
 * Manages power outages and beast release
 * controls forbidden area doors and locks them when power is out
 */

public class PowerOutageBeastReleaseManager : MonoBehaviour {
    [SerializeField] private LevelLightsManager levelLightsManager;
    [SerializeField] private float secondsBetweenPowerOutages = 60 * 5;
    
    [Header(""Forbidden Area"")] 
    [SerializeField] private SimpleDoor[] forbiddenAreaDoors;
    [SerializeField] private Collider[] forbiddenAreaColliders;

    private bool[] _forbiddenAreaDoorsIsLocked;
    private float _timeUntilNextOutage;
    private float _oneSecondCounter;


    private void Start() {
        _timeUntilNextOutage = secondsBetweenPowerOutages;
    }

    //debug method to initiate a power outage - called from inspector
    [ContextMenu(""ZeroOut"")]
    public void ZeroOut() {
        _timeUntilNextOutage = 0;
    }


    private void Update() {
        if (!GlobalInGameData.IsPowerOn) return;

        //custom update rate for performance reasons
        _oneSecondCounter += Time.deltaTime;
        if (_oneSecondCounter > 1) {
            CustomFixedUpdate();
        }
    }

    //custom update rate for performance reasons
    private void CustomFixedUpdate() {
        //decrease time counter until next outage
        _timeUntilNextOutage -= _oneSecondCounter;
        _oneSecondCounter = 0;

        //if time is up and it is ok to cut the power and release the beast(player is not in forbidden area or holding something), do it
        if (_timeUntilNextOutage < 0) {
            if (IsItOkToCutThePowerAndReleaseBeast()) CutPowerAndReleaseBeast();
        }
    }


    //if player is in forbidden area or holding something, do not cut the power
    private bool IsItOkToCutThePowerAndReleaseBeast() {
        return !IsPlayerInsideForbiddenArea() && !GlobalInGameData.IsPlayerHoldingSomething;
    }

    //check if player is inside forbidden area
    private bool IsPlayerInsideForbiddenArea() {
        Vector3 playerPos = PlayerManager.Instance.playerHead.position;

        //check if player is inside any forbidden area . 
        foreach (var forbiddenAreaCollider in forbiddenAreaColliders) {
            //each forbidden area has a box collider. check if player is inside any of them
            if (forbiddenAreaCollider.bounds.Contains(playerPos)) {
                Debug.Log(""time to cut the power but player inside forbidden area"");
                return true;
            }
        }

        return false;
    }

    //cut the power and release the beast
    private void CutPowerAndReleaseBeast() {
        //lock forbidden area doors
        ManagerForbiddenDoors();
        _timeUntilNextOutage = secondsBetweenPowerOutages;

        //turn off the power
        levelLightsManager.LightsOut();

        //release the beast
        BeastManager.Instance.ActivateBeast();
    }


    //lock forbidden area doors and save their previous lock state
    private void ManagerForbiddenDoors() {
        _forbiddenAreaDoorsIsLocked = new bool[forbiddenAreaDoors.Length];
        for (int i = 0; i < forbiddenAreaDoors.Length; i++) {
            //save previous lock state
            _forbiddenAreaDoorsIsLocked[i] = forbiddenAreaDoors[i].IsLocked;
            if (!forbiddenAreaDoors[i].IsLocked) {
                //if door is not locked, force close it and lock it 
                forbiddenAreaDoors[i].ForceClose();
                forbiddenAreaDoors[i].Lock();
            }
        }
    }


    //called when power is back - unlocks previously locked forbidden area doors
    private void LightsBackOn() {
        //unlock all previously locked forbidden area doors
        for (int i = 0; i < forbiddenAreaDoors.Length; i++) {
            if (!_forbiddenAreaDoorsIsLocked[i]) forbiddenAreaDoors[i].Unlock();
        }
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightsBackOn += LightsBackOn;
    }

    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
    }
} 
```"
PowerSwitchUiHelper.cs,write the entire class of PowerSwitchUiHelper.cs,"```csharp
 ﻿/*
 * Level.PowerSwitchUiHelper
 * handles the UI for the power switches
 * it itself is a field in LevelLightsManager
 */

public class PowerSwitchUiHelper {
    //number of power switches in the level
    private readonly int _powerSwitchCount;

    public PowerSwitchUiHelper(int powerSwitchCount) {
        _powerSwitchCount = powerSwitchCount;
    }

    //called by LevelLightsManager.cs when power is turned off
    public void LightsOut() {
        //update ui to show how many power switches are to activate
        UiEventHub.CurrentObjectiveUpdate($""Power Switches : 0 / {_powerSwitchCount}"");
    }

    //called by LevelLightsManager.cs when power is turned back on
    public void LightsBackOn() {
        //update ui and remove current objective text
        UiEventHub.CurrentObjectiveUpdate("""");
    }

    //called by LevelLightsManager.cs when a power switch is activated
    public void PowerSwitchActivated(int powerSwitchActivated) {
        //update activated power switches count in ui
        UiEventHub.CurrentObjectiveUpdate($""Power Switches : {powerSwitchActivated} / {_powerSwitchCount}"");
    }
} 
```"
Level1EventHub.cs,write the entire class of Level1EventHub.cs,"```csharp
 ﻿using System;
/*
 * Level.Level1.Level1EventHub
 * EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
 * each event has two parts:
 * - first we have the event itself, which is a delegate(C# Action) that holds a reference to a method that will be called when the event is triggered
 * any class can subscribe to the event by adding a method to the event delegate
 * public static event Action eventName;
 * - second we have the method that triggers the event, which is a static method that invokes the event delegate
 * any class can trigger the event by calling the static method
 * public static void EventName() => eventName?.Invoke();
 * Level1EventHub has Level1 related events
 */
public static class Level1EventHub {
    
    //called by Lvl1R1ObjectDetector.cs when an object is added or removed from the pool. parameters: object id, is pool full
    public static event Action<int,bool> OnRoom1PoolUpdate;
    public static void Room1PoolUpdate(int id,bool isFull) => OnRoom1PoolUpdate?.Invoke(id,isFull);

    //called by Level1Room4PuzzleMaster.cs when all 4 puzzles are solved
    public static event Action OnAll4PuzzlesAreSolved;
    public static void All4PuzzlesAreSolved() => OnAll4PuzzlesAreSolved?.Invoke();
    
    //called by PlayerHealthManager.cs when player health reaches zero(only in level 1)
    public static event Action OnTeleportToSafety;
    public static void TeleportToSafety() => OnTeleportToSafety?.Invoke();
} 
```"
Level1Manager.cs,write the entire class of Level1Manager.cs,"```csharp
 using System.Threading.Tasks;
using UnityEngine;

/*
 * Level.Level1.Level1Manager
 * Child of LevelManager : LevelManager loads next level, unloads current level, sets start positions. LevelManager is Singleton
 * Holds references(basically a hub) to Level1PuzzleMaster(puzzle manager), Lvl1EventFirstBeastSpawn(manages beast spawn event in this level), SafePlaceTeleporter(teleports player to a safe place when its health reaches zero), playerWakeUpCameraAnimator
 */

public class Level1Manager : LevelManager<Level1Manager> {
    
    
    [Header(""Specific Level Fields"")] [SerializeField] private Level1PuzzleMaster level1PuzzleMaster;
    [SerializeField] private Lvl1EventFirstBeastSpawn lvl1EventFirstBeastSpawn;
    [SerializeField] private SafePlaceTeleporter safePlaceTeleporter;
    [SerializeField] private Animator playerWakeUpCameraAnimator;


    protected override void Start() {
        base.Start();
        level1PuzzleMaster.OnStart();
    }

    //when game starts, this method is called. It starts player wake up animation
    protected override void GameStart() => GameStartTask();

    //async method for player wake up animation
    private async Task GameStartTask() {
        if (Constants.DebugMode) {
            //if debug mode is on, skip player wake up animation
            Destroy(playerWakeUpCameraAnimator.gameObject);
            PlayerWokeUp();
            return;
        }

        //lock cursor and start player wake up animation
        Cursor.lockState = CursorLockMode.Locked;
        playerWakeUpCameraAnimator.gameObject.SetActive(true);

        playerWakeUpCameraAnimator.SetTrigger(""Started"");
        await Task.Delay(5000);

        //disable player wake up animation and activate player and gameplay UI
        playerWakeUpCameraAnimator.gameObject.SetActive(false);
        PlayerWokeUp();
    }

    //when power is back on, this method is called. It unlocks main door
    private void LightsBackOn() {
        mainDoor.Unlock();
    }

    //at the start of level 1 player wakes up. This method is called when player wakes up. It enables player and gameplay UI
    private void PlayerWokeUp() {
        //activate player and gameplay UI
        PlayerManager.Instance.SetActive(true);
        GamePlayCanvasManager.Instance.EnableGameplayUi();
        Lvl1FriendManager.Instance.Level1Started();
    }

    protected override void OnEnable() {
        base.OnEnable();
        //subscribing (listening) to some events and calling OnEnable on some classes
        level1PuzzleMaster.OnEnable();
        lvl1EventFirstBeastSpawn.OnEnable();
        LevelEventHub.OnLightsBackOn += LightsBackOn;
        safePlaceTeleporter.OnEnable();
    }


    protected override void OnDisable() {
        base.OnDisable();
        //unsubscribing to some events and calling OnDisable on some classes
        level1PuzzleMaster.OnDisable();
        lvl1EventFirstBeastSpawn.OnDisable();
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
        safePlaceTeleporter.OnDisable();
    }
} 
```"
Level1PuzzleMaster.cs,write the entire class of Level1PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level1.Level1PuzzleMaster
 * a hub for all puzzle room managers (children of LevelRoomPuzzleMaster) in level 1
 * all LevelRoomPuzzleMaster and this class are Serializable and some of their fields are set in inspector
 * it itself is a field in Level1Manager
 */

[Serializable]
public class Level1PuzzleMaster {
    [SerializeField] private Level1Room0PuzzleMaster level1Room0PuzzleMaster;
    [SerializeField] private Level1Room1PuzzleMaster level1Room1PuzzleMaster;
    [SerializeField] private Level1Room2PuzzleMaster level1Room2PuzzleMaster;
    [SerializeField] private Level1Room3PuzzleMaster level1Room3PuzzleMaster;
    [SerializeField] private Level1Room4PuzzleMaster level1Room4PuzzleMaster;

    //called from Level1Manager - calls OnStart of all puzzle room managers
    public void OnStart() {
        level1Room0PuzzleMaster.OnStart();
        level1Room1PuzzleMaster.OnStart();
        level1Room2PuzzleMaster.OnStart();
        level1Room4PuzzleMaster.OnStart();
        level1Room3PuzzleMaster.OnStart();
    }

    //called from Level1Manager - calls OnEnable of all puzzle room managers
    public void OnEnable() {
        level1Room0PuzzleMaster.OnEnable();
        level1Room1PuzzleMaster.OnEnable();
        level1Room2PuzzleMaster.OnEnable();
        level1Room4PuzzleMaster.OnEnable();
        level1Room3PuzzleMaster.OnEnable();
    }

    //called from Level1Manager - calls OnDisable of all puzzle room managers
    public void OnDisable() {
        level1Room0PuzzleMaster.OnDisable();
        level1Room1PuzzleMaster.OnDisable();
        level1Room2PuzzleMaster.OnDisable();
        level1Room4PuzzleMaster.OnDisable();
        level1Room3PuzzleMaster.OnDisable();
    }
} 
```"
Level1RoomPuzzleMaster.cs,write the entire class of Level1RoomPuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level1.Level1RoomPuzzleMaster
 * Child of LevelRoomPuzzleMaster. all puzzle room managers in level 1 inherit from this class and implement their own puzzle logic
 */

[Serializable]
public abstract class Level1RoomPuzzleMaster : LevelRoomPuzzleMaster {
    //each puzzle in level1 has a puzzle indicator(SimpleLight) that turns on after puzzle is solved
    [SerializeField] protected SimpleLight puzzleIndicator;

    //a list of LightGunLights that are turned on after puzzle is solved(mostly hallway lights)
    [SerializeField] protected LightGunLight[] turnedOnAfterPuzzle;

    //each puzzle in level1 has a main door and a side door. when puzzle is completed, side door is unlocked and main door of the next puzzle is unlocked
    [SerializeField] protected SimpleDoor puzzleMainDoor,
        puzzleSideDoor;
} 
```"
Lvl1EventFirstBeastSpawn.cs,write the entire class of Lvl1EventFirstBeastSpawn.cs,"```csharp
 ﻿using System;
using DG.Tweening;
using UnityEngine;
using Object = UnityEngine.Object;

/*
 * Level.Level1.Lvl1EventFirstBeastSpawn
 * this class is used to spawn the beast for the first time in the game
 * it handles the entire process of the first beast spawn : activating the player detectors, cutting the power, spawning the beast, teleporting the player to the safe room
 * it is Serializable so the fields can be set in the inspector.
 * it itself is a field in Level1Manager
 */

[Serializable]
public class Lvl1EventFirstBeastSpawn {
    //the player detectors that are activated after all 4 puzzles are solved. they are used to spawn the beast
    [SerializeField] private GameObject playerDetectorRight, playerDetectorLeft;

    //the level lights manager that is used to cut the power
    [SerializeField] private LevelLightsManager levelLightsManager;

    //the doors in the safe room(explaining room)
    [SerializeField] private SimpleDoor room0Door1, room0Door2;

    //the teleport point in the explaining room (safe room)
    [SerializeField] private Transform explainingRoomTeleportPoint;


    //called when all 4 puzzles are solved. it activates the player detectors
    private void All4PuzzlesAreSolved() {
        playerDetectorRight.SetActive(true);
        playerDetectorLeft.SetActive(true);
    }

    //called when player enters any of the player detectors.it initiate the first ever beast spawn in the game, it spawns the beast and teleports the player to the safe room
    private void PlayerDetectorTriggered(int id) {
        //check if it was the right detector that was triggered
        if (id != 0) return;
        //it was.  destroy the detectors
        if (playerDetectorRight) Object.Destroy(playerDetectorRight);
        if (playerDetectorLeft) Object.Destroy(playerDetectorLeft);

        //cut the power (turn off all lights)
        levelLightsManager.LightsOut();

        //spawn the beast after 2 seconds
        DOTween.Sequence().AppendInterval(2f).AppendCallback((() => { BeastManager.Instance.ActivateBeast(); }));

        //close the safe doors and lock them
        room0Door1.ForceClose();
        room0Door2.ForceClose();
        room0Door1.Lock();
        room0Door2.Lock();

        //teleport the player to the safe room after 8 seconds
        DOTween.Sequence()
            .AppendInterval(8)
            .AppendCallback(() => {
                PlayerManager.Instance.ForceTeleport(explainingRoomTeleportPoint);

                //notify friend manager that the player has been teleported to the safe room
                Lvl1FriendManager.Instance.TeleportedToExplainingRoom();
            })
            ;
    }

    //called when any power switch is activated.
    private void PowerSwitchActivated(int id) {
        // if id == 0, then it's the power switch in the safe room. unlock the doors
        if (id == 0) {
            room0Door1.Unlock();
            room0Door2.Unlock();
        }
    }

    public void OnEnable() {
        //subscribing (listening) to some events
        Level1EventHub.OnAll4PuzzlesAreSolved += All4PuzzlesAreSolved;
        LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
        LevelEventHub.OnPowerSwitchActivated += PowerSwitchActivated;
    }


    public void OnDisable() {
        //unsubscribing to some events
        Level1EventHub.OnAll4PuzzlesAreSolved -= All4PuzzlesAreSolved;
        LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
        LevelEventHub.OnPowerSwitchActivated -= PowerSwitchActivated;
    }
} 
```"
Lvl1FriendManager.cs,write the entire class of Lvl1FriendManager.cs,"```csharp
 using UnityEngine;

/*
 * Level.Level1.Lvl1FriendManager
 * it manages all the friend voice tracks in level 1
 * it plays the correct sound when player enters any of the player detectors
 * it also has some public methods that are called others to play the correct sound
 * it is a singleton class
 * It holds references to all needed tracks asd uses MusicSoundManager to play the sounds
 */

public class Lvl1FriendManager : SingletonMonoBehaviour<Lvl1FriendManager> {
    //all the Friend voice tracks that are played in level 1
    [SerializeField] private AudioClip startClip,
        outOfRoom0Clip,
        beastIsOutClip,
        beastHintClip,
        flashLightClip,
        puzzle1EnterClip,
        puzzle2Clip,
        puzzle3Clip,
        puzzle4EnterClip,
        puzzle1SolvedClip,
        puzzle2SolvedClip,
        puzzle3SolvedClip,
        puzzle4SolvedClip,
        lightsBackOnClip,
        teleportedToExplainingRoomClip;


    //used to keep track of beast state
    private BeastManager.State _lastState = BeastManager.State.Sleep;
    private bool _saidBeastHint;

    //called when player enters any of the player detectors. it plays the correct sound
    private void PlayerDetectorTriggered(int id) {
        //play the corresponding sound
        switch (id) {
            case 0:
                MusicSoundManager.Instance.PlaySoundWithDelay(beastIsOutClip, 2500);
                break;
            case 1:
                MusicSoundManager.Instance.PlaySound(puzzle2Clip);

                break;
            case 2:
                MusicSoundManager.Instance.PlaySound(flashLightClip);

                break;
            case 3:
                MusicSoundManager.Instance.PlaySound(puzzle3Clip);
                break;
            case 4:
                MusicSoundManager.Instance.PlaySound(puzzle3SolvedClip);

                break;
            case 5:
                MusicSoundManager.Instance.PlaySound(puzzle1EnterClip);

                break;
            case 6:
                MusicSoundManager.Instance.PlaySound(puzzle4EnterClip);

                break;
            case 7:
                MusicSoundManager.Instance.PlaySound(outOfRoom0Clip);

                break;
        }
    }

    //called when the beast state is updated. used to play the beast hint sound
    private void OnBeastStateUpdate(BeastManager.State state) {
        //only play the beast hint once when the beast goes from roaming on target to roaming(when player is teleported to the safe(explaining) room)
        if (state == BeastManager.State.Roaming && _lastState == BeastManager.State.RoamingOnTarget &&
            !_saidBeastHint && GlobalInGameData.IsPlayerAlive) {
            MusicSoundManager.Instance.PlaySound(beastHintClip);
            _saidBeastHint = true;
        }
        else {
            _lastState = state;
        }
    }

    //called when the the power is back
    private void LightsBackOn() {
        MusicSoundManager.Instance.PlaySound(lightsBackOnClip);
    }


    //called by Children of Level1RoomPuzzleMaster when puzzle is solved
    public void SolvedPuzzle(int i) {
        //play the correct sound
        switch (i) {
            case 1:
                MusicSoundManager.Instance.PlaySound(puzzle1SolvedClip);
                break;
            case 2:
                MusicSoundManager.Instance.PlaySound(puzzle2SolvedClip);
                break;
            case 4:
                MusicSoundManager.Instance.PlaySound(puzzle4SolvedClip);
                break;
        }
    }

    //called by Level1Manager when level 1 starts
    public void Level1Started() {
        MusicSoundManager.Instance.PlaySound(startClip);
    }

    //called by Lvl1EventFirstBeastSpawn.cs when player is teleported to the explaining room
    public void TeleportedToExplainingRoom() {
        MusicSoundManager.Instance.PlaySound(teleportedToExplainingRoomClip);
    }

    public void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
        LevelEventHub.OnLightsBackOn += LightsBackOn;
        LevelEventHub.OnBeastStateUpdate += OnBeastStateUpdate;
    }


    public void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
        LevelEventHub.OnBeastStateUpdate -= OnBeastStateUpdate;
    }
} 
```"
Lvl1TutorialManager.cs,write the entire class of Lvl1TutorialManager.cs,"```csharp
 using TMPro;
using UnityEngine;

/*
 * Level.Level1.Lvl1TutorialManager
 * it manages all the tutorial messages in level 1, and the player detectors and collectables that trigger those messages
 * it is a singleton class
 */

public class Lvl1TutorialManager : SingletonMonoBehaviour<Lvl1TutorialManager> {
    [SerializeField] private TextMeshProUGUI mainTutorialText;
    [SerializeField] private GameObject[] triggerZones;

    
    [Header(""Tutorial Messages"")]
    [TextArea] [SerializeField]
    private string tutorialMessageLightGun, tutorialMessageFlashLight, tutorialMessagePortal;


    private void Start() {
        //hide the tutorial text and activate the first trigger zone
        HideTutorial();
        triggerZones[0].SetActive(true);
    }

    //called when player enters any of the player detectors.  it shows the tutorial message for that detector
    private void PlayerDetectorTriggered(int id) {
        //show the tutorial message and activate the next trigger zone
        switch (id) {
            case 1:
                triggerZones[1].SetActive(true);
                break;
            case 2:
                ShowTutorial(tutorialMessageFlashLight);
                triggerZones[2].SetActive(true);
                break;
            case 3:
                HideTutorial();
                triggerZones[3].SetActive(true);
                break;
            case 4:
                HideTutorial();
                break;
        }
    }


    //called when player collects a collectable. it shows the tutorial message for that collectable
    private void PlayerCollectedCollectable(int id) {
        //player collectd an item. show the tutorial message for that item. also set the corresponding bool in PlayerGunItemManager to true
        switch (id) {
            case 2:
                PlayerGunItemManager.HasLightGun = true;
                ShowTutorial(tutorialMessageLightGun);
                break;
            case 3:
                PlayerGunItemManager.HasTeleporter = true;
                ShowTutorial(tutorialMessagePortal);
                break;
        }
    }

    private void ShowTutorial(string message) {
        //activate the tutorial text and set the message
        mainTutorialText.transform.parent.gameObject.SetActive(true);
        mainTutorialText.text = message;
    }

    //Hide the tutorial text
    public void HideTutorial() => mainTutorialText.transform.parent.gameObject.SetActive(false);

    public void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPlayerDetectorTriggered += PlayerDetectorTriggered;
        LevelEventHub.OnPlayerCollectedCollectable += PlayerCollectedCollectable;
    }


    public void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPlayerDetectorTriggered -= PlayerDetectorTriggered;
        LevelEventHub.OnPlayerCollectedCollectable -= PlayerCollectedCollectable;
    }
} 
```"
SafePlaceTeleporter.cs,write the entire class of SafePlaceTeleporter.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level1.SafePlaceTeleporter
 * it is Serializable so the fields can be set in the inspector.it itself is a field in Level1Manager
 */

[Serializable]
public class SafePlaceTeleporter {
    [SerializeField] private Transform[] safePlaces;

    //called when player health is 0(this only happens in level 1). it teleports the player to the farthest safe place from the beast
    private void OnTeleportToSafety() {
        //teleport the player to the farthest safe place from the beast
        PlayerManager.Instance.ForceTeleport(PlayerManager.Instance.FarthestPlaceFromPlayer(safePlaces));
    }


    public void OnEnable() {
        //subscribing (listening) to some events
        Level1EventHub.OnTeleportToSafety += OnTeleportToSafety;
    }


    public void OnDisable() {
        //unsubscribing to some events
        Level1EventHub.OnTeleportToSafety -= OnTeleportToSafety;
    }
} 
```"
Level1Room0PuzzleMaster.cs,write the entire class of Level1Room0PuzzleMaster.cs,"```csharp
 ﻿using System;

/*
 * Level.Level1.Puzzles.Level1Room0PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the starting pre puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 */

[Serializable]
public class Level1Room0PuzzleMaster : Level1RoomPuzzleMaster {
    
    //detects when power core is inserted into the power station then unlocks the main door
    private void PowerCoreInserted(int i) {
        //if it is the right power core unlock the main door
        if (i == 0) {
            puzzleMainDoor.Unlock();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
} 
```"
Level1Room1PuzzleMaster.cs,write the entire class of Level1Room1PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level1.Puzzles.Level1Room1PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the first puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 * puzzle : player should fill all pools with the right color object, each pool has a different color.if all pools are filled, puzzle is solved and the main door is unlocked
 * this class manages the pools and the main door
 */

[Serializable]
public class Level1Room1PuzzleMaster : Level1RoomPuzzleMaster {
    [SerializeField] protected SimpleDoor puzzle2MainDoor;

    private bool[] _poolsFilled = { false, false, false };


    //called when all pools are filled. unlocks the main door
    private void PuzzleCompleted() {
        //puzzle is solved.
        puzzleMainDoor.Unlock();
        puzzle2MainDoor.Unlock();
        puzzleIndicator.TurnOn(LightColor.Green);
        Lvl1FriendManager.Instance.SolvedPuzzle(1);
    }


    //called when an object is added or removed from the pool. checks if all pools are filled
    private void Room1PoolUpdate(int id, bool isFull) {
        //if all pools are filled, puzzle is solved
        _poolsFilled[id - 1] = isFull;
        if (_poolsFilled[0] && _poolsFilled[1] && _poolsFilled[2]) {
            PuzzleCompleted();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        Level1EventHub.OnRoom1PoolUpdate += Room1PoolUpdate;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        Level1EventHub.OnRoom1PoolUpdate -= Room1PoolUpdate;
    }
} 
```"
Level1Room2PuzzleMaster.cs,write the entire class of Level1Room2PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level1.Puzzles.Level1Room2PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the second puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 * puzzle : player can inject lights with the lightGun, if all lights are injected correctly, puzzle is solved and the main door is unlocked
 * it manages the lights and wires that show the current status of the puzzle
 */

[Serializable]
public class Level1Room2PuzzleMaster : Level1RoomPuzzleMaster {
    [SerializeField] protected SimpleDoor puzzle3SideDoor;

    //wires that show the current status of the puzzle
    [Header(""Wires"")] [SerializeField] private MeshRenderer[] wires;
    [SerializeField] private Material wireOn, wireOff;

    private bool[] _room2PuzzleStatus = { false, false, false, true, false, false, false, false };

    public override void OnStart() {
        base.OnStart();
        //update the wires to show the current status of the puzzle
        UpdateAllWires();
    }

    //called when all lights are injected correctly. unlocks the main door
    private void PuzzleCompleted() {
        //puzzle is solved.
        foreach (LightGunLight light in turnedOnAfterPuzzle) light.InjectLight(isForced: true);

        puzzleSideDoor.Unlock();
        puzzle3SideDoor.Unlock();
        puzzleIndicator.TurnOn(LightColor.Green);

        Lvl1TutorialManager.Instance.HideTutorial();
        Lvl1FriendManager.Instance.SolvedPuzzle(2);
    }

    //called when a light is injected into the light gun. checks if all lights are injected correctly
    private void LightGunLightInjected(int id, LightColor lightType) {
        //if the light was in this room, check if it was the right color
        switch (id) {
            case 20:
                if (lightType == LightColor.Red) _room2PuzzleStatus[0] = true;
                else _room2PuzzleStatus[0] = false;
                CheckForCompletion();
                break;
            case 21:
                if (lightType == LightColor.Green) _room2PuzzleStatus[1] = true;
                else _room2PuzzleStatus[1] = false;
                CheckForCompletion();
                break;
            case 22:
                if (lightType == LightColor.Blue) _room2PuzzleStatus[2] = true;
                else _room2PuzzleStatus[2] = false;
                CheckForCompletion();
                break;
            case 23:
                if (lightType == LightColor.White) _room2PuzzleStatus[3] = true;
                else _room2PuzzleStatus[3] = false;
                CheckForCompletion();
                break;
            case 24:
                if (lightType == LightColor.Green) _room2PuzzleStatus[4] = true;
                else _room2PuzzleStatus[4] = false;
                CheckForCompletion();
                break;
            case 25:
                if (lightType == LightColor.Red) _room2PuzzleStatus[5] = true;
                else _room2PuzzleStatus[5] = false;
                CheckForCompletion();
                break;
            case 26:
                if (lightType == LightColor.White) _room2PuzzleStatus[6] = true;
                else _room2PuzzleStatus[6] = false;
                CheckForCompletion();
                break;
            case 27:
                if (lightType == LightColor.Blue) _room2PuzzleStatus[7] = true;
                else _room2PuzzleStatus[7] = false;
                CheckForCompletion();
                break;
        }
    }

    //checks if all lights are injected correctly
    private void CheckForCompletion() {
        UpdateAllWires();
        //if all lights are injected correctly, puzzle is solved
        if (_room2PuzzleStatus[0] && _room2PuzzleStatus[1] && _room2PuzzleStatus[2] && _room2PuzzleStatus[3] &&
            _room2PuzzleStatus[4] && _room2PuzzleStatus[5]
            && _room2PuzzleStatus[6] && _room2PuzzleStatus[7]
           ) {
            PuzzleCompleted();
        }
    }

    //updates the wires to show the current status of the puzzle
    private void UpdateAllWires() {
        //each wire is connected to a light. if the light is injected correctly, the wire is on. otherwise it is off
        for (int i = 0; i < wires.Length; i++) {
            wires[i].material = _room2PuzzleStatus[i] ? wireOn : wireOff;
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightGunLightInjected += LightGunLightInjected;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightGunLightInjected -= LightGunLightInjected;
    }
} 
```"
Level1Room3PuzzleMaster.cs,write the entire class of Level1Room3PuzzleMaster.cs,"```csharp
 ﻿using System;
using DG.Tweening;
using UnityEngine;

/*
 * Level.Level1.Puzzles.Level1Room3PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the third puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 * puzzle : player should insert the power core into the power station then teleport outside the cage then main door is unlocked and puzzle is solved
 * this class manages the cage and the main door
 */

[Serializable]
public class Level1Room3PuzzleMaster : Level1RoomPuzzleMaster {
    
    //cage is the main part of this puzzle
    [SerializeField] private Transform cage;

    [SerializeField] private SimpleDoor spawnRoomSideDoor;


    //called when a power core is inserted into the power station. if it was for this room, unlocks the main door but locks the cage
    private void PowerCoreInserted(int id) {
        //if it was for this room, unlock the main door but lock the cage
        if (id == 3) {
            puzzleMainDoor.Unlock();
            spawnRoomSideDoor.Unlock();
            turnedOnAfterPuzzle[0].InjectLight(isForced: true);
            turnedOnAfterPuzzle[1].InjectLight(LightColor.Green, true);
            cage.DOLocalMoveY(0.1106112f, 0.5f);
            puzzleIndicator.TurnOn(LightColor.Green);
        }
    }

    //called when a power core is ejected from the power station. if it was for this room, locks the main door but unlocks the cage
    private void PowerCoreEjected(int id) {
        //if it was for this room, lock the main door but unlock the cage
        if (id == 3) {
            puzzleMainDoor.Lock();
            cage.DOLocalMoveY(1.540611f, 0.5f);
            puzzleIndicator.TurnOn(LightColor.Red);
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;
        LevelEventHub.OnPowerCoreEjected += PowerCoreEjected;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
        LevelEventHub.OnPowerCoreEjected -= PowerCoreEjected;
    }
} 
```"
Level1Room4PuzzleMaster.cs,write the entire class of Level1Room4PuzzleMaster.cs,"```csharp
 ﻿using System;
using DG.Tweening;
using UnityEngine;

/*
 * Level.Level1.Puzzles.Level1Room4PuzzleMaster
 * Child of Level1RoomPuzzleMaster. this class implements the puzzle logic for the forth(last) puzzle room in level 1
 * it is Serializable. it itself is a field in Level1PuzzleMaster
 * puzzle : player should move the glass pieces down by injecting lights with the lightGun then they can insert the power core into the power station then main door is unlocked and puzzle is solved
 * this class manages the glass pieces, lightGun lights, power core insertion and the main door
 */

[Serializable]
public class Level1Room4PuzzleMaster : Level1RoomPuzzleMaster {
    //glass pieces are controlled by the lights and are blocking the power core insertion
    [SerializeField] private Transform[] glass;

    [SerializeField] private SimpleDoor[] doorsToBeOpenedAfterSolving;
    private float downY, upY;

    //called when power core is inserted into the power station
    private void PuzzleCompleted() {
        //puzzle is solved.
        foreach (LightGunLight light in turnedOnAfterPuzzle) light.InjectLight(isForced: true);
        puzzleMainDoor.Unlock();
        foreach (SimpleDoor door in doorsToBeOpenedAfterSolving) door.Unlock();
        puzzleIndicator.TurnOn(LightColor.Green);

        //puzzle 4 is the last puzzle in level 1. so we call the event that tells the level manager that all puzzles are solved
        Level1EventHub.All4PuzzlesAreSolved();
        Lvl1FriendManager.Instance.SolvedPuzzle(4);
    }

    //called when a light is updated(a light is either injected or sucked from a lightGun light)
    private void LightGunLightInjected(int id, LightColor lightType) {
        //handle the light based on its id
        switch (id) {
            //this light opens the door to this puzzle room
            case 40:
                if (lightType == LightColor.Green && puzzleSideDoor.IsLocked) {
                    puzzleSideDoor.Unlock();
                }

                break;
            //these lights are for the puzzle,they control the glass pieces.
            case 41:
            case 42:
            case 43:
            case 44:
                //get the index of the glass piece that is controlled by this light
                int index = id - 41;
                //if it is green, move it down. if it is off, move it up
                if (lightType == LightColor.Green) {
                    glass[index].DOLocalMoveY(downY, 0.5f);
                }
                else if (lightType == LightColor.Off) {
                    glass[index].DOLocalMoveY(upY, 0.5f);
                }

                break;
        }
    }

    // called when a power core is inserted into the power station. if it was for this room, puzzle is solved
    private void PowerCoreInserted(int id) {
        //if it was for this room, puzzle is solved
        if (id == 4) {
            PuzzleCompleted();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightGunLightInjected += LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;

        //saving the initial y positions of the glass pieces
        downY = glass[0].localPosition.y;
        upY = glass[1].localPosition.y;
    }


    public override void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightGunLightInjected -= LightGunLightInjected;
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
} 
```"
Lvl1R1ObjectDetector.cs,write the entire class of Lvl1R1ObjectDetector.cs,"```csharp
 using UnityEngine;

/*
 * Level.Level1.Puzzles.Lvl1R1ObjectDetector
 * this class is attached to the pools in the first puzzle room in level 1
 * it detects when an object is added or removed from the pool and calls the Room1PoolUpdate event
 */

public class Lvl1R1ObjectDetector : MonoBehaviour {
    
    [SerializeField] private int id;
    [SerializeField] private int targetAmount;

    private int _objectCount;

    //called when an object has entered the trigger zone (pool)
    private void OnTriggerEnter(Collider other) {
        if (other.TryGetComponent<GrabbableObjects>(out GrabbableObjects grabbableObject)) {
            //if the object is for this pool, increase the object count and call the Room1PoolUpdate event
            if (grabbableObject.MetaData == id) {
                _objectCount++;
                //broadcasting (calling) the event
                Level1EventHub.Room1PoolUpdate(id, _objectCount == targetAmount);
            }
        }
    }

    //called when an object has exited the trigger zone (pool)
    private void OnTriggerExit(Collider other) {
        if (other.TryGetComponent<GrabbableObjects>(out GrabbableObjects grabbableObject)) {
            if (grabbableObject.MetaData == id) {
                //if the object is for this pool, decrease the object count and call the Room1PoolUpdate event
                _objectCount--;
                //broadcasting (calling) the event
                Level1EventHub.Room1PoolUpdate(id, false);
            }
        }
    }
} 
```"
KeyGlassCage.cs,write the entire class of KeyGlassCage.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;

/*
 * Level.Level2.KeyGlassCage
 * This class is responsible for the glass cage that holds the keys in level 2. It is a MonoBehaviour
 * It is attached to the glass cage and opens/closes the cage when called
 */

public class KeyGlassCage : MonoBehaviour {
    [SerializeField] private Transform glass;
    [SerializeField] private float closeY, openY;

    // called to open the cage and reveal the key
    public void Open() {
        glass.DOLocalMoveY(openY, 0.5f);
    }

    // called to close the cage and hide the key
    public void Close() {
        glass.DOLocalMoveY(closeY, 0.5f);
    }
} 
```"
Level2MainCoreStationManager.cs,write the entire class of Level2MainCoreStationManager.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level2.Level2MainCoreStationManager
 * level 2 has a main core station that needs 4 power cores(also called keys).
 * the first one is laying around and when inserted, brings up a platform
 * the other 3 are obtained by solving 3 puzzles. when all are inserted, the main door is unlocked
 * this class manages the main core station, the platform, tracks the number of solved puzzles and unlocks the main door when all 3 puzzles are solved
 * it is Serializable so the fields can be set in the inspector.it itself is a field in Level2Manager
 */

[Serializable]
public class Level2MainCoreStationManager {
    [SerializeField] private Animator platformAnimator;
    [SerializeField] private PowerCoreObject[] cores;

    private int _solvedPuzzles;
    private SimpleDoor _mainDoor;


    // called when a power core is inserted
    private void PowerCoreInserted(int id) {
        //if the id is 0, bring up the platform
        //else if the id is 1, 2 or 3, call SolvedPuzzle
        switch (id) {
            case 0:
                BringUpThePlatform();
                break;
            case 1:
                SolvedPuzzle();
                break;
            case 2:
                SolvedPuzzle();
                break;
            case 3:
                SolvedPuzzle();
                break;
        }
    }

    // called when a puzzle key is obtained and inserted
    private void SolvedPuzzle() {
        Lvl2FriendManager.Instance.InsertedKey();

        //if all 3 puzzles are solved, call SolvedAllPuzzles
        _solvedPuzzles++;
        if (_solvedPuzzles == 3) SolvedAllPuzzles();
    }

    // called when all 3 puzzles are solved. it unlocks the main door
    private void SolvedAllPuzzles() {
        _mainDoor.Unlock();
    }

    // called when the first (key)power core is inserted. it brings up the platform
    private void BringUpThePlatform() {
        platformAnimator.SetTrigger(""BringUp"");
        Lvl2FriendManager.Instance.EnteredLevel2Lobby();
    }


    public void OnEnable(SimpleDoor mainDoor) {
        _mainDoor = mainDoor;

        //subscribing (listening) to some events
        LevelEventHub.OnPowerCoreInserted += PowerCoreInserted;

        //setting the cores parent to null so they don't move when the platform moves
        foreach (var core in cores) core.transform.parent = null;
    }


    public void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnPowerCoreInserted -= PowerCoreInserted;
    }
} 
```"
Level2Manager.cs,write the entire class of Level2Manager.cs,"```csharp
 using UnityEngine;

/*
 * Level.Level2.Level2Manager
 * Child of LevelManager : LevelManager loads next level, unloads current level, sets start positions. LevelManager is Singleton
 * Holds references(basically a hub) to Level2PuzzleMaster(puzzle manager), Level2MainCoreStationManager
 * It delegates some events to Level2PuzzleMaster and Level2MainCoreStationManager because they are not MonoBehaviours but this class is.(these methods are chosen in inspector and called when some UnityEvent or UnityAction is invoked)
 */

public class Level2Manager : LevelManager<Level2Manager> {
    [Header(""Specific Level Fields"")] 
    [SerializeField] private Level2PuzzleMaster level2PuzzleMaster;
    [SerializeField] private Level2MainCoreStationManager level2MainCoreStationManager;


    protected override void Start() {
        base.Start();
        level2PuzzleMaster.OnStart();
    }


    //#Start Of Method delegation

    //Puzzle 1 events
    public void OnPuzzle1ButtonPressed() => level2PuzzleMaster.OnPuzzle1ButtonPressed();
    
    //Puzzle 2 events
    public void Puzzle2CheckForCompletion() => level2PuzzleMaster.Puzzle2CheckForCompletion();

    //Puzzle 3 events
    public void Puzzle3KeyHolderLightChanged(int id, LightColor color) =>
        level2PuzzleMaster.Puzzle3KeyHolderLightChanged(id, color);
    public void Stage1PressurePlateChangedFirst(bool isActivated) =>
        level2PuzzleMaster.Stage1PressurePlateChangedFirst(isActivated);
    public void Stage1PressurePlateChangedSecond(bool isActivated) =>
        level2PuzzleMaster.Stage1PressurePlateChangedSecond(isActivated);
    public void Stage2PressurePlateChanged(bool isActivated) =>
        level2PuzzleMaster.Stage2PressurePlateChanged(isActivated);

    //#End Of Method delegation


    protected override void OnEnable() {
        base.OnEnable();
        //calling OnEnable on some classes
        level2PuzzleMaster.OnEnable();
        level2MainCoreStationManager.OnEnable(mainDoor);
    }


    protected override void OnDisable() {
        base.OnDisable();
        //calling OnDisable on some classes
        level2PuzzleMaster.OnDisable();
        level2MainCoreStationManager.OnDisable();
    }
} 
```"
Lvl2FriendManager.cs,write the entire class of Lvl2FriendManager.cs,"```csharp
 ﻿using System.Collections.Generic;
using UnityEngine;

/*
 * Level.Level2.Lvl2FriendManager
 * it manages all the friend voice tracks in level 2
 * it plays the correct sound when player enters any of the player detectors
 * it also has some public methods that are called others to play the correct sound
 * it is a singleton class
 * It holds references to all needed tracks asd uses MusicSoundManager to play the sounds
 */

public class Lvl2FriendManager : SingletonMonoBehaviour<Lvl2FriendManager> {
    [SerializeField] private AudioClip enteredLevel2Loader,
        talkAboutLevel1Stats,
        enteredLevel2Lobby,
        foundFirstPowerRoom,
        foundSecondPowerRoom,
        enterPuzzle1,
        midPuzzle2,
        midPuzzle3,
        midPuzzle3PressurePlates,
        heldFirstKey,
        heldSecondKey,
        heldLastKey,
        enteredFirstKey,
        enteredSecondKey,
        enteredThirdKey,
        firstPowerOutage,
        lightsBackOn;

    //used to keep track of held keys
    private List<int> _heldKeys = new();


    //Some tracks are called multiple times but should only be played once
    private void CalledMultipleButPlayOnce(ref AudioClip clip, int delay = 0) {
        //if the clip is null, don't play it. if it's not null, play it and set it to null(we don't want to play it again)
        if (clip) Play(clip, delay);
        clip = null;

        void Play(AudioClip _clip, int _delay) {
            //if delay is 0, play the sound immediately. if it's not 0, play it with delay
            if (delay == 0) MusicSoundManager.Instance.PlaySound(_clip);
            else MusicSoundManager.Instance.PlaySoundWithDelay(_clip, _delay);
        }
    }


    public void EnteredLevel2Loader() => MusicSoundManager.Instance.PlaySound(enteredLevel2Loader);

    public void TalkAboutLevel1Stats() => MusicSoundManager.Instance.PlaySound(talkAboutLevel1Stats);

    public void EnteredLevel2Lobby() => MusicSoundManager.Instance.PlaySound(enteredLevel2Lobby);


    //called when player finds the power room. it plays the correct sound
    public void FoundPowerRoom() {
        //if not null, play the sound then set it to null (we don't want to play it again)
        if (foundFirstPowerRoom) {
            MusicSoundManager.Instance.PlaySound(foundFirstPowerRoom);
            foundFirstPowerRoom = null;
        }
        else MusicSoundManager.Instance.PlaySound(foundSecondPowerRoom);
    }

    //tracks called during puzzles
    public void EnterPuzzle1() => MusicSoundManager.Instance.PlaySound(enterPuzzle1);
    public void MidPuzzle2() => CalledMultipleButPlayOnce(ref midPuzzle2);
    public void MidPuzzle3() => MusicSoundManager.Instance.PlaySound(midPuzzle3);
    public void MidPuzzle3PressurePlates() => CalledMultipleButPlayOnce(ref midPuzzle3PressurePlates, 1000);


    //called when player inserts a key. it plays the correct sound
    public void InsertedKey() {
        //if the key is already inserted, don't play the sound(if not null, play the sound then set it to null)
        if (enteredFirstKey) {
            MusicSoundManager.Instance.PlaySound(enteredFirstKey);
            enteredFirstKey = null;
        }
        else if (enteredSecondKey) {
            MusicSoundManager.Instance.PlaySound(enteredSecondKey);
            enteredSecondKey = null;
        }
        else MusicSoundManager.Instance.PlaySound(enteredThirdKey);
    }


    //called when player holds one of the keys for the first time. it plays the correct sound
    public void HeldKey(PowerCoreObject powerCoreObject) {
        //if the key is already held, don't play the sound
        if (_heldKeys.Contains(powerCoreObject.MetaData)) return;
        _heldKeys.Add(powerCoreObject.MetaData);

        //play the correct sound
        if (heldFirstKey) {
            MusicSoundManager.Instance.PlaySound(heldFirstKey);
            heldFirstKey = null;
        }
        else if (heldSecondKey) {
            MusicSoundManager.Instance.PlaySound(heldSecondKey);
            heldSecondKey = null;
        }
        else MusicSoundManager.Instance.PlaySound(heldLastKey);
    }

    //called when the power is out
    private void LightsOut() => CalledMultipleButPlayOnce(ref firstPowerOutage);


    //called when the the power is back
    private void LightsBackOn() => CalledMultipleButPlayOnce(ref lightsBackOn);


    public void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightsBackOn += LightsBackOn;
        LevelEventHub.OnLightsOut += LightsOut;
    }


    public void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
        LevelEventHub.OnLightsOut -= LightsOut;
    }
} 
```"
PressurePlate.cs,write the entire class of PressurePlate.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;
using UnityEngine.Events;

/*
 * Level.Level2.PressurePlate
 * This class is responsible for pressure plate's behaviour. It is a MonoBehaviour
 * It has a UnityEvent that is invoked when the state of the plate changes.
 * it also tracks the number of objects on the plate and activates/deactivates the plate accordingly.
 */

public class PressurePlate : MonoBehaviour {
    
    // plate is the part of the pressure plate that moves
    [SerializeField] private Transform plate;
    [SerializeField] private float activeY;
    
    // event invoked when the state of the plate changes.
    [SerializeField] UnityEvent<bool> onStateChange;

    // number of objects on the plate
    private int _numberOfObjectsOnThePlate;


    // pressure plate gets activated when something enters its trigger collider
    private void Activate() {
        // move plate to active position and invoke the event
        plate.DOLocalMoveY(activeY, 0.5f);
        onStateChange?.Invoke(true);
    }

    // pressure plate gets deactivated when there is nothing more on the plate
    private void Deactivate() {
        // move plate to inactive position and invoke the event
        plate.DOLocalMoveY(0, 0.5f);
        onStateChange?.Invoke(false);
    }

    // some object enters the trigger collider
    private void OnTriggerEnter(Collider other) {
        Debug.Log(""enter "" + other.name);
        // if there was nothing on the plate, activate it
        if (_numberOfObjectsOnThePlate == 0) {
            Activate();
        }
        _numberOfObjectsOnThePlate++;
    }
    
    // some object exits the trigger collider
    private void OnTriggerExit(Collider other) {
        Debug.Log(""exit "" + other.name);
        _numberOfObjectsOnThePlate--;
        // if there is nothing on the plate anymore, deactivate it
        if (_numberOfObjectsOnThePlate == 0) {
            Deactivate();
        }
    }
} 
```"
Level2Puzzle2PixelPuzzle.cs,write the entire class of Level2Puzzle2PixelPuzzle.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2Puzzle2PixelPuzzle
 * this class implements part of the puzzle logic for the second puzzle in level 2
 * this script is attached to a Grid. the grid has a bunch of pixels(LightGunLight) and each pixel(LightGunLight) should be a certain color for the puzzle to be complete
 * this class manages the grid and the pixels
 * puzzle 2 has three of these Grids each one has its own Level2Puzzle2PixelPuzzle object
 */

public class Level2Puzzle2PixelPuzzle : MonoBehaviour {
    
    //each pixel is a lightGun light
    [SerializeField] private LightGunLight[] pixels;
    //each pixel should be in this color
    [SerializeField] private LightColor[] lightColor;
    //wire shows if the puzzle is completed or not
    [SerializeField] private MeshRenderer wire;
    
    //materials database
    private LightMaterialDatabaseSO _materials;

    public bool IsCompleted { get; private set; }


    private void Start() {
        //get materials database
        _materials = GameManager.Instance.SimpleLightMaterials;
        
        //initialize the wire color
        wire.material = _materials.Red;
    }

    //called when a pixel changes its color
    public void OnPixelChanged() {
        //check for completion
        
        //if any of the pixels is not in the correct color, the puzzle is not completed
        IsCompleted = true;
        for (int i = 0; i < pixels.Length; i++) {
            if (pixels[i].LightType != lightColor[i]) {
                IsCompleted = false;
                break;
            }
        }

        if (IsCompleted) Lvl2FriendManager.Instance.MidPuzzle2();

        // change the wire color
        wire.material = IsCompleted ? _materials.Green : _materials.Red;

        // notify the level2PuzzleMaster that puzzle is changed, check for all puzzles completion
        Level2Manager.Instance.Puzzle2CheckForCompletion();
    }
} 
```"
Level2Puzzle3LastPhaseSubStairsRoomManager.cs,write the entire class of Level2Puzzle3LastPhaseSubStairsRoomManager.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2Puzzle3LastPhaseSubStairsRoomManager
 * this class implements part of the puzzle logic for the last phase of the third(last) puzzle room in level 2
 * there is a power source and it needs a certain type of LightColor to be active, when it is active it also activate a list of SingleStairs
 * last phase of the third(last) puzzle room in level 2 has four of these and each one has its own Level2Puzzle3LastPhaseSubStairsRoomManager object
 */

public class Level2Puzzle3LastPhaseSubStairsRoomManager : MonoBehaviour {
    //the required color for the power source to be active
    [SerializeField] private LightColor requiredColor;

    //the stairs that should be activated when the power source is active
    [SerializeField] private SingleStair[] stairs;

    //called when the light color of the power source changes
    public void PowerSourceLightChanged(int id, LightColor color) {
        // if it is the right color, activate all stairs, else deactivate all stairs
        if (color == requiredColor) {
            Activate();
        }
        else {
            Deactivate();
        }
    }

    private void Activate() {
        //Activate all stairs
        foreach (var stair in stairs) {
            stair.Activate();
        }
    }

    private void Deactivate() {
        //Deactivate all stairs
        foreach (var stair in stairs) {
            stair.Deactivate();
        }
    }
} 
```"
Level2PuzzleMaster.cs,write the entire class of Level2PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2PuzzleMaster
 * a hub for all puzzle room managers (children of LevelRoomPuzzleMaster) in level 2
 * all LevelRoomPuzzleMaster and this class are Serializable and some of their fields are set in inspector. it itself is a field in Level2Manager
 * It delegates some events to puzzle room managers, all the delegated methods are originally called from Level2Manager
 */

[Serializable]
public class Level2PuzzleMaster {
    [SerializeField] private Level2Room1PuzzleMaster level2Room1PuzzleMaster;
    [SerializeField] private Level2Room2PuzzleMaster level2Room2PuzzleMaster;
    [SerializeField] private Level2Room3PuzzleMaster level2Room3PuzzleMaster;

    //called from Level2Manager - calls OnStart of all puzzle room managers
    public void OnStart() {
        level2Room1PuzzleMaster.OnStart();
        level2Room2PuzzleMaster.OnStart();
        level2Room3PuzzleMaster.OnStart();
    }


    //#Start Of Method delegation
    
    //Puzzle 1 events
    public void OnPuzzle1ButtonPressed() => level2Room1PuzzleMaster.OnPuzzle1ButtonPressed();
    
    //Puzzle 2 events
    public void Puzzle2CheckForCompletion() => level2Room2PuzzleMaster.CheckForCompletion();
    
    //Puzzle 3 events
    public void Puzzle3KeyHolderLightChanged(int id, LightColor color) =>
        level2Room3PuzzleMaster.KeyHolderLightChanged(id, color);
    public void Stage1PressurePlateChangedFirst(bool isActivated) =>
        level2Room3PuzzleMaster.Stage1PressurePlateChangedFirst(isActivated);
    public void Stage1PressurePlateChangedSecond(bool isActivated) =>
        level2Room3PuzzleMaster.Stage1PressurePlateChangedSecond(isActivated);
    public void Stage2PressurePlateChanged(bool isActivated) =>
        level2Room3PuzzleMaster.Stage2PressurePlateChanged(isActivated);
    
    //#End Of Method delegation


    //called from Level2Manager - calls OnEnable of all puzzle room managers
    public void OnEnable() {
        level2Room1PuzzleMaster.OnEnable();
        level2Room2PuzzleMaster.OnEnable();
        level2Room3PuzzleMaster.OnEnable();
    }

    //called from Level2Manager - calls OnDisable of all puzzle room managers
    public void OnDisable() {
        level2Room1PuzzleMaster.OnDisable();
        level2Room2PuzzleMaster.OnDisable();
        level2Room3PuzzleMaster.OnDisable();
    }
} 
```"
Level2Room1PuzzleMaster.cs,write the entire class of Level2Room1PuzzleMaster.cs,"```csharp
 ﻿using System;
using System.Collections.Generic;
using DG.Tweening;
using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2Room1PuzzleMaster
 * Child of LevelRoomPuzzleMaster. this class implements the puzzle logic for the first puzzle room in level 2
 * it is Serializable. it itself is a field in Level2PuzzleMaster
 * there are a list of cages. each cage has a light stand. each light stand needs a light type to be opened.
 * puzzle : player should press the button in the middle of the room. if the lights in the light stands are correct, the cages open for a while. 
 * this class manages the cages and the light stands
 */

[Serializable]
public class Level2Room1PuzzleMaster : LevelRoomPuzzleMaster {
    
    //light stand are type of LightGunLight
    [SerializeField] private LightGunLight[] standLights;
    
    //cages are controlled by animation
    [SerializeField] private Animator[] keyCages;
    
    //the light types that should be in the stand lights to open the corresponding cage
    [SerializeField] private LightColor[] lightColors;
    
    //how long should the cages be open
    [SerializeField] private float cageOpenTimeWindow;

    //list of cages that should be closed after a while
    private List<Animator> _shouldBeClosed = new();
    
    
    private static readonly int Change = Animator.StringToHash(""change"");


    //the only button in puzzle 1 is pressed. open the cages if their lights are correct then close them after a while
    public void OnPuzzle1ButtonPressed() {
        //for each cage, if its light type is the same as the corresponding light color in lightColors array then open it using its animator
        for (int i = 0; i < standLights.Length; i++) {
            if (standLights[i].LightType == lightColors[i]) {
                keyCages[i].SetTrigger(Change);
                _shouldBeClosed.Add(keyCages[i]);
            }
        }

        //after a while, close the cages
        DOTween.Sequence()
            .AppendInterval(cageOpenTimeWindow)
            .AppendCallback(() => {
                foreach (Animator keyCage in _shouldBeClosed) keyCage.SetTrigger(Change);
                _shouldBeClosed.Clear();
            });
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
    }

    public override void OnDisable() {
        //unsubscribing to some events
    }
} 
```"
Level2Room2PuzzleMaster.cs,write the entire class of Level2Room2PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2Room2PuzzleMaster
 * Child of LevelRoomPuzzleMaster. this class implements the puzzle logic for the second puzzle room in level 2
 * it is Serializable. it itself is a field in Level2PuzzleMaster
 * puzzle : there are three pixel puzzles(each one is a grid of pixels). each one should have correct pattern of pixels(correct color for each pixel) for the cage to open.
 * this class holds Level2Puzzle2PixelPuzzle references and only checks for completions.the pixel puzzle logic is managed by Level2Puzzle2PixelPuzzle
 */

[Serializable]
public class Level2Room2PuzzleMaster : LevelRoomPuzzleMaster {
    
    
    [SerializeField] private Level2Puzzle2PixelPuzzle leftPuzzle, rightPuzzle, frontPuzzle;
    [SerializeField] private KeyGlassCage keyCage;


    // called when one of the puzzles are changed. checks if all puzzles are completed
    public void CheckForCompletion() {
        //if all puzzles are completed, open the cage
        if (leftPuzzle.IsCompleted && rightPuzzle.IsCompleted && frontPuzzle.IsCompleted) {
            keyCage.Open();
        }
    }

    public override void OnEnable() {
        //subscribing (listening) to some events
    }

    public override void OnDisable() {
        //unsubscribing to some events
    }
} 
```"
Level2Room3PuzzleMaster.cs,write the entire class of Level2Room3PuzzleMaster.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Level.Level2.Puzzles.Level2Room3PuzzleMaster
 * Child of LevelRoomPuzzleMaster. this class implements the puzzle logic for the third(last) puzzle room in level 2
 * it is Serializable. it itself is a field in Level2PuzzleMaster
 * puzzle first phases : player should activate pressure plates to activate the stairs to reach the next phase.
 * puzzle last phase : player should set the right lights for each LightGunLight to open the cage and get the key
 * this class manages the stairs activation, the cage opening and the last phase lights
 */

[Serializable]
public class Level2Room3PuzzleMaster : LevelRoomPuzzleMaster {
    //the cage that should be opened when the puzzle is solved
    [SerializeField] private KeyGlassCage keyGlassCage;

    //these stairs are controlled by Pressure Plates
    [SerializeField] private SingleStair[] stage1PressureStairsFirst, stage1PressureStairsSecond, stage2PressureStairs;

    [Header(""Last Phase"")]
    //each wire shows if the light is the right color or not
    [SerializeField]
    private MeshRenderer[] wires;

    //each light must be lastPhaseLightType for the puzzle to be solved
    [SerializeField] private LightGunLight[] lights;

    //if all lights are this color, puzzle is solved
    [SerializeField] private LightColor lastPhaseLightType;


    //materials database
    private LightMaterialDatabaseSO _simpleMaterials;

    public override void OnStart() {
        base.OnStart();

        //get materials database
        _simpleMaterials = GameManager.Instance.SimpleLightMaterials;

        //initialize the wire colors
        foreach (var meshRenderer in wires) {
            meshRenderer.material = _simpleMaterials.Red;
        }
    }

    public void KeyHolderLightChanged(int id, LightColor color) {
        //when all lights are the right color, puzzle is solved
        var notSolved = false;
        for (int i = 0; i < lights.Length; i++) {
            //if light is the right color, change the wire color to green, else change it to red
            if (lights[i].LightType == lastPhaseLightType) {
                wires[i].material = _simpleMaterials.Green;
            }
            else {
                wires[i].material = _simpleMaterials.Red;
                notSolved = true;
            }
        }

        if (!notSolved) Solved();
    }

    //when puzzle is solved, open the cage
    private void Solved() {
        keyGlassCage.Open();
    }

    // called when state of the Stage1 Pressure Plate changes . stage1PressureStairsFirst are controlled by a Pressure Plate 
    public void Stage1PressurePlateChangedFirst(bool isActivated) {
        Lvl2FriendManager.Instance.MidPuzzle3PressurePlates();

        // if Pressure Plate is active, activate the stairs, else deactivate them
        foreach (var stair in stage1PressureStairsFirst) {
            if (isActivated) stair.Activate();
            else stair.Deactivate();
        }
    }

    // called when state of the Stage1 Pressure Plate changes . stage1PressureStairsSecond are controlled by a Pressure Plate 
    public void Stage1PressurePlateChangedSecond(bool isActivated) {
        // if Pressure Plate is active, activate the stairs, else deactivate them
        foreach (var stair in stage1PressureStairsSecond) {
            if (isActivated) stair.Activate();
            else stair.Deactivate();
        }
    }

    // called when state of Pressure Plate changes . stage2PressureStairs are controlled by a Pressure Plate 
    public void Stage2PressurePlateChanged(bool isActivated) {
        //flip all stairs
        foreach (var stair in stage2PressureStairs) stair.Flip();
    }


    public override void OnEnable() {
        //subscribing (listening) to some events
    }

    public override void OnDisable() {
        //unsubscribing to some events
    }
} 
```"
LightGunDrivenSingleStair.cs,write the entire class of LightGunDrivenSingleStair.cs,"```csharp
 using UnityEngine;

/*
 * Level.Level2.SingleStair.LightGunDrivenSingleStair
 * This class is responsible for the LightGunDrivenSingleStair in level 2. It is a MonoBehaviour and a child of SingleStair
 * stair can be activated/deactivated
 * this special stair is activated when the lightGun light is the required color
 */

public class LightGunDrivenSingleStair : SingleStair {
    // required color of the lightGun light
    [SerializeField] private LightColor requiredLightColor;

    // called when the lightGun light changes its color
    public void OnLightChanged(int id, LightColor lightColor) {
        // if the lightGun light is the required color, activate the stair
        if (lightColor == requiredLightColor) {
            Activate();
        }
        else {
            Deactivate();
        }
    }
} 
```"
SingleStair.cs,write the entire class of SingleStair.cs,"```csharp
 using DG.Tweening;
using UnityEngine;

/*
 * Level.Level2.SingleStair.SingleStair
 * This class is responsible for the single stair in level 2. It is a MonoBehaviour
 * it is also the base class for LightGunDrivenSingleStair
 * single stair can be activated/deactivated 
 */

public class SingleStair : MonoBehaviour {

    [SerializeField] private bool isActive;
    [SerializeField] private Transform stair;
    [SerializeField] private float deActiveY;

    private void Start() {
        // set the initial state of the stair
        if (!isActive) Deactivate();
    }

    public void Activate() {
        // move the stair to active position
        stair.DOLocalMoveY(0,0.5f);
        isActive = true;
    }
    
    public void Deactivate() {
        // move the stair to inactive position
        stair.DOLocalMoveY(deActiveY,0.5f);
        isActive = false;
    }

    public void Flip() {
        // flip the state of the stair
        if (isActive) Deactivate();
        else Activate();
    }
}
 
```"
DeathRespawnManager.cs,write the entire class of DeathRespawnManager.cs,"```csharp
 using DG.Tweening;
using UnityEngine;

/*
 * Player.DeathRespawnManager
 * manages the death and respawn of the player
 * it is a component of the player
 */

public class DeathRespawnManager : MonoBehaviour {
    [SerializeField] private PlayerManager playerManager;

    [Header(""Beast Related"")] [SerializeField]
    private BeastManager beastManager;

    [SerializeField] private BeastKillsPlayerSequenceAnimator beastKillsPlayerSequenceAnimator;

    [Header(""UI Related"")] [SerializeField]
    private Canvas gameOverCanvas;

    //all the player respawn positions in the level. it is set in the level manager when the level is loaded
    public static Transform[] PlayerRespawnPositions;


    [ContextMenu(""Kill Player"")]
    //called when player health ended. manages the death of the player.
    private void PlayerHealthEnded() {
        //set global data
        GlobalInGameData.IsPlayerAlive = false;

        //notify the player manager that the player is dead
        playerManager.Dead();
        playerManager.gameObject.SetActive(false);

        //""beast killing player"" animation setup

        //get ""beast killing player"" animation sequence directors position (it's the player position but y is +1 of beast position)
        var pos = playerManager.transform.position;
        pos.y = beastManager.transform.position.y + 1;

        //start the animation sequence
        beastKillsPlayerSequenceAnimator.StartSequence(pos, playerManager.transform.rotation);

        //notify the beast manager that it is killing the player. changes beast state
        beastManager.KillPlayer();

        //wait 5 seconds(when the animation sequence ends) and show the game over canvas(set ui)
        DOTween.Sequence().AppendInterval(5f).OnComplete(() => {
            //activate the game over canvas and unlock the cursor
            gameOverCanvas.gameObject.SetActive(true);
            Cursor.lockState = CursorLockMode.None;
        });
    }

    //called when the player clicks on the respawn button. manages the respawn of the player.
    public void OnRespawnClicked() {
        //deactivate the ""beast killing player"" animation sequence
        beastKillsPlayerSequenceAnimator.OnRespawnClicked();

        //set global data
        GlobalInGameData.IsPlayerAlive = true;

        //lock the cursor
        Cursor.lockState = CursorLockMode.Locked;

        //hide the game over canvas
        gameOverCanvas.gameObject.SetActive(false);

        //manually set the player position and rotation to the spawn position and activate it
        var playerSpawnPosition = GetSpawnPosition();
        playerManager.transform.position = playerSpawnPosition.position;
        playerManager.transform.rotation = playerSpawnPosition.rotation;
        playerManager.gameObject.SetActive(true);

        //broadcast event
        PlayerBehaviourEventHub.PlayerRespawned();
    }

    // get the spawn position of the player
    private Transform GetSpawnPosition() {
        if (PlayerRespawnPositions.Length == 1) return PlayerRespawnPositions[0];
        //return the farthest position from the beast
        return playerManager.FarthestPlaceFromPlayer(PlayerRespawnPositions);
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        PlayerBehaviourEventHub.OnPlayerHealthEnded += PlayerHealthEnded;
    }

    private void OnDisable() {
        //unsubscribing to some events
        PlayerBehaviourEventHub.OnPlayerHealthEnded -= PlayerHealthEnded;
    }
} 
```"
PlayerHealthManager.cs,write the entire class of PlayerHealthManager.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Player.PlayerHealthManager
 * Manages player health and regen and broadcasts events when player is dead
 * when player is hit, health is decreased by 1 and when player is not at full health, health regenerates after a certain time
 */

public class PlayerHealthManager : MonoBehaviour {
    
    //regen timer
    private float _untilNextHealUp;
    
    //current health
    private int _healthAmount;

    //max health and regen time (in seconds)
    private readonly int _maxHealth = 4, _timeToHealUp = 10;

    private void Awake() {
        //initializing variables
        _healthAmount = _maxHealth;
    }

    private void Update() {
        if (_healthAmount == _maxHealth) return;

        //if not at full health, manage regen timer and when it reaches 0, heal up
        _untilNextHealUp -= Time.deltaTime;
        if (_untilNextHealUp < 0) {
            HealUp();
        }
    }

    //called when player is not at full health. Regenerates health
    private void HealUp() {
        _healthAmount += 1;
        
        //resetting regen timer
        if (_healthAmount != _maxHealth) _untilNextHealUp = _timeToHealUp;

        //updating health UI
        FullScreenEffectsManager.Instance.HealthLowHealthEffect(_healthAmount);
    }

    //called when player gets hit. manages health and if player is dead
    private void PlayerGotHit() {
        //reset regen timer
        _untilNextHealUp = _timeToHealUp;
        
        //decreasing health
        _healthAmount -= 1;
        
        //checking if player is dead
        if (_healthAmount == 0) {
            if (Constants.Immortal) {
                _healthAmount = 1;
            }
            else {
                if (GlobalInGameData.CurrentLevel == 1) {
                    //Only in level 1 player can't die and is teleported to safety
                    Level1EventHub.TeleportToSafety();
                    _healthAmount = 1;
                }
                //player is dead. broadcasting event
                else PlayerBehaviourEventHub.PlayerHealthEnded();
            }
        }
        
        //updating health UI
        FullScreenEffectsManager.Instance.HealthLowHealthEffect(_healthAmount);
    }

    //called when player respawns. Resets health
    private void PlayerRespawned() {
        //resetting health
        _healthAmount = _maxHealth;
        FullScreenEffectsManager.Instance.ResetHealth();
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        PlayerBehaviourEventHub.OnPlayerGotHit += PlayerGotHit;
        PlayerBehaviourEventHub.OnPlayerRespawned += PlayerRespawned;
    }


    private void OnDisable() {
        //unsubscribing to some events
        PlayerBehaviourEventHub.OnPlayerGotHit -= PlayerGotHit;
        PlayerBehaviourEventHub.OnPlayerRespawned -= PlayerRespawned;
    }
} 
```"
PlayerKnockBack.cs,write the entire class of PlayerKnockBack.cs,"```csharp
 using DG.Tweening;
using UnityEngine;

/*
 * Player.PlayerKnockBack
 * manages the knock back behaviour of the player. when the player is hit, it is pushed back
 * the knock back is applied directly to the player on each frame. it is decreased over time
 */

public class PlayerKnockBack : MonoBehaviour {
    
    //impact is the direction of the knock back. it is directly applied to the player on each frame. it is decreased over time
    private Vector3 impact = Vector3.zero;
    
    //character controller is used to move the player(apply the knock back)
    private CharacterController characterController;

    private void Awake() {
        characterController = GetComponent<CharacterController>();
    }


    private void Update() {
        if(impact == Vector3.zero)return;

        // apply the knock back directly to the player based on the impact
        characterController.Move(impact * Time.deltaTime);
        
        //decrease the knock back over time - update the impact
        impact = Vector3.Lerp(impact, Vector3.zero, 5 * Time.deltaTime);
        
        // stop the knock back from being applied forever
        if (impact.sqrMagnitude < 5) {
            impact = Vector3.zero;
        }
    }

    //called by BeastAttack. sets the direction of the knock back
    public void AddForce(Vector3 pushDir) {
        impact = pushDir;
    }

    //called by DeathRespawnManager. if the last hit killed the player. stop knock back for 1 second
    public void Dead() {
        //disable knock back for 1 second
        impact=Vector3.zero;
        enabled = false;
        //enable knock back after 1 second
        DOTween.Sequence().AppendInterval(1).OnComplete((() => {
            impact=Vector3.zero;
            enabled = true;
        }));


    }
} 
```"
PlayerManager.cs,write the entire class of PlayerManager.cs,"```csharp
 using StarterAssets;
using UnityEngine;

/*
 * Player.PlayerManager
 * Manages some player behaviour functionality and mostly a hub for other player behaviour components
 * Delegates some of its functionality to other components
 * PlayerManager is a singleton (SingletonMonoBehaviour)
 */

public class PlayerManager : SingletonMonoBehaviour<PlayerManager> {
    [field: SerializeField] public CharacterController characterController { get; private set; }
    [field: SerializeField] public Transform playerHead { get; private set; }


    // player behaviour components
    private PlayerGunItemManager playerGunItemManager;
    private FirstPersonController _firstPersonController;
    private PlayerKnockBack _playerKnockBack;

    protected override void Awake() {
        base.Awake();

        //set components
        playerGunItemManager = GetComponent<PlayerGunItemManager>();
        _firstPersonController = GetComponent<FirstPersonController>();
        _playerKnockBack = GetComponent<PlayerKnockBack>();

        //if not in debug mode set player inactive
        if (!Constants.DebugMode) {
            SetActive(false);
        }
    }

    private void Start() {
        //lock cursor
        Cursor.lockState = CursorLockMode.Locked;
    }

    //called by DeathRespawnManager. delegates to FirstPersonController and PlayerKnockBack
    public void Dead() {
        _firstPersonController.Dead();
        _playerKnockBack.Dead();
    }

    //instantly teleports player to destination. delegates to PlayerGunItemManager
    public void ForceTeleport(Transform destination) => playerGunItemManager.ForceTeleport(destination);

    //called by LevelManager, sets player position and rotation to where it must be at the start
    public void SetInstantPositionRotation(Transform playerSpawn) {
        transform.SetPositionAndRotation(playerSpawn.position, playerSpawn.rotation);
    }

    //Called by DeathRespawnManager. from a list of positions, returns the farthest place from the player
    public Transform FarthestPlaceFromPlayer(Transform[] places) {
        //cache player position
        var playerPos = Instance.transform.position;

        //find the farthest place from the player
        float farthestDistance = 0;
        Transform farthestPlace = null;
        foreach (Transform place in places) {
            var distance = Vector3.Distance(playerPos, place.position);
            if (distance > farthestDistance) {
                farthestDistance = distance;
                farthestPlace = place;
            }
        }


        return farthestPlace;
    }

    //Called by LevelManager, clean way to set player active
    public void SetActive(bool isActive) => gameObject.SetActive(isActive);
} 
```"
PlayerGunItem.cs,write the entire class of PlayerGunItem.cs,"```csharp
 ﻿using System;
using DG.Tweening;
using UnityEngine;

/*
 * Player.GunItems.PlayerGunItem
 * Player has three Items, a LightGun, a Teleporter and a FlashLight
 * each item has its own manager. they are all derived from(child of) PlayerGunItem.cs
 * PlayerGunItem.cs is the base class (abstract class also Serializable too) of the player items, it contains all the common variables and methods
 * each item has its own GameObjects and hand animations
 * this class also manages players hand, bringing it up and down, activating and deactivating it, and setting its animation triggers.
 */

[Serializable]
public abstract class PlayerGunItem {
    
    //animator of the hand
    [SerializeField] protected Animator handAnimator;
    
    //the item holder is the parent of all the items gameObjects. it is a child of the hand
    [SerializeField] protected GameObject itemHolder;

    //is the item active(equipped)?
    protected bool _isActive;
    
    //hand positions
    private float _handVisibleY = -1.594f;
    private float _handInVisibleY = -1.848f;

    //the animation trigger of the item. it is set in the child classes
    protected abstract string _animationSubStateTrigger { get; }

    //called by PlayerGunItemManager when player equips an item. 
    public virtual void ActivateItem() {
        //stop all hand animations
        handAnimator.transform.DOKill();

        //move hand up if needed
        BringHandUpIfNeeded();

        //play the animation of the item
        handAnimator.SetTrigger(_animationSubStateTrigger);

        //activate the itemHolder
        _isActive = true;
        itemHolder.SetActive(true);
    }
    
    
    //if hand is down(no item was equipped before). move hand up
    private void BringHandUpIfNeeded() {
        //check if hand is down
        if (!handAnimator.gameObject.activeSelf || handAnimator.transform.localPosition.y != _handVisibleY) {
            
            //sanity check for hand position. (if hand was inactive, it should be at the bottom)
            if (!handAnimator.gameObject.activeSelf && handAnimator.transform.localPosition.y == _handVisibleY) {
                //Hand was inactive, reset its position before moving it up
                handAnimator.transform.DOLocalMoveY(_handInVisibleY, 0f);
            }

            //activate hand and move it up
            handAnimator.gameObject.SetActive(true);
            handAnimator.transform.DOLocalMoveY(_handVisibleY, 0.5f);
        }
    }

    //called by PlayerGunItemManager when player unEquips all items. moves hand down
    public virtual void PutHandAway(bool instant = false) {
        //stop all hand animations
        handAnimator.transform.DOKill();

        //move hand down
        if (instant) {
            handAnimator.transform.DOLocalMoveY(_handInVisibleY, 0);
            handAnimator.gameObject.SetActive(false);
        } else {
            handAnimator.transform.DOLocalMoveY(_handInVisibleY, 0.5f).OnComplete((() => {
                handAnimator.gameObject.SetActive(false);
            }));
        }
    }

    //called by PlayerGunItemManager when the item is not active anymore. deactivates the item
    public virtual void NotActiveAnymore() {
        _isActive = false;
        itemHolder.SetActive(false);
    }

    //called by PlayerGunItemManager on start. initializes the item
    public virtual void Init() { }

    //called by PlayerGunItemManager when left click is pressed. has the main functionality of the item
    public abstract void LeftClicked();

    //called by PlayerGunItemManager when right click is pressed. has the secondary functionality of the item
    public abstract void RightClicked();

    //called by PlayerGunItemManager when player respawns. resets the item
    public virtual void Reset() { }
} 
```"
PlayerGunItemManager.cs,write the entire class of PlayerGunItemManager.cs,"```csharp
 using StarterAssets;
using UnityEngine;

/*
 * Player.GunItems.PlayerGunItemManager
 * Player has three Items, a LightGun, a Teleporter and a FlashLight
 * This class manages player items. their activation(equip) and deactivation(unEquip) and delegates input actions to them
 * it is a hub for all player items managers
 * each item has its own manager. they are all derived from(child of) PlayerGunItem
 */

public class PlayerGunItemManager : MonoBehaviour {
    
    //enum for player items
    enum PlayerItems {
        Empty = 0,
        LightGun = 1,
        TeleportGun = 2,
        Flashlight = 5
    }

    [Header(""Player Items"")] 
    [SerializeField] private PlayerLightGunManager playerLightGunManager;
    [SerializeField] private PlayerTeleportManager playerTeleportManager;
    [SerializeField] private PlayerFlashLightManager playerFlashLightManager;

    [Header(""Hand"")] 
    [SerializeField] private Animator handAnimator;

    //current active item
    private PlayerItems _currentActiveItem = PlayerItems.Empty;
    private PlayerGunItem _currentActiveGunItem;

    //Item availability (are they unlocked?)
    public static bool HasLightGun = false, HasTeleporter = false;

    private void Start() {
        //init all items
        playerLightGunManager.Init();
        playerTeleportManager.Init();
        playerFlashLightManager.Init();

        handAnimator.gameObject.SetActive(false);

        //if in debug mode, player has all items
        if (Constants.DebugMode) {
            HasLightGun = true;
            HasTeleporter = true;
        }
    }

    private void Update() {
        //delegate update
        playerFlashLightManager.Update();
        if (_currentActiveItem == PlayerItems.LightGun) {
            playerLightGunManager.Update();
        }
    }

    //called when player presses an item activation input(keys to equip an item). activates the item
    private void OnItemAction(int itemIndex) {
        //is the item already active?
        if (_currentActiveItem == (PlayerItems)itemIndex) return;

        //update current active item(enum - _currentActiveItem)
        _currentActiveItem = (PlayerItems)itemIndex;

        //unEquip the current item(object)
        _currentActiveGunItem?.NotActiveAnymore();

        //update current active item(object - _currentActiveGunItem)
        switch (itemIndex) {
            case 0:
                //Q -> unEquip
                //just unEquip the current item
                _currentActiveGunItem?.PutHandAway();
                _currentActiveGunItem = null;

                break;
            case 1:
                //1 -> LightGun
                if (!HasLightGun) return;
                _currentActiveGunItem = playerLightGunManager;
                break;
            case 2:
                //2 -> Teleporter
                if (!HasTeleporter) return;
                _currentActiveGunItem = playerTeleportManager;

                break;
            case 5:
                //F -> FlashLight
                _currentActiveGunItem = playerFlashLightManager;

                break;
            default:
                break;
        }

        //equip the new item
        _currentActiveGunItem?.ActivateItem();
    }

    //called when player left clicks. delegates to current active item
    private void OnLeftClickedAction() {
        if (_currentActiveItem == PlayerItems.Empty) return;
        _currentActiveGunItem.LeftClicked();
    }

    //called when player right clicks. delegates to current active item
    private void OnRightClickedAction() {
        if (_currentActiveItem == PlayerItems.Empty) return;
        _currentActiveGunItem.RightClicked();
    }

    //called when player grabs an object. stops listening to item activation inputs
    private void OnPlayerGrabbedAnObject() {
        //stop listening to item activation inputs
        StarterAssetsInputs.OnItemAction -= OnItemAction;

        //if player had an item equipped . empty the hand when player grabs an object
        if (_currentActiveItem != PlayerItems.Empty) {
            _currentActiveGunItem.NotActiveAnymore();
            _currentActiveGunItem.PutHandAway();
            _currentActiveItem = PlayerItems.Empty;
        }
    }

    //called when player ungrabs an object.
    private void OnPlayerUnGrabbedAnObject() {
        //start listening to item activation inputs
        StarterAssetsInputs.OnItemAction += OnItemAction;
    }

    //called when player respawns. resets all items
    private void PlayerRespawned() {
        //empty the hand when player respawns
        _currentActiveGunItem?.NotActiveAnymore();
        _currentActiveGunItem?.PutHandAway(instant: true);
        _currentActiveItem = PlayerItems.Empty;

        //reset all items
        playerLightGunManager.Reset();
        playerTeleportManager.Reset();
        playerFlashLightManager.Reset();
    }


    //instantly teleports player to destination. delegates to playerTeleportManager
    public void ForceTeleport(Transform destination) => playerTeleportManager.ForceTeleport(destination);

    private void OnEnable() {
        //subscribing (listening) to some events
        StarterAssetsInputs.OnItemAction += OnItemAction;
        StarterAssetsInputs.OnLeftClickedAction += OnLeftClickedAction;
        StarterAssetsInputs.OnRightClickedAction += OnRightClickedAction;
        PlayerBehaviourEventHub.OnPlayerGrabbedAnObject += OnPlayerGrabbedAnObject;
        PlayerBehaviourEventHub.OnPlayerUnGrabbedAnObject += OnPlayerUnGrabbedAnObject;
        PlayerBehaviourEventHub.OnPlayerRespawned += PlayerRespawned;
    }


    private void OnDisable() {
        //unsubscribing to some events
        StarterAssetsInputs.OnItemAction -= OnItemAction;
        StarterAssetsInputs.OnLeftClickedAction -= OnLeftClickedAction;
        StarterAssetsInputs.OnRightClickedAction -= OnRightClickedAction;
        PlayerBehaviourEventHub.OnPlayerGrabbedAnObject -= OnPlayerGrabbedAnObject;
        PlayerBehaviourEventHub.OnPlayerUnGrabbedAnObject -= OnPlayerUnGrabbedAnObject;
        PlayerBehaviourEventHub.OnPlayerRespawned -= PlayerRespawned;
    }
} 
```"
PlayerFlashLightManager.cs,write the entire class of PlayerFlashLightManager.cs,"```csharp
 ﻿using System;
using UnityEngine;

/*
 * Player.GunItems.FlashLight.PlayerFlashLightManager
 * it is a player item manager derived from(child of) PlayerGunItem.cs, each item has its own GameObjects and hand animations. PlayerGunItem manages the item and the hand.
 * this class manages flash light item. logic of the flash light and battery ,manages the light and sets the light intensity.
 */

[Serializable]
class PlayerFlashLightManager : PlayerGunItem {
    
    //Unity light component
    [SerializeField] private Light flashLight;

    // ui
    [SerializeField] private FlashLightUiManager flashLightUiManager;
    
    //max capacity of the flash light battery in seconds
    [SerializeField] private float maxCapacity = 10;
    
    //capacity of the light in seconds. it is the battery charge amount
    private float _capacity;
    
    //full light intensity
    private float _flashLightDefaultIntensity;
    
    //animation parameter
    protected override string _animationSubStateTrigger => ""EquipFlashLight"";
    private static readonly int IsFlashLightFlashing = Animator.StringToHash(""IsFlashLightFlashing"");

    //is the light flashing?
    private bool _isFlashing = false;


    public override void Init() {
        //set the battery to full
        _capacity = maxCapacity;
        _flashLightDefaultIntensity = flashLight.intensity;
    }

    public void Update() {
        if (_isActive) {
            //drain the battery when flash light is active
            //charge the battery when flash light is not active
            if (_isFlashing) Draining();
            else Charging();
            
        } else {
            //charge the battery when flash light is not active
            Charging();
        }
    }

    //drain the battery while the light is active
    private void Draining() {
        _capacity -= Time.deltaTime;

        //is the battery empty?
        if (_capacity < 0) {
            NoMoreFlashing();
            _capacity = 0;
        }

        //update ui
        flashLightUiManager.Update(_capacity, maxCapacity);

        //if battery is low, set the light intensity
        if (_capacity < 1) ManuallyChangeTheLightValues();
    }

    //charge the light while it is not active
    private void Charging() {
        //charge if not full
        if (_capacity < maxCapacity) {
            _capacity += Time.deltaTime * 1.35f;

            //update ui
            flashLightUiManager.Update(_capacity, maxCapacity);
        }
    }

    //stop the flash light
    private void NoMoreFlashing() {
        _isFlashing = false;

        //set the animation parameter
        handAnimator.SetBool(IsFlashLightFlashing, false);

        //deactivate the itemHolder
        itemHolder.SetActive(false);
    }


    //start the flash light
    private void StartFlashing() {
        _isFlashing = true;

        //set the animation parameter 
        handAnimator.SetBool(IsFlashLightFlashing, true);

        //activate the itemHolder
        itemHolder.SetActive(true);

        //set the light intensity
        if (_capacity > 1) flashLight.intensity = _flashLightDefaultIntensity;
    }


    private void ManuallyChangeTheLightValues() {
        flashLight.intensity = Mathf.Lerp(0, _flashLightDefaultIntensity, _capacity);
        // flashLightMaterial.SetFloat(""_CustomEmissiveAmount"",
        //     Mathf.Lerp(0, _flashLightMaterialDefaultIntensity, _capacity));
    }


    //called by PlayerGunItemManager when player equips the item 
    public override void ActivateItem() {
        base.ActivateItem();

        //start the flash light
        StartFlashing();
    }


    //called by PlayerGunItemManager when left click is pressed. starts the flash light
    public override void LeftClicked() {
        //activate
        StartFlashing();
    }

    //called by PlayerGunItemManager when right click is pressed. stops the flash light
    public override void RightClicked() {
        //deactivate
        NoMoreFlashing();
    }

    //called by PlayerGunItemManager when player respawns. resets the item
    public override void Reset() {
        _capacity = maxCapacity;
        flashLightUiManager.Update(_capacity, maxCapacity);
    }
} 
```"
LightGunBullet.cs,write the entire class of LightGunBullet.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;

/*
 * Player.GunItems.LightGun.LightGunBullet
 * manages the light gun bullet. LightGunBullet is a bullet that is shot by the light gun. it is a light that can be injected to the lights
 * bullet only collides once, when it does, it either injects the light it has, to the light it has hit, or it grows into a ball
 * the ball can be sucked by the player to fill the light gun ammo
 * bullets are instantiated and shot and sucked by LightGunManager.cs
 * this class manages the bullet behaviours, its collision and its animations
 */

public class LightGunBullet : MonoBehaviour {
    
    [SerializeField] private Rigidbody _rigidbody;
    //bullet initial velocity
    [SerializeField] private float velocity;
    //the lightGunLight component of the bullet
    [SerializeField] private LightGunLight lightGunLight;

    //bullet only collides once 
    private bool _hasCollided;
    //is the bullet shot?
    private bool _isShot;
    //shot bullet will set its position and rotation to this
    private Transform _bulletSpawn;


    public void Init(LightColor lightGunAmmoLight, Transform bulletSpawn) {
        _isShot = true;
        _bulletSpawn = bulletSpawn;
        
        //initialize the lightGun light, inject the light to the LightGunLight component
        lightGunLight.InjectLight(lightGunAmmoLight, true);
    }

    private void Start() {
        // if the bullet is shot, set its position, rotation and velocity. else it is just lying on the ground in its ball form
        if (_isShot) {
            transform.SetPositionAndRotation(_bulletSpawn.position, _bulletSpawn.rotation);
            _rigidbody.velocity = transform.up * velocity;
        }
        
        //set this as the bullet identity of the light
        lightGunLight.BulletIdentity = this;
    }

    //if the bullet collides with a light, inject the light to the light and destroy the bullet
    private void OnCollisionEnter(Collision other) {
        //if the bullet has collided before, don't do anything
        if (_hasCollided) return;

        //is the bullet colliding with a light? if not, grow the bullet into a ball
        if (other.gameObject.TryGetComponent(out LightGunLight otherLight)) {
            //try injecting the light
            bool success = otherLight.InjectLight(lightGunLight.LightType);
            //if it was successful, destroy the bullet else grow the bullet into a ball
            if (success) Destroy(gameObject);
            else HitNonInjectable();
        } else HitNonInjectable();
    }

    //called when bullet hits a non injectable object. grow the bullet into a ball
    private void HitNonInjectable() {
        //no more collisions
        _hasCollided = true;
        
        //grow the bullet into a ball
        transform.DOScale(1, 0.5f);
        _rigidbody.mass = 1;
        _rigidbody.useGravity = true;

        //stop the bullet
        _rigidbody.velocity = Vector3.zero;
    }


    //called by LightGunLight.cs when it is consumed(light is sucked out by the player with the light gun). shrink the bullet and destroy it
    public void OnLightConsumed() {
        //disable collider for safety
        GetComponent<Collider>().enabled = false;
        //kill all tweens(stop all animations)
        transform.DOKill(true);
        //shrink the bullet then destroy it
        transform.DOScale(0, 0.25f).SetEase(Ease.OutQuad).OnComplete((() => { Destroy(gameObject); }));
    }
} 
```"
LightGunLight.cs,write the entire class of LightGunLight.cs,"```csharp
 ﻿using UnityEngine;
using UnityEngine.Events;

/*
 * Player.GunItems.LightGun.LightGunLight
 * manages LightGunLight object, turning them on(injecting lights to them) and off(sucking lights from them)
 * each LightGunLight is a mesh with an emissive material
 * if it has an Unity Light as its child (to make it brighter) it is called a complex light
 */

public class LightGunLight : MonoBehaviour {
    //the light material database
    [SerializeField] private LightMaterialDatabaseSO materials;
    [SerializeField] private int id;

    //unity event that can be set in the inspector
    [SerializeField] private UnityEvent<int, LightColor> onChanged;

    //should broadcast light changes globally?
    [SerializeField] private bool shoutOnLightChange = true;

    //is this light a bullet light? (if it is, it is set by LightGunBullet.cs)
    public LightGunBullet BulletIdentity { get; set; }

    //the light type
    public LightColor LightType { get; private set; }
    private bool _hasLight;
    private Renderer _meshRenderer;

    //complex light
    private bool _isComplex;
    private Light _additionalLight;

    //initialize variables
    private void Awake() {
        _meshRenderer = GetComponent<Renderer>();
        var material = _meshRenderer.sharedMaterial;

        //is it on?
        LightType = materials.GetLightTypeByMaterial(material);
        _hasLight = LightType != LightColor.Off;

        //if the light is complex, get the additional light
        _isComplex = transform.GetComponentInChildren<Light>();
        if (_isComplex) {
            _additionalLight = transform.GetComponentInChildren<Light>();
            Color color = material.GetColor(""_TheColor"");
            _additionalLight.color = color;
        }
    }

    //turn on the light(inject light)
    public bool InjectLight(LightColor lightType = LightColor.White, bool isForced = false) {
        //if the light is already on, don't turn it on again
        if (!isForced && _hasLight) return false;

        //change the material
        LightType = lightType;
        var material = materials.GetLightByType(LightType);
        _meshRenderer.sharedMaterial = material;

        //if the light has an additional light, turn it on and set its color
        if (_isComplex) {
            _additionalLight.enabled = true;
            //get the emissive color from the material properties and set it as the additional light color
            Color color = material.GetColor(""_TheColor"");
            _additionalLight.color = color;
        }

        //broadcast changes
        NotifyListeners(LightType);


        _hasLight = true;
        return true;
    }

    //notify listeners that the light has changed
    private void NotifyListeners(LightColor lightType) {
        //broadcast changes 
        if (shoutOnLightChange) LevelEventHub.LightGunLightInjected(id, lightType);
        onChanged?.Invoke(id, lightType);
    }


    //turn off the light(suck out the light)
    public (LightColor lightType, bool _hasAmmo) SuckLight() {
        //if the light is already off, don't turn it off again
        if (!_hasLight) return (LightColor.Off, false);

        // return the current light as result
        var response = (LightType, true);

        //update the variables
        LightType = LightColor.Off;
        _hasLight = false;

        //update the material
        _meshRenderer.sharedMaterial = materials.Off;
        //if the light has an additional light, turn it off
        if (_isComplex) _additionalLight.enabled = false;

        //broadcast changes
        NotifyListeners(LightType);

        //if this is actually a bullet light(LightGunBullet.cs) call its OnLightConsumed method
        if (BulletIdentity) BulletIdentity.OnLightConsumed();

        // return the light that was sucked out
        return response;
    }


    //called by others to check if this it has light, returns the Light type and a boolean indicating if it has light as a tuple
    public (LightColor _lightGunAmmoLight, bool _hasAmmo) Peek() => (LightType, _hasLight);


    //turn off the additional light(if there is any) when the power is out
    private void LightsOut() {
        _additionalLight.enabled = false;
    }

    //turn on the additional light(if there is any) when the power is back
    private void LightsBackOn() {
        _additionalLight.enabled = true;
    }


    private void OnEnable() {
        //if is complex subscribe (listening) to some events
        if (_isComplex) {
            LevelEventHub.OnLightsOut += LightsOut;
            LevelEventHub.OnLightsBackOn += LightsBackOn;
        }
    }

    private void OnDisable() {
        //if is complex unsubscribe to some events
        if (_isComplex) {
            LevelEventHub.OnLightsOut -= LightsOut;
            LevelEventHub.OnLightsBackOn -= LightsBackOn;
        }
    }
} 
```"
LightGunVisuals.cs,write the entire class of LightGunVisuals.cs,"```csharp
 ﻿using System;
using Cinemachine;
using DG.Tweening;
using UnityEngine;
using UnityEngine.UI;

/*
 * Player.GunItems.LightGun.LightGunVisuals
 * Light Gun is a gun that has only one ammo, it shoots light and sucks light from light sources to fill the ammo.
 * this class manages the visuals and sounds of the LightGun. it is a field in PlayerLightGunManager.cs
 * it manages the ammo indicator and focus indicator in the UI
 */

[Serializable]
class LightGunVisuals {
    //light materials database
    [SerializeField] private LightMaterialDatabaseSO lightGunMaterials;

    //a mesh that has the same color as the light gun ammo
    [SerializeField] private MeshRenderer ammoIndicator;

    [Header(""Ui"")] [SerializeField] private Image focusIndicator;
    [SerializeField] private CinemachineImpulseSource cinemachineImpulseSource;


    private bool _hasAmmo;
    private float _focusIndicatorSize;


    public void Init() {
        //save the focus indicator size
        _focusIndicatorSize = focusIndicator.rectTransform.localScale.x;
        focusIndicator.rectTransform.localScale = Vector3.zero;
        ammoIndicator.enabled = false;
    }


    //called by PlayerLightGunManager when the gun shot a bullet and is now empty. hides the ammo indicator
    public void EmptyAmmo() {
        //hide the ammo indicator
        ammoIndicator.enabled = false;
        //set variables
        _hasAmmo = false;
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }

    //called by PlayerLightGunManager when the gun is filled with light. changes the ammo indicator color to the color of the light
    public void GunJustGotFilled(LightColor lightGunAmmoLight) {
        //set the ammo indicator color to the color of the light
        ammoIndicator.enabled = true;
        ammoIndicator.sharedMaterial = lightGunMaterials.GetLightByType(lightGunAmmoLight);
        //set variables
        _hasAmmo = true;
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }

    //called by PlayerLightGunManager when player focuses(aims) on a light.
    public void FocusedOnLight((LightColor lightGunAmmoLight, bool hasAmmo) data) {
        //changes the focus indicator color to green if can shoot light or suck light from the light, changes to yellow if can't
        focusIndicator.color = (_hasAmmo && !data.hasAmmo) || (!_hasAmmo && data.hasAmmo) ? Color.green : Color.yellow;
    }


    //called by PlayerLightGunManager when player stops focusing(aiming) on a light. changes the focus indicator color to red
    public void OutOfFocus() {
        //change the focus indicator color to red
        focusIndicator.color = Color.red;
    }

    //called by PlayerLightGunManager when player equips the gun. shows the focus indicator
    public void OnPullOut() {
        //show the focus indicator
        focusIndicator.rectTransform.DOScale(_focusIndicatorSize, 0.5f).SetEase(Ease.OutQuad);
    }

    //called by PlayerLightGunManager when player unEquips the gun. hides the focus indicator
    public void OnPutAway() {
        //hide the focus indicator
        focusIndicator.rectTransform.DOScale(0, 0.5f).SetEase(Ease.OutQuad);
    }
} 
```"
PlayerLightGunManager.cs,write the entire class of PlayerLightGunManager.cs,"```csharp
 ﻿using System;
using UnityEngine;
using Object = UnityEngine.Object;

/*
 * Player.GunItems.LightGun.PlayerLightGunManager
 * it is a player item manager derived from(child of) PlayerGunItem.cs, each item has its own GameObjects and hand animations. PlayerGunItem manages the item and the hand.
 * Light Gun is a gun that has only one ammo, it shoots light and sucks light from light sources to fill the ammo.
 * this class manages the light gun item.its animations, logic of shooting light and sucking light from the focused light.
 * most of the animation logic is in the animator(state machine). this class only sets the animation triggers and parameters.
 */

[Serializable]
class PlayerLightGunManager : PlayerGunItem {
    
    
    [SerializeField] private Transform playerHead;
    
    [Header(""Raycast"")]
    //layer mask for raycast to check if player is focusing on a light
    [SerializeField] private float distance;
    [SerializeField] private LayerMask layerMask;
    
    //manages the visuals of the light gun
    [SerializeField] private LightGunVisuals lightGunVisuals;
    
    [Header(""Sound"")]
    [SerializeField] private AudioClip lightGunSuckSound, lightGunShootSound;
    
    [Header(""Bullet"")]
    //bullet prefab
    [SerializeField] private LightGunBullet lightBullet;
    //bullet will spawn from this position
    [SerializeField] private Transform bulletSpawn;
    

    //the light that player is focusing(aiming) on
    private LightGunLight _currentFocusedLight;
    
    //does the gun have ammo?
    private bool _hasAmmo;
    //ammo type
    private LightColor _lightGunAmmoLight;
    
    //animation parameter
    protected override string _animationSubStateTrigger => ""EquipGun"";
    private static readonly int IsLightGunFull = Animator.StringToHash(""IsLightGunFull"");

    public override void Init() {
        base.Init();
        lightGunVisuals.Init();
    }

    //called by PlayerGunItemManager when player equips the item. 
    public override void ActivateItem() {
        base.ActivateItem();
        //update the visuals
        lightGunVisuals.OnPullOut();

        //set animation parameter
        if (_hasAmmo) handAnimator.SetBool(IsLightGunFull, true);
    }

    //when player has the light gun equipped, it checks if the player is focusing(aiming) on a light or not
    public void Update() {
        //raycast to check if player is focusing on a light
        RaycastHit hit;
        if (Physics.Raycast(playerHead.position, playerHead.forward, out hit, distance, layerMask)) {
            //check if the hit object is a light
            if (hit.transform.gameObject.layer == 11) FocusingOnALight(hit);
            else NotFocusingOnLight();
            
        } else {
            //raycast didn't hit anything
            NotFocusingOnLight();
        }
    }

    //called when player is not focusing(aiming) on a light
    private void NotFocusingOnLight() {
        Debug.DrawRay(playerHead.position, playerHead.forward * distance, Color.red);

        //if last frame player was focusing on a light, update the visuals
        if (_currentFocusedLight) lightGunVisuals.OutOfFocus();

        //reset the current focused light
        _currentFocusedLight = null;
    }


    //called when player is focusing(aiming) on a light
    private void FocusingOnALight(RaycastHit hit) {
        Debug.DrawRay(playerHead.position, playerHead.forward * distance, Color.green);
        //if last frame player was not focusing on a light OR player is focusing on a new light update the visuals
        if (!_currentFocusedLight || _currentFocusedLight.gameObject != hit.transform.gameObject) {
            //new light is on focused
            //get the lightGunLight component from the hit object
            _currentFocusedLight = hit.transform.GetComponent<LightGunLight>();
            //update the visuals
            lightGunVisuals.FocusedOnLight(_currentFocusedLight.Peek());
        }
    }


    //called by PlayerGunItemManager when left click is pressed. it shoots the light 
    public override void LeftClicked() {
        // can't shoot if there is no ammo or power is off
        if (!_hasAmmo || !GlobalInGameData.IsPowerOn) return;

        ShootLight();
    }

    //shoot a light bullet
    private void ShootLight() {
        //set the animation parameter
        handAnimator.SetBool(IsLightGunFull, false);

        //update the visuals
        lightGunVisuals.EmptyAmmo();
        //play the sound
        MusicSoundManager.Instance.PlaySound(lightGunShootSound);

        //no more ammo
        _hasAmmo = false;

        //instantiate the bullet and initialize it(bullet will spawn with the correct position and rotation(based on bulletSpawn) and start moving forward)
        var bullet = Object.Instantiate(lightBullet);
        bullet.Init(_lightGunAmmoLight, bulletSpawn);
    }


    //called by PlayerGunItemManager when right click is pressed. it tries to suck light from the focused light and fill the gun
    public override void RightClicked() {
        // can't suck light if the gun is full or there is no focused light or power is off
        if (_hasAmmo || _currentFocusedLight == null || !GlobalInGameData.IsPowerOn) return;

        //try to suck light
        (_lightGunAmmoLight, _hasAmmo) = _currentFocusedLight.SuckLight();

        //if succeeded, fill the gun
        if (_hasAmmo) FillTheGun();
    }


    //fill the gun with the light that was sucked out
    private void FillTheGun() {
        //set the animation parameter
        handAnimator.SetBool(IsLightGunFull, true);

        //update the visuals
        lightGunVisuals.GunJustGotFilled(_lightGunAmmoLight);
        //play the sound
        MusicSoundManager.Instance.PlaySound(lightGunSuckSound);
    }

    //called by PlayerGunItemManager when the item is not active anymore.(is unequipped) 
    public override void NotActiveAnymore() {
        base.NotActiveAnymore();
        lightGunVisuals.OnPutAway();
    }
} 
```"
PlayerTeleportManager.cs,write the entire class of PlayerTeleportManager.cs,"```csharp
 using System;
using UnityEngine;

/*
 * Player.GunItems.Teleporter.PlayerTeleportManager
 * it is a player item manager derived from(child of) PlayerGunItem.cs, each item has its own GameObjects and hand animations. PlayerGunItem manages the item and the hand.
 * this class manages teleporter item. logic of the teleporter, manages the teleport seed, and teleports the player.
 * when player presses right click, a teleport seed is planted(it is the current position and rotation of the player). when player presses left click, player teleports to the seed.
 * it uses managers for visuals and instantiating the seed object in the scene.
 */

[Serializable]
public class PlayerTeleportManager : PlayerGunItem {
    
    //Unity CharacterController component
    [SerializeField] private CharacterController controller;

    //manager for teleport visuals
    [SerializeField] private TeleporterVisuals teleporterVisuals;

    //manager for teleport seed. instantiating the seed object in the scene.
    [SerializeField] private TeleportPlanter teleportPlanter;

    //teleport seed. it is the teleport position
    private Vector3 _teleportPosition;
    private Quaternion _teleportRotation;

    //is there a teleport seed?
    private bool _hasTeleportPosition;

    //animation parameter
    protected override string _animationSubStateTrigger => ""EquipTeleporter"";
    private static readonly int HasTeleportSeed = Animator.StringToHash(""HasTeleportSeed"");


    public override void Init() {
        //init the teleport planter
        teleportPlanter.Init(OnSeedDestroyed);
    }

    //teleports player to the teleport position
    private void Teleport() {
        //set the animation parameter
        handAnimator.SetBool(HasTeleportSeed, false);

        //disable player control
        GlobalInGameData.PlayerHasControl = false;

        //play teleport effect - TeleportPart2 is called when the pre-Teleport effect is finished
        FullScreenEffectsManager.Instance.Teleport(TeleportPart3);

        //rest of the teleport logic
        TeleportPart2();
    }

    //second part of the teleportation. 
    private void TeleportPart2() {
        //set visuals
        teleporterVisuals.OnTeleported();

        //delete the seed object
        teleportPlanter.DeleteSeed();

        //play teleport animation
        handAnimator.SetTrigger(""OnTeleport"");
    }

    //third part of the teleportation. does the actual teleportation 
    private void TeleportPart3() {
        //teleport seed is used, no teleport position
        _hasTeleportPosition = false;

        //disable the controller, set the position and rotation, enable the controller (to avoid bugs)
        controller.enabled = false;
        controller.transform.position = _teleportPosition;
        controller.transform.rotation = _teleportRotation;
        controller.enabled = true;

        //enable player control
        GlobalInGameData.PlayerHasControl = true;
    }

    //instantly teleports player to destination.
    public void ForceTeleport(Transform Destination) {
        //update the teleport position immediately
        _hasTeleportPosition = true;
        _teleportPosition = Destination.position;
        _teleportRotation = Destination.rotation;
        _teleportRotation = controller.transform.rotation;
        //teleport
        Teleport();
    }


    //called by PlayerGunItemManager when player equips the item 
    public override void ActivateItem() {
        base.ActivateItem();

        //set visuals and the animation parameter accordingly
        if (_hasTeleportPosition) {
            teleporterVisuals.PulledOutTeleporterWithAlreadyPlantedSeed();
            handAnimator.SetBool(HasTeleportSeed, true);
        }
    }

    //this method is passed to the TeleportPlanter as an Action. it is called when the seed is destroyed. 
    public void OnSeedDestroyed() {
        //no teleport position
        _hasTeleportPosition = false;

        //set visuals
        teleporterVisuals.OnSeedDestroyed();

        //set the animation parameter
        handAnimator.SetBool(HasTeleportSeed, false);
    }

    //called by PlayerGunItemManager when left click is pressed. it teleports the player to the teleport seed(position)
    public override void LeftClicked() {
        //check if there is a teleport position. if there is, teleport
        if (_hasTeleportPosition) {
            Teleport();
        }
    }


    //called by PlayerGunItemManager when right click is pressed. it plants a new teleport seed(position)
    public override void RightClicked() {
        //set the animation parameter
        handAnimator.SetBool(HasTeleportSeed, true);

        //set the teleport seed(teleport position and rotation)
        _hasTeleportPosition = true;
        _teleportPosition = controller.transform.position;
        _teleportRotation = controller.transform.rotation;

        //set visuals
        teleporterVisuals.OnNewSeedPlanted();

        //make the seed object in the scene
        teleportPlanter.PlantNewSeed(_teleportPosition);
    }
} 
```"
TeleporterVisuals.cs,write the entire class of TeleporterVisuals.cs,"```csharp
 ﻿using System;
using Cinemachine;
using UnityEngine;

/*
 * Player.GunItems.Teleporter.TeleporterVisuals
 * this class manages the visuals and sounds of the teleporter item. it is a field in PlayerTeleportManager.cs
 * most of the animation logic is in the animator(state machine). this class only sets the animation triggers and parameters.
 */

[Serializable]
public class TeleporterVisuals {
    
    [SerializeField] private Animator animator;
    [SerializeField] private CinemachineImpulseSource cinemachineImpulseSource;

    [Header(""Sounds"")]
    [SerializeField] private AudioClip teleportSound, plantSound;

    //called when player teleports
    public void OnTeleported() {
        //set the animation trigger and parameter
        animator.SetTrigger(""Teleport"");
        animator.SetBool(""HasSeed"", false);
        
        //play the sound
        MusicSoundManager.Instance.PlaySound(teleportSound);
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }

    public void OnNewSeedPlanted() {
        //set the animation parameter
        animator.SetBool(""HasSeed"", true);
        //play the sound
        MusicSoundManager.Instance.PlaySound(plantSound);
        //shake the camera
        cinemachineImpulseSource.GenerateImpulse();
    }

    //teleporter item is equipped, and a teleport seed is already planted
    public void PulledOutTeleporterWithAlreadyPlantedSeed() {
        //set the animation parameter
        animator.SetBool(""HasSeed"", true);
    }

    //called when the teleport seed(teleport position) is destroyed
    public void OnSeedDestroyed() {
        //set the animation parameter
        animator.SetBool(""HasSeed"", false);
        //play the sound
        MusicSoundManager.Instance.PlaySound(teleportSound);
    }
} 
```"
TeleportPlanter.cs,write the entire class of TeleportPlanter.cs,"```csharp
 ﻿using System;
using UnityEngine;
using Object = UnityEngine.Object;

/*
 * Player.GunItems.Teleporter.TeleportPlanter
 * when player presses right click, a teleport seed is planted(it is the current position and rotation of the player). when player presses left click, player teleports to the seed.
 * this class manages the planting(instantiating) teleport seed of the teleporter item and its destruction. it is a field in PlayerTeleportManager.cs
 * only one seed can be planted at a time.
 */

[Serializable]
public class TeleportPlanter {
    
    //the seed prefab
    [SerializeField] private TeleportSeed newSeedPrefab;
    
    //last planted seed
    private TeleportSeed _lastSeed;
    
    //called when the seed is destroyed by collision.
    private Action _onSeedDestroyedAction;
    
    public void Init(Action onSeedDestroyedAction) {
        _onSeedDestroyedAction = onSeedDestroyedAction;
    }

    //plant a new seed
    public void PlantNewSeed(Vector3 teleportPosition) {
        //destroy the last seed
        DeleteSeed();
        //instantiate a new seed
        _lastSeed=Object.Instantiate(newSeedPrefab,teleportPosition,Quaternion.identity);
        //init the seed
        _lastSeed.Init(SeedDestroyedByCollision);
    }

    //called when the seed is destroyed by collision. delegates upwards to PlayerTeleportManager.cs
    private void SeedDestroyedByCollision() {
        _lastSeed = null;
        _onSeedDestroyedAction.Invoke();
    }

    //destroy the last seed
    public void DeleteSeed() {
        if (_lastSeed) _lastSeed.DestroyYourSelf();
    }
} 
```"
TeleportSeed.cs,write the entire class of TeleportSeed.cs,"```csharp
 using System;
using UnityEngine;

/*
 * Player.GunItems.Teleporter.TeleportSeed
 * when player presses right click, a teleport seed is planted(it is the current position and rotation of the player). when player presses left click, player teleports to the seed.
 * this class manages the seed. it is destroyed when it is crushed.
 */

public class TeleportSeed : MonoBehaviour {
    
    //called when the seed is destroyed by collision.
    private Action _onDestroyAction;

    public void Init(Action onDestroyAction) {
        _onDestroyAction = onDestroyAction;
    }

    //destroy the seed when something(other than Player) enters its trigger zone
    private void OnTriggerEnter(Collider other) {
        if (other.CompareTag(""Player"")) return;
        if (other.isTrigger) return;

        //the seed is destroyed by collision. delegates upwards to TeleportPlanter.cs
        _onDestroyAction();
        
        //destroy the gameObject
        DestroyYourSelf();
    }

    //destroy the gameObject from outside
    public void DestroyYourSelf() {
        Destroy(gameObject);
    }
} 
```"
AnimatedInteractable.cs,write the entire class of AnimatedInteractable.cs,"```csharp
 using DG.Tweening;
using UnityEngine;
using UnityEngine.Events;

/*
 * Player.Interactables.AnimatedInteractable
 * InteractableObject.cs is the base(abstract) class for all interactable objects in the game. they all must inherit from it or one of its children
 * all interactable objects have a child of InteractableObject.cs class attached to them
 * each script that inherits from InteractableObject.cs has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class (AnimatedInteractable.cs) inherits from InteractableObject.cs and adds the functionality of playing an animation when the player interacts with the object
 * other scripts can subscribe to the onInteractAction event to add custom logic when the player interacts with the object
 * gameObjects with this script attached to them must have an animator component with a trigger parameter called ""OnInteract"" and an animation that plays when the trigger is called
 */

[RequireComponent(typeof(Animator))]
public class AnimatedInteractable : InteractableObject {
    private Animator _animator;

    [Tooltip(""If true, the object will only be animated once then disabled."")] 
    [SerializeField] private bool isOneTimeAnimated;
    
    //cooldown between each interaction. If 0, there is no cooldown
    [SerializeField] private float cooldown;

    //the action to invoke when the player interacts with the object. Set in the inspector
    [SerializeField] private UnityEvent onInteractAction;
    
    [SerializeField] private AudioSource audioSource;


    private void Start() {
        _animator = GetComponent<Animator>();
    }

    //player is no longer focusing on the current interactable object. child classes can override this method to add custom logic
    protected override void OnObjectWentOutOfFocus() { }


    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button while focusing on the object. Plays the animation and invokes the onInteractAction
    public override void Interact() {
        //play the animation
        audioSource.Play();
        _animator.SetTrigger(""OnInteract"");

        //if the object is one time animated, disable the collider so the player can't interact with it again
        if (isOneTimeAnimated) GetComponent<Collider>().enabled = false;

        //if it has a cooldown, disable the collider for the duration of the cooldown
        else if (cooldown != 0) {
            GetComponent<Collider>().enabled = false;
            DOTween.Sequence().AppendInterval(cooldown).OnComplete(() => { GetComponent<Collider>().enabled = true; });
        }

        //invoke the onInteractAction
        onInteractAction?.Invoke();
    }
} 
```"
CollectableInteractable.cs,write the entire class of CollectableInteractable.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;

/*
 * Player.Interactables.CollectableInteractable
 * InteractableObject.cs is the base(abstract) class for all interactable objects in the game. they all must inherit from it or one of its children
 * all interactable objects have a child of InteractableObject.cs class attached to them
 * each script that inherits from InteractableObject.cs has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class (CollectableInteractable.cs) inherits from InteractableObject.cs and adds the functionality of collecting the object when the player interacts with it
 */

public class CollectableInteractable : InteractableObject {
    [SerializeField] private int id;

    //player is no longer focusing on the current interactable object.
    protected override void OnObjectWentOutOfFocus() { }

    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button while focusing on the object. shrink the object and destroy it
    public override void Interact() {
        //disable the collider so the player can't interact with it again
        GetComponent<Collider>().enabled = false;
        //shrink the object and destroy it
        transform.DOScale(0, 0.3f).SetEase(Ease.OutCubic).OnComplete((() => {
            Destroy(gameObject);
            //invoke the event(player collected a collectable)
            LevelEventHub.PlayerCollectedCollectable(id);
        }));
    }
} 
```"
InteractableObject.cs,write the entire class of InteractableObject.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Player.Interactables.InteractableObject
 * this class is the base(abstract) class for all interactable objects in the game. they all must inherit from this class or one of its children
 * all interactable objects have a child of this class attached to them
 * PlayerInteractableObjectsManager.cs is responsible for detecting the interactable objects and calling the methods of this class
 * each script that inherits from this class has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class is responsible for showing the hint in the UI and highlighting the object when the player is focusing on it
 * this class provides the interface for interacting with the object
 */

[RequireComponent(typeof(Collider))]
public abstract class InteractableObject : MonoBehaviour {
    
    //the visuals of the interactable object. Used to highlight the object when the player is focusing on it
    [SerializeField] private GameObject[] visuals;
    //the hint to show in the UI when the player is focusing on the object
    [SerializeField] protected string hintText = ""interact"";

    
    //Called by PlayerInteractableObjectsManager.cs when the player is focusing on the current interactable object
    public void ObjectWentInFocus() {
        //change the layer of the visuals to FocusedHighlightedLayer (highlighted)
        foreach (GameObject visual in visuals) visual.layer = Constants.FocusedHighlightedLayer;
        //show the hint
        ShowHint();
    }

    //display the hint in the UI
    protected void ShowHint() {
        if (hintText.Length == 0) return;
        //if the hint starts with a * then remove it and show the hint
        //otherwise add ""Press E to "" to the hint and show it
        if (hintText[0] != '*') UiEventHub.MainHint(""Press E to "" + hintText);
        else UiEventHub.MainHint(hintText[1..]);
    }

    //Called by PlayerInteractableObjectsManager.cs when the player is no longer focusing on the current interactable object
    public void ObjectWentOutOfFocus() {
        //change the layer of the visuals back to default (no longer highlighted)
        foreach (GameObject visual in visuals) visual.layer = 0;
        
        //call the abstract method(custom logic)
        OnObjectWentOutOfFocus();
        
        //hide the hint
        UiEventHub.MainHint("""");
    }

    //custom logic for when the player is no longer focusing on the current interactable object
    protected abstract void OnObjectWentOutOfFocus();

    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button regarding the current interactable object
    public abstract void Interact();
} 
```"
PlayerInteractableObjectsManager.cs,write the entire class of PlayerInteractableObjectsManager.cs,"```csharp
 using StarterAssets;
using UnityEngine;

/*
 * Player.Interactables.PlayerInteractableObjectsManager
 * This class is responsible for detecting whether the player is focusing on an interactable object or not. and calling the methods of that object when the player interacts with it.
 * all interactable objects in the game must inherit from InteractableObject.cs or one of its children. gameObjects that are interactable must have a child of InteractableObject.cs attached to them
 */

public class PlayerInteractableObjectsManager : MonoBehaviour {
    
    [Header(""Raycast"")]
    //layer mask for raycast to check if player is focusing on an interactable object
    [SerializeField] private float distance;
    [SerializeField] private LayerMask layerMask;
    
    //the interactable object that the player is focusing on
    private InteractableObject _currentInteractableObject;
    
    private PlayerManager _playerManager;
    private Transform _playerHead;

    private void Start() {
        //get the player head
        _playerManager = GetComponent<PlayerManager>();
        _playerHead = _playerManager.playerHead;
    }

    //always(when player isn't holding anything) checks if the player is focusing(aiming) on an interactable object
    void Update() {
        if (GlobalInGameData.IsPlayerHoldingSomething) return;

        //raycast to check if player is focusing on an interactable object
        RaycastHit hit;
        if (Physics.Raycast(_playerHead.position, _playerHead.forward, out hit, distance, layerMask)) {
            //check if the hit object is an interactable object
            if (hit.transform.gameObject.layer == 10) FocusingOnAnInteractableObject(hit);
            else NotFocusingOnAnInteractableObject();
        } else {
            //raycast didn't hit anything
            NotFocusingOnAnInteractableObject();
        }
    }
    
    //called when player is not focusing on an interactable object
    private void NotFocusingOnAnInteractableObject() {
        Debug.DrawRay(_playerHead.position, _playerHead.forward * distance, Color.red);
        
        //if last frame player was focusing on an interactable object, call its ObjectWentOutOfFocus method
        if (_currentInteractableObject) _currentInteractableObject.ObjectWentOutOfFocus();
        
        //reset the current focused light
        _currentInteractableObject = null;
    }

    //called when player is focusing on an interactable object
    private void FocusingOnAnInteractableObject(RaycastHit hit) {
        Debug.DrawRay(_playerHead.position, _playerHead.forward * distance, Color.green);

        //call the ObjectWentInFocus method of the interactable object
        if (!_currentInteractableObject) {
            //last frame player was not focusing on an interactable object
            _currentInteractableObject = hit.transform.GetComponent<InteractableObject>();
            _currentInteractableObject.ObjectWentInFocus();
        } else if (_currentInteractableObject.gameObject != hit.transform.gameObject) {
            //last frame player was focusing on an interactable object but now it is focusing on a new interactable object
            //first call the ObjectWentOutOfFocus method of the old interactable object
            _currentInteractableObject.ObjectWentOutOfFocus();
            _currentInteractableObject = hit.transform.GetComponent<InteractableObject>();
            _currentInteractableObject.ObjectWentInFocus();
        }
    }

    //called when the player presses the interact button. delegates the call to the current interactable object
    private void OnInteractAction() {
        //if the player is focusing on an interactable object then call its Interact method
        if (_currentInteractableObject) _currentInteractableObject.Interact();
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        StarterAssetsInputs.OnInteractAction += OnInteractAction;
    }

    private void OnDisable() {
        //unsubscribing to some events
        StarterAssetsInputs.OnInteractAction -= OnInteractAction;
    }
} 
```"
PowerSwitch.cs,write the entire class of PowerSwitch.cs,"```csharp
 using UnityEngine;

/*
 * Player.Interactables.PowerSwitch
 * this class manages the power switches in the game
 * each switch has an InteractableObject.cs attached to it. when the player interacts with a switch, it broadcasts an event that the switch was activated and passes the id of the switch.
 * this class listens to that event to add more functionality to the switch
 * it also listens to power outage event and enables/disables the collider of the switch so the player can/can't interact with it
 */

public class PowerSwitch : MonoBehaviour {
    //animator of the switch
    [SerializeField] private Animator switchAnimator;
    
    //collider of the interactable object, that is enabled when power is out and disabled when power is back on
    [SerializeField] private Collider switchCollider;
    
    //visual indicator for the switch state
    [SerializeField] private SimpleLight _powerIndicator;
    
    [SerializeField] private AudioClip switchFlipSound;
    [SerializeField] private int id = -1;


    private void Start() {
        //initialize the switch state. all switches are disabled at the start of the game
        switchAnimator.Play(""Turn On"");
        LightsBackOn();
    }

    //called when power is out. enable the collider so the player can interact with it
    private void LightsOut() {
        //animate switch to off position
        switchAnimator.Play(""Turn Off"");
        //enable the collider so the player can interact with it
        switchCollider.enabled = true;

        //visuals
        _powerIndicator.gameObject.SetActive(true);
        _powerIndicator.TurnOn(LightColor.Red);
    }

    //this method is passed as a listener to the switch's OnInteractAction event. it is called when the player interacts with the switch
    public void OnSwitchFlipped() {
        //visuals
        _powerIndicator.TurnOn(LightColor.Green);

        //broadcast an event that the power switch was activated
        LevelEventHub.PowerSwitchActivated(id);
    }

    //called when power is back on. disable the collider so the player can't interact with it
    private void LightsBackOn() {
        switchCollider.enabled = false;
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnLightsOut += LightsOut;
        LevelEventHub.OnLightsBackOn += LightsBackOn;
    }


    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnLightsOut -= LightsOut;
        LevelEventHub.OnLightsBackOn -= LightsBackOn;
    }
} 
```"
SimpleDoor.cs,write the entire class of SimpleDoor.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Player.Interactables.SimpleDoor
 * InteractableObject.cs is the base(abstract) class for all interactable objects in the game. they all must inherit from it or one of its children
 * all interactable objects have a child of InteractableObject.cs class attached to them
 * each script that inherits from InteractableObject.cs has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class (SimpleDoor.cs) inherits from InteractableObject.cs and implements the functionality of a door that can be opened and closed
 * all doors in the game have this script attached to them with an animator component that has ""OnInteract"" trigger parameter and ""LockedDoor"" animation
 */

[RequireComponent(typeof(Animator))]
public class SimpleDoor : InteractableObject {
    private Animator _animator;

    [field: SerializeField] public bool IsLocked { get; private set; }
    [field: SerializeField] public bool IsOpen { get; private set; }

    
    [Header(""Lock Indicators"")]
    [SerializeField] private MeshRenderer[] _lockIndicatorsRenderers;
    [SerializeField] private Material lockedMaterial, unlockedMaterial;
    
    [Header(""Audio"")]
    [SerializeField] private AudioSource audioSource;
    [SerializeField] private AudioClip doorOpenSound, doorLockedSound;


    private void Start() {
        _animator = GetComponent<Animator>();
        IsOpen = false;
        
        //initialize the door state
        if (IsLocked) Lock();
        else Unlock();
    }

    //unlocks the door
    public void Unlock() {
        IsLocked = false;
        hintText = ""Open the door"";

        //change the material of the lock indicators to the unlocked material
        foreach (var meshRenderer in _lockIndicatorsRenderers) meshRenderer.material = unlockedMaterial;
    }

    //locks the door
    public void Lock() {
        IsLocked = true;
        hintText = ""*Door is Locked"";

        //change the material of the lock indicators to the locked material
        foreach (var meshRenderer in _lockIndicatorsRenderers) meshRenderer.material = lockedMaterial;
    }

    //player is no longer focusing on the current interactable object. child classes can override this method to add custom logic
    protected override void OnObjectWentOutOfFocus() { }

    //method to close the door via script
    public void ForceClose() {
        if (!IsOpen) return;
        IsOpen = false;
        _animator.SetTrigger(""OnInteract"");
    }

    //method to open the door via script
    public void ForceOpen() {
        if (IsOpen) return;
        IsOpen = true;
        _animator.SetTrigger(""OnInteract"");
    }


    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button while focusing on the object. Opens or closes the door
    public override void Interact() {
        //if the door is locked, play the locked door animation and sound and return
        if (IsLocked) {
            _animator.Play(""LockedDoor"");
            audioSource.PlayOneShot(doorLockedSound);
            return;
        }

        //play sound
        audioSource.PlayOneShot(doorOpenSound);
        //change the state of the door
        IsOpen = !IsOpen;
        //play the animation
        _animator.SetTrigger(""OnInteract"");
        //change the hint text
        hintText = (hintText == ""Open the door"") ? ""Close the door"" : ""Open the door"";
        ShowHint();
    }
} 
```"
GrabbableObjects.cs,write the entire class of GrabbableObjects.cs,"```csharp
 ﻿using UnityEngine;
using UnityEngine.Events;

/*
 * Player.Interactables.GrabbingObjects.GrabbableObjects
 * InteractableObject.cs is the base(abstract) class for all interactable objects in the game. they all must inherit from it or one of its children
 * all interactable objects have a child of InteractableObject.cs class attached to them
 * each script that inherits from InteractableObject.cs has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class (GrabbableObjects.cs) inherits from InteractableObject.cs and adds the functionality of grabbing and holding + unGrabbing the object when the player interacts with it
 * grabbed object will lerp to the target position each frame
 */

public class GrabbableObjects : InteractableObject {
    [field: SerializeField] public int MetaData { get; private set; }
    
    //if true, the object is big and will be held in a different position than small objects
    [field: SerializeField] public bool IsBig { get; private set; }

    //the action to invoke when the player grabs the object. Set in the inspector
    [SerializeField] protected UnityEvent onGrabbed;

    public bool IsGrabbed { get; private set; }

    protected Rigidbody _rb;
    private CharacterController _characterController;
    private Vector3 _lastPosition;
    private Transform _objectHoldPosition;


    private void Start() {
        _rb = GetComponent<Rigidbody>();
    }

    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button while focusing on the object. broadcasts the OnGrabbableObjectInteracted event
    public override void Interact() {
        //broadcast event
        PlayerBehaviourEventHub.GrabbableObjectInteracted(this);
    }

    //player is no longer focusing on the current interactable object. unGab the object if it is grabbed 
    protected override void OnObjectWentOutOfFocus() {
        if (IsGrabbed) UnGrab(false);
    }

    //called every frame if the object is grabbed. lerp the object to the target position
    private void Update() {
        if (!IsGrabbed) return;

        //set last position
        _lastPosition = transform.position;

        //reset velocity
        _rb.velocity = Vector3.zero;
        _rb.angularVelocity = Vector3.zero;

        //lerp the object to the target position
        transform.position = Vector3.Lerp(_lastPosition, _objectHoldPosition.position, Time.deltaTime * 3);
    }

    //called by PlayerHoldObjectsManager.cs when the player interacts with the object. grabs the object
    public void Grab(Transform objectParent, CharacterController characterController, Transform objectHoldPosition) {
        //set target position(based on the object size)
        _objectHoldPosition = objectHoldPosition;

        GlobalInGameData.IsPlayerHoldingSomething = true;

        //show hint ui
        hintText = ""release"";
        ShowHint();

        //invoke and broadcast events
        onGrabbed?.Invoke();
        PlayerBehaviourEventHub.PlayerGrabbedAnObject();

        //set variables
        IsGrabbed = true;
        transform.parent = objectParent;
        _characterController = characterController;
        _rb.useGravity = false;
    }

    //called to unGrab the object.
    public void UnGrab(bool applyVelocity) {
        if (!IsGrabbed) {
            Debug.LogError(""Ungrab called but object is not grabbed"");
            return;
        }

        GlobalInGameData.IsPlayerHoldingSomething = false;

        //broadcast events
        PlayerBehaviourEventHub.PlayerUnGrabbedAnObject();

        //set variables
        hintText = ""grab"";
        ShowHint();

        //set variables
        IsGrabbed = false;
        transform.parent = null;
        _rb.useGravity = true;

        //apply velocity to the object if applyVelocity is true
        if (applyVelocity) {
            //calculate velocity
            var delta = transform.position - _lastPosition;
            var velocity = delta / Time.deltaTime;

            //normalize velocity if it is too high
            float velocityMagnitude = velocity.magnitude;
            if (velocityMagnitude > Constants.GrabbableObjectMaximumVelocity)
                velocity = velocity.normalized * Constants.GrabbableObjectMaximumVelocity;

            //set bigger velocity if the player is moving fast
            if (_characterController.velocity.magnitude > velocityMagnitude) velocity = _characterController.velocity;
            _rb.velocity = velocity;
        }
    }
} 
```"
PlayerHoldObjectsManager.cs,write the entire class of PlayerHoldObjectsManager.cs,"```csharp
 using UnityEngine;

/*
 * Player.Interactables.GrabbingObjects.PlayerHoldObjectsManager
 * PlayerHoldObjectsManager.cs is responsible for calling the Grab and UnGrab methods of the GrabbableObjects.cs script
 * when the player interacts with a grabbable object,an event is triggered,this class listens to it and calls grabs/unGrabs on the object
 */

public class PlayerHoldObjectsManager : MonoBehaviour {
    
    
    [SerializeField] private PlayerManager playerManager;
    
    //target positions for small and big objects
    [SerializeField] private Transform smallObjectHoldPosition, bigObjectHoldPosition;

    //called when the player interacts with a grabbable object. grabs/unGrabs the object
    private void OnGrabbableObjectInteracted(GrabbableObjects obj) {
        if (obj.IsGrabbed) obj.UnGrab(true);
        else obj.Grab(playerManager.playerHead, playerManager.characterController, obj.IsBig ? bigObjectHoldPosition : smallObjectHoldPosition);
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        PlayerBehaviourEventHub.OnGrabbableObjectInteracted += OnGrabbableObjectInteracted;
    }

    private void OnDisable() {
        //unsubscribing to some events
        PlayerBehaviourEventHub.OnGrabbableObjectInteracted -= OnGrabbableObjectInteracted;
    }
} 
```"
PowerCoreObject.cs,write the entire class of PowerCoreObject.cs,"```csharp
 using System;
using DG.Tweening;
using UnityEngine;

/*
 * Player.Interactables.PowerCore.PowerCoreObject
 * this class (PowerCoreObject.cs) inherits from GrabbableObjects.cs which has grab/unGrab functionality
 * player can grab the power core and insert it into the power station or eject it from the station
 * PowerCoreStation.cs implements a power station. it has the logic for detecting,inserting and ejecting the power core.
 * when the power core enters the station's trigger zone, the station tells the core to fully insert itself into the station
 * when the player interacts with the station, the station tells the core to eject itself from the station
 * this class manages the insertion and ejection of the power core
 */

public class PowerCoreObject : GrabbableObjects {
    [SerializeField] private int id;
    
    [Header(""Insert targets"")]
    [SerializeField] private Transform coreInstallTarget, coreMidInstallTarget;
    
    [Header(""Insert animation duration"")]
    [SerializeField] private float insertAnimationDuration1 = 0.5f, insertAnimationDuration2 = 0.5f;

    //called by PowerCoreStation.cs when the core enters the stations trigger zone. it fully inserts the power core into the station
    public void OnEnteredPowerStation(Action OnInserted) {
        //unGrab the core if it is grabbed by the player
        if (IsGrabbed) UnGrab(false);

        //disable the collider and disable gravity
        GetComponent<Collider>().enabled = false;
        _rb.isKinematic = true;
        _rb.useGravity = false;

        //play the insert animation
        DOTween.Sequence()
            .Append(transform.DOMove(coreMidInstallTarget.position, insertAnimationDuration1))
            .Join(transform.DORotateQuaternion(coreInstallTarget.rotation, insertAnimationDuration1))
            .AppendCallback(() => OnInserted?.Invoke())
            .Append(transform.DOMove(coreInstallTarget.position, insertAnimationDuration2))
            .OnComplete((() => {
                //broadcast events
                LevelEventHub.PowerCoreInserted(id);
            }));
    }

    //called by PowerCoreStation.cs when the player interacts with the station. it ejects the power core
    public void Eject() {
        //move the core to the middle of its placement position 
        transform.DOMove(coreMidInstallTarget.position, 0.5f).OnComplete((() => {
            //disable the collider and enable gravity
            GetComponent<Collider>().enabled = true;
            _rb.isKinematic = false;
            _rb.useGravity = true;

            //apply force to the core to eject it(it pops out of the station)
            _rb.AddForce(new Vector3(20, 50, 20));

            //broadcast events
            LevelEventHub.PowerCoreEjected(id);
        }));
    }
} 
```"
PowerCoreStation.cs,write the entire class of PowerCoreStation.cs,"```csharp
 using UnityEngine;

/*
 * Player.Interactables.PowerCore.PowerCoreStation
 * InteractableObject.cs is the base(abstract) class for all interactable objects in the game. they all must inherit from it or one of its children
 * all interactable objects have a child of InteractableObject.cs class attached to them
 * each script that inherits from InteractableObject.cs has its own custom logic for when the player is focusing on it and when the player interacts with it
 * this class (PowerCoreStation.cs) inherits from InteractableObject.cs and implements a power station. it has the logic for detecting,inserting and ejecting the power core.
 * ejecting the power core is done by implementing the Interact method from the InteractableObject.cs class
 * when the power core enters the station's trigger zone, the station tells the core to fully insert itself into the station
 * when the player interacts with the station, the station tells the core to eject itself from the station
 */

public class PowerCoreStation : InteractableObject {
    
    //the power core that this station accepts
    [SerializeField] private PowerCoreObject core;

    //if true, the core can be ejected from the station
    [SerializeField] private bool isDetachable;
    
    [Header(""Audio"")]
    [SerializeField] private AudioSource audioSource;
    [SerializeField] private AudioClip insertSound, ejectSound;

    private bool _isCoreInside;
    private bool _justEjected;

    //detects if the core entered the station's trigger zone
    private void OnTriggerEnter(Collider other) {
        //is the object a power core and is it the right power core?
        PowerCoreObject coreObject = other.gameObject.GetComponent<PowerCoreObject>();
        if (coreObject && coreObject == core) {
            
            //ejected core should not be inserted again
            if (_justEjected) {
                _justEjected = false;
                return;
            }

            //core detected, fully insert it
            CoreDetected(coreObject);
        }
    }

    //called when the core enters the station's trigger zone. it fully inserts the power core into the station
    private void CoreDetected(PowerCoreObject coreObject) {
        //fully insert the core
        coreObject.OnEnteredPowerStation(() => { audioSource.PlayOneShot(insertSound); });
        
        _isCoreInside = true;
        hintText = ""Eject"";

        //if the core is not detachable, parent it to the station and disable its collider
        if (!isDetachable) {
            coreObject.transform.parent = transform;
            GetComponent<Collider>().enabled = false;
        }
    }
    
    //player is no longer focusing on the current interactable object.
    protected override void OnObjectWentOutOfFocus() { }

    
    //Called by PlayerInteractableObjectsManager.cs when the player presses the interact button while focusing on the object. ejects the core(if is inside)
    public override void Interact() {
        if (!_isCoreInside) return;
        
        //play sound
        audioSource.PlayOneShot(ejectSound);
        hintText = """";
        
        //eject the core
        core.Eject();
        _justEjected = true;
        _isCoreInside = false;
    }
} 
```"
LightMaterialDatabaseSO.cs,write the entire class of LightMaterialDatabaseSO.cs,"```csharp
 using UnityEngine;

/*
 * ScriptableObjects.LightMaterialDatabaseSO
 * Database of light materials. each light material is represented by a enum
 * is a scriptable object.
 * there are two of this scriptable object in the project. one for LightGun lights and Simple lights
 * when power is out. all LightGun lights are turned off.
 */

//each light has a color represented by a enum
public enum LightColor {
    White,
    Red,
    Green,
    Blue,
    Purple,
    Golden,
    Off,
}


[CreateAssetMenu(menuName = ""ScriptableObjects/LightMaterialDatabase"")]
public class LightMaterialDatabaseSO : ScriptableObject {
    
    //light materials. set in inspector
    [field: SerializeField] public Material Red { get; private set; }
    [field: SerializeField] public Material Blue { get; private set; }
    [field: SerializeField] public Material Green { get; private set; }
    [field: SerializeField] public Material White { get; private set; }
    [field: SerializeField] public Material Purple { get; private set; }
    [field: SerializeField] public Material Golden { get; private set; }
    [field: SerializeField] public Material Off { get; private set; }
    


    //returns light material by LightColor(enum)
    public Material GetLightByType(LightColor type) {
        return type switch {
            LightColor.White => White,
            LightColor.Red => Red,
            LightColor.Green => Green,
            LightColor.Blue => Blue,
            LightColor.Golden => Golden,
            LightColor.Purple => Purple,
            LightColor.Off => Off,
            _ => White
        };
    }
    
    //returns LightColor(enum) by light material
    public LightColor GetLightTypeByMaterial(Material material) {
        if (material == Red) {
            return LightColor.Red;
        } else if (material == Blue) {
            return LightColor.Blue;
        } else if (material == Purple) {
            return LightColor.Purple;
        } else if (material == Golden) {
            return LightColor.Golden;
        } else if (material == Green) {
            return LightColor.Green;
        } else if (material == White) {
            return LightColor.White;
        } else if (material == Off) {
            return LightColor.Off;
        } else {
            return LightColor.White;
        }
    }

    //returns all light materials except off
    public Material[] GetAllLightGunLightsExceptOff() {
        return new []{ Red, Blue, Green,Purple,Golden, White };

    }
} 
```"
Constants.cs,write the entire class of Constants.cs,"```csharp
 ﻿/*
 * Systems.Constants
 * contains all the constants used in the game
 * is a static class so it can be accessed from anywhere and all fields are public constant
 */

public static class Constants {
    //Debug Flags
    public const bool DebugMode = true;
    public const bool Immortal = false;

    // Speeds
    public const float PlayerSpeedCrouch = 3;
    public const float PlayerSpeedWalk = 5;
    public const float PlayerSpeedRun = 8;
    
    public const float BeastFastSpeed = 20;

    public const float GrabbableObjectMaximumVelocity = 15;


    //materials
    public const int LightGunLightEmissionAmount = 40;

    //Layers
    public const int FocusedHighlightedLayer = 5;


    //static class that contains all the keys for the PlayerPrefs
    public static class PlayerPrefsKeys {
        //each level time
        public static string LevelTime(int level) => $""Level{level}Time"";
    }
} 
```"
FootstepManager.cs,write the entire class of FootstepManager.cs,"```csharp
 ﻿using System;
using StarterAssets;
using UnityEngine;
using Random = UnityEngine.Random;

/*
 * Systems.FootstepManager
 * this class is responsible for playing footstep sounds based on player speed
 * it is serialized so it can be edited in the inspector and is a field of MusicSoundManager.cs
 */

[Serializable]
public class FootstepManager {
    [SerializeField] private AudioSource source;
    
    [Header(""Footstep Sounds"")]
    [SerializeField] private AudioClip[] footStepSounds;
    
    [Header(""Footstep Delays"")]
    [SerializeField] private float crouchAudioDelay, walkAudioDelay, sprintAudioDelay;

    //timer for when to play footstep sound
    private float _footstepTime;
    
    //previous player speed
    private float _lastSpeed;


    public void Update() {
        //if player is not grounded or not moving, reset footstep timer and return(play no sound)
        var speed = FirstPersonController.TargetSpeed;
        if (speed == 0 || !FirstPersonController.Grounded) {
            _footstepTime = 0;
            return;
        }

        //if player is moving faster than before, reset footstep timer(prevents duplicate footstep sounds when player starts running)
        if (_lastSpeed < speed) {
            _footstepTime = 0;
        }

        //update variables
        _lastSpeed = speed;
        _footstepTime -= Time.deltaTime;

        //if footstep timer is 0 or less, play footstep sound and update footstep timer
        if (_footstepTime <= 0) {
            source.PlayOneShot(footStepSounds[Random.Range(0, footStepSounds.Length - 1)]);
            UpdateFootstepTimer(speed);
        }
    }

    //called when a footstep sound is played. updates footstep timer
    private void UpdateFootstepTimer(float speed) {
        //set footstep timer based on player speed
        switch (speed) {
            case <= Constants.PlayerSpeedCrouch:
                //player is crouching
                _footstepTime = crouchAudioDelay;
                break;
            case < Constants.PlayerSpeedRun:
                //player is walking
                _footstepTime = walkAudioDelay;
                break;
            default:
                //player is running
                _footstepTime = sprintAudioDelay;
                break;
        }
    }
} 
```"
GameManager.cs,write the entire class of GameManager.cs,"```csharp
 using UnityEngine;

/*
 * Systems.GameManager
 * holds references to some data like material databases. any other system can access them through this class
 * is a singleton
 */

public class GameManager : SingletonMonoBehaviour<GameManager> {
    //material databases. set in inspector
    [field: SerializeField] public LightMaterialDatabaseSO LightGunMaterials { get; private set; }
    [field: SerializeField] public LightMaterialDatabaseSO SimpleLightMaterials { get; private set; }


    //called when game is closed
    private void OnDestroy() {
        //reset LightGun lights materials
        foreach (Material lightGunLightMaterial in LightGunMaterials.GetAllLightGunLightsExceptOff()) {
            lightGunLightMaterial.SetFloat(""_MyEmissiveIntensity"", Constants.LightGunLightEmissionAmount);
        }
    }
} 
```"
GameStarter.cs,write the entire class of GameStarter.cs,"```csharp
 using Cinemachine;
using UnityEngine;
using UnityEngine.SceneManagement;

/*
 * Systems.GameStarter
 * manages game start when game lunches - sets up main menu - listens to game start ui button
 * is a singleton
 */

public class GameStarter : SingletonMonoBehaviour<GameStarter> {
    
    [SerializeField] private CinemachineVirtualCamera _mainMenuCamera;
    [SerializeField] private GameObject _mainMenuCanvas;
    
    protected override void Awake() {
        base.Awake();
        //if not in debug mode, load level 1 and 1.5 and set main menu camera priority to 12(shows main menu)
        if (!Constants.DebugMode) {
            SceneManager.LoadScene(""Level1"", LoadSceneMode.Additive);
            SceneManager.LoadScene(""Level1.5"", LoadSceneMode.Additive);

            _mainMenuCamera.Priority = 12;
            _mainMenuCanvas.SetActive(true);
        }
    }

    private void Start() {
        //if in debug mode, start game immediately
        if (Constants.DebugMode) {
            StartGame();
        }
    }

    //called when start game button is pressed in main menu
    public void StartGame() {
        //destroy main menu
        _mainMenuCamera.gameObject.SetActive(false);
        Destroy(_mainMenuCanvas);
        Destroy(_mainMenuCamera.gameObject);
        //broadcast game start event
        GlobalEventHub.GameStart();
    }

    //called at the start of each level by the LevelManager(if the game is started there)
    public void SetMenuCameraPositionAndRotation(Vector3 position, Quaternion rotation) {
        _mainMenuCamera.transform.SetPositionAndRotation(position, rotation);
    }
} 
```"
GlobalInGameData.cs,write the entire class of GlobalInGameData.cs,"```csharp
 ﻿/*
 * Systems.GlobalInGameData
 * contains some global data that is used in the game
 * is a static class so it can be accessed from anywhere and all fields are public 
 */

public static class GlobalInGameData {

    //level related
    public static int CurrentLevel;
    public static bool HasLoadedItsFirstLevel = false;
    public static bool IsPowerOn = true;
    
    //player related
    public static bool IsPlayerAlive = true;
    public static bool PlayerHasControl = true;
    public static bool IsPlayerHoldingSomething = false;
} 
```"
MusicSoundManager.cs,write the entire class of MusicSoundManager.cs,"```csharp
 ﻿using System;
using System.Threading.Tasks;
using UnityEngine;

/*
 * Systems.MusicSoundManager
 * manages all music, ambient sounds and any manually played sound in the game
 * is a singleton. any other system can access it through MusicSoundManager.Instance and can play sounds through it
 */

[Serializable]
public class MusicSoundManager: SingletonMonoBehaviour<MusicSoundManager> {
    
    [Header(""Audio Sources"")]
    [SerializeField] private AudioSource soundSource;
    [SerializeField] private AudioSource musicSource;
    [SerializeField] private AudioSource ambientSource;

    //Ambient sounds
    [field:SerializeField] public AudioClip Ambient1 {get; private set;}
    [field:SerializeField] public AudioClip Ambient2 {get; private set;}
    
    //LightGun sounds
    [field:SerializeField] public AudioClip LightGunSuck {get; private set;}
    [field:SerializeField] public AudioClip LightGunShoot {get; private set;}

    //Beast sounds
    [field:SerializeField] public AudioClip BeastScream { get; private set; }
    
    [Header(""Footstep Manager"")]
    [SerializeField] private FootstepManager footstepManager;

    private void Update() {
        //notify footstep manager of update
        footstepManager.Update();
    }
    
    
    //play sound
    public void PlaySound(AudioClip clip) {
        soundSource.PlayOneShot(clip);
    }
    
    public async Task PlaySoundWithDelay(AudioClip clip, int delayMilli) {
        // wait for delay then play sound
        await Task.Delay(delayMilli);
        PlaySound(clip);
    }

    //play music
    public void PlayMusic(AudioClip clip) {
        musicSource.PlayOneShot(clip);
    }
    
    //play ambient sound
    public void PlayAmbient(AudioClip clip) {
        ambientSource.PlayOneShot(clip);
    }

} 
```"
PreLoader.cs,write the entire class of PreLoader.cs,"```csharp
 using UnityEngine;

/*
 * Systems.PreLoader
 * this class is used to instantiate the Systems object before any scene is loaded. 
 */

public static class PreLoader {
    
    //instantiate systems object before any scene is loaded
    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
    public static void InstantiateSystems() {
        //set resolution
        Screen.SetResolution(1920, 1080, true);
        
        //instantiate systems object. systems object is a prefab that holds low level systems and must be present in every scene and be created before any other object
        Object.DontDestroyOnLoad(Object.Instantiate(Resources.Load(""Systems"")));
    }
} 
```"
SingletonMonoBehaviour.cs,write the entire class of SingletonMonoBehaviour.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Systems.SingletonMonoBehaviour
 * this is a custom implementation of the singleton pattern for MonoBehaviour classes.
 * it is abstract and generic.
 * any class that inherits from this class will be a singleton and can be accessed through T.Instance
 */

public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T> {
    //publicly accessed singleton instance
    public static T Instance { get; private set; }

    //set singleton instance on awake
    protected virtual void Awake() {
        //if instance is not null(it means that another instance of this class already exists) destroy this object
        if (Instance) {
            Debug.LogError(""Duplicate Singleton "" + GetType().Name);
            Destroy(gameObject);
            return;
        }

        //set instance
        Instance = this as T;
    }
} 
```"
Utils.cs,write the entire class of Utils.cs,"```csharp
 ﻿using UnityEngine;

/*
 * Systems.Utils
 * this class holds some utility functions and is static and all methods are public so it can be accessed from anywhere
 */

public static class Utils {
    
    //Normalize a color so that its max color component is 1
    public static Color Normalize(this Color color) {
        //get max color component and divide all components by it
        var max = color.maxColorComponent;
        return new Color(color.r / max, color.g / max, color.b / max);
    }
} 
```"
FlashLightUiManager.cs,write the entire class of FlashLightUiManager.cs,"```csharp
 ﻿using System;
using UnityEngine;
using Image = UnityEngine.UI.Image;

/*
 * Ui.FlashLightUiManager
 * Manages flash light ui. updates the ui according to the battery level
 * is serializable and a field in PlayerFlashLightManager
 */

[Serializable]
public class FlashLightUiManager {
    [SerializeField] private Image fillAmount;

    //called by PlayerFlashLightManager when battery of flash light is changed
    public void Update(float capacity, float max) {
        //update fill amount of the image to show the battery level
        fillAmount.fillAmount = capacity / max;
    }
} 
```"
FullScreenEffectsManager.cs,write the entire class of FullScreenEffectsManager.cs,"```csharp
 using System;
using DG.Tweening;
using UnityEngine;
using UnityEngine.Rendering.HighDefinition;

/*
 * Ui.FullScreenEffectsManager
 * manages fullscreen effects like low on health and teleport effects
 * is singleton and can be called from anywhere
 */

public class FullScreenEffectsManager : SingletonMonoBehaviour<FullScreenEffectsManager> {
    //these are the unity fullscreen materials that are used for low on health and teleport effects
    [SerializeField] private Material healthMaterial, teleportMaterial;

    //these are the custom passes that are used for low on health and teleport effects
    [SerializeField] private CustomPassVolume customPassVolume;
    private CustomPass _healthEffect, _teleportEffect;

    //health to slider value mapping
    private readonly float[] healthToSlider = { 1, 1, 0.65f, 0.35f, 0 };

    private void Start() {
        //get the custom passes from the volume
        _healthEffect = customPassVolume.customPasses[0];
        _teleportEffect = customPassVolume.customPasses[1];
    }


    //called by PlayerHealthManager when player health is changed
    public void HealthLowHealthEffect(int healthAmount) {
        //show low on health effect
        if (!_healthEffect.enabled) _healthEffect.enabled = true;

        //animate the intensity of the effect
        healthMaterial.DOFloat(healthToSlider[healthAmount], ""_visibility"", 0.5f);

        //hide the effect when health is full
        if (healthAmount == healthToSlider.Length - 1) _healthEffect.enabled = false;
    }

    //called by PlayerHealthManager when player respawns    
    public void ResetHealth() {
        // hide low on health effect
        healthMaterial.SetFloat(""_visibility"", 0);
        _healthEffect.enabled = false;
    }

    //called by PlayerTeleportManager when player teleports
    public void Teleport(Action OnTeleportEffectEnded) {
        //show teleport effect
        teleportMaterial.SetFloat(""_Center_Void_Size"", 1);
        _teleportEffect.enabled = true;

        //play animation then hide the effect
        DOTween.Sequence()
            .Append(teleportMaterial.DOFloat(0, ""_Center_Void_Size"", 0.35f))
            .AppendCallback(OnTeleportEffectEnded.Invoke)
            .Append(teleportMaterial.DOFloat(1, ""_Center_Void_Size"", 0.25f))
            .OnComplete(() => { _teleportEffect.enabled = false; });
    }


    //called when object is destroyed
    private void OnDestroy() {
        ResetHealth();
    }
} 
```"
GamePlayCanvasManager.cs,write the entire class of GamePlayCanvasManager.cs,"```csharp
 using UnityEngine;

/*
 * Ui.GamePlayCanvasManager
 * Manages activation and deactivation of gameplay canvas (all gameplay ui elements)
 * is singleton
 */

public class GamePlayCanvasManager : SingletonMonoBehaviour<GamePlayCanvasManager> {
    
    //deactivates gameplay ui
    public void DisableGameplayUi() => gameObject.SetActive(false);
    
    //called at the start of the game. activates gameplay ui
    public void EnableGameplayUi() => gameObject.SetActive(true);

} 
```"
UIBeastManager.cs,write the entire class of UIBeastManager.cs,"```csharp
 ﻿using DG.Tweening;
using UnityEngine;
using Image = UnityEngine.UI.Image;

/*
 * Ui.UIBeastManager
 * Manages beast state indicator on UI. for each state the ui element is scaled and colored differently to notify the player about the state
 * listens to events and updates UI accordingly
 * Ui logic is separated from game logic
 */

public class UIBeastManager : MonoBehaviour {
    [SerializeField] private Image beastStateIndicator;
    [SerializeField] private Canvas canvas;
    [SerializeField] private Color orangeColor;

    //called when beast state is changed
    private void BeastStateUpdate(BeastManager.State state) {
        //activate canvas if it is not active
        if (!canvas.gameObject.activeSelf) canvas.gameObject.SetActive(true);
        Debug.Log(state);

        //update ui according to the state. set beastStateIndicators color and scale
        switch (state) {
            case BeastManager.State.OnTarget:
                beastStateIndicator.rectTransform.DOScale(1, 0.5f);
                beastStateIndicator.DOColor(Color.red, 0.5f);
                break;

            case BeastManager.State.Roaming:
                beastStateIndicator.rectTransform.DOScale(0.2f, 0.5f);
                beastStateIndicator.DOColor(Color.green, 0.5f);
                break;

            case BeastManager.State.RoamingOnTarget:
                beastStateIndicator.rectTransform.DOScale(0.6f, 0.5f);
                beastStateIndicator.DOColor(orangeColor, 0.5f);
                break;

            default:
                canvas.gameObject.SetActive(false);
                break;
        }
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        LevelEventHub.OnBeastStateUpdate += BeastStateUpdate;
    }


    private void OnDisable() {
        //unsubscribing to some events
        LevelEventHub.OnBeastStateUpdate -= BeastStateUpdate;
    }
} 
```"
UICurrentObjectivesManager.cs,write the entire class of UICurrentObjectivesManager.cs,"```csharp
 using TMPro;
using UnityEngine;

/*
 * Ui.UICurrentObjectivesManager
 * Manages current objectives messages on UI
 * listens to events and updates UI accordingly
 * Ui logic is separated from game logic
 */

public class UICurrentObjectivesManager : MonoBehaviour {
    [SerializeField] private TextMeshProUGUI currentObjectiveText;

    private void Start() {
        //at the start hide the ui element
        currentObjectiveText.transform.parent.gameObject.SetActive(false);
    }

    //called when current objective is changed
    private void CurrentObjectiveUpdate(string message) {
        //if message is empty, hide the ui element
        if (message == """") {
            currentObjectiveText.transform.parent.gameObject.SetActive(false);
            return;
        }

        //show the message
        currentObjectiveText.transform.parent.gameObject.SetActive(true);
        currentObjectiveText.text = message;
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        UiEventHub.OnCurrentObjectiveUpdate += CurrentObjectiveUpdate;
    }


    private void OnDisable() {
        //unsubscribing to some events
        UiEventHub.OnCurrentObjectiveUpdate -= CurrentObjectiveUpdate;
    }
} 
```"
UiHintManager.cs,write the entire class of UiHintManager.cs,"```csharp
 using TMPro;
using UnityEngine;

/*
 * Ui.UiHintManager
 * Manages hints messages on UI
 * listens to events and updates UI accordingly
 * Ui logic is separated from game logic
 */

public class UiHintManager : MonoBehaviour {
    [SerializeField] private TextMeshProUGUI mainHintText;

    private void Start() {
        //at the start hide the ui element
        mainHintText.transform.parent.gameObject.SetActive(false);
    }

    //called when main hint is changed
    private void OnMainHint(string message) {
        //if message is empty, hide the ui element
        if (message == """") {
            mainHintText.transform.parent.gameObject.SetActive(false);
            return;
        }
        
        //show the hint
        mainHintText.transform.parent.gameObject.SetActive(true);
        mainHintText.text = message;
    }

    private void OnEnable() {
        //subscribing (listening) to some events
        UiEventHub.OnMainHint += OnMainHint;
    }

    private void OnDisable() {
        //unsubscribing to some events
        UiEventHub.OnMainHint -= OnMainHint;
    }
} 
```"
descriptive,write about the Overview in Enlighten,"Enlighten is an Indie game being made in Unity by Ali Mobarekati.
It's using the Unity HDRP(High definition render pipeline) and real time Raytracing and it has realistic graphics.
the game is a first-person puzzle/horror game, it is inspired by the game Portal.



"
descriptive,write about the GamePlay in Enlighten,"- game is first person - puzzle/horror
- player can move and look around like a normal first person game 
- player can jump, sprint and crouch
- player can interact with intractable objects ( push buttons, flip switches, open doors, etc)
- player can drag and drop items
- player has health and can die (health regenerates over time)
- player has a flashlight
- player has a teleporting device
- player has a special light gun
- player can take up to 3 hits from the beast but the 4th one will kill the player and the health will regenerate over time

*Health:
- player has 3 bars of health, each hit from the beast will reduce the health by 1 bar
- health will regenerate over time



"
descriptive,write about the Player items  in Enlighten,"- a flashlight [flash lights power runs out over time, but not using it for a while will recharge it]
- a teleporting device [when the device is out right-click will mark the current player position as the teleport destination and whenever the player left-clicks, the player will teleport to the marked location instantly]
- a light gun [this gun will extract light from a light source (causing the light source to be turned off) and saves it inside the gun and then can shoot back the light into another light source (causing the light source to be turned on)]

*flashlight:
- managed by PlayerFlashLightManager.cs
- when player is using it, its battery slowly runs out, when player is not using it, the battery slowly recharges

*Teleporter:
- managed by PlayerTeleportManager.cs
- when player equips this item and presses right click, a teleport seed is planted(it is the current position and rotation of the player). later when player presses left click, player teleports to the seed.

*Light Gun:
- managed by PlayerLightGunManager.cs
- Light Gun is a gun that has only one ammo, it shoots light and sucks light from light sources to fill the ammo.
- most lights in the game are what i call 'LightGun Light'. if player shoots a light bullet to one of these, the light will be turned on, and if they aim the gun at a light and right click, the gun will suck the light out of the LightGun light and save it as a bullet.



"
descriptive,write about the Puzzles in Enlighten,"- puzzles are the main part of the game
- puzzles are physics/lights based
- player should use light gun and teleporting device and items in the area to solve puzzles
- puzzles cant' be solved when power is out

*Level 1 puzzles
- puzzle 1 : player should put color coded balls in color coded pools
- puzzle 2 : player should use light gun to lit up each light with the correct light type
- puzzle 3 : player should insert a power core into a power station then use teleporter to get out of a cage
- puzzle 4 : a power core is trapped in a cage, the cages barriers are controlled by lightGun lights, player should use light gun to lit up each light with the correct light type to gain access to the power core

*Level 2 puzzles
- puzzle 1 : there is a grid of cages all are controlled by their lightGun lights, there is a key(power core) in one of them, player should use light gun to lit up each light with the correct light type to gain access to the key(power core)
- puzzle 2 : there are three sub-puzzles called pixel-puzzle, player should solve all of them to get a key(power core). pixel-puzzle is a grid of LightGun lights(like pixels) that must all be lit up with the correct light type to show a pattern
- puzzle 3 : has three stages, first two stages are platforming stages(player uses pressure plates,teleporter and lightGun lights to make way through the stage), third stage is a puzzle where a key is inside a cage and the cage is controlled by 4 lightGun lights and they need Golden light to be unlocked, player should use light gun to find the golden lights and then lit up each light to gain access to the key(power core)



"
descriptive,write about the Beast in Enlighten,"- the beast is a monster that hunts the player and is trying to kill the player
- beast only roams around when power is out. 
- player can't hurt the beast
- players best strategy is to hide and sneak around when the beast is out.
- beast can see the player if the player is in the beasts line of sight
- beast can hear the player if the player is near the beast and is making noise

*Beast states:
- sleep state (BeastStateSleep.cs) : beast is not active. when the power is on, the beast will be in sleep state and will not be active
- roaming state  (BeastStateRoaming.cs) : beast is roaming around the site. when the power is out, the beast will enter roaming state(from sleep state) and will start roaming around the site. if previous state was on target(BeastStateOnTarget), beast will go to the player's last seen position then start roaming (a behaviour known as RoamingOnTarget)
- on target state  (BeastStateOnTarget.cs) : beast is chasing a target. hearing the player makes beast enter its hunting mode (On target mode) (BeastStateOnTarget.cs) and it will start chasing the player, on each update the beast will check if the player is in its line of sight, if so it will start chasing the player's exact position, if no it changes state to roaming state (BeastStateRoaming.cs) , the roaming state will first go to player's last seen position then start roaming (a behaviour known as RoamingOnTarget)
- roaming on target (hidden sub state with enum called RoamingOnTarget with no class) : activated if beast went from BeastStateOnTarget to BeastStateRoaming or beast was in BeastStateRoaming and heard the player. beast will roam to player's last known position
- killing state (BeastStateKilling.cs) : players health is 0 and the beast is killing the player (killing animation is being played, beast must just look at the player and do nothing). after the animation is done player will respawn at the last checkpoint and the beast will start roaming again (enter roaming state)
- escaping state (BeastStateScaping.cs) : beast is escaping to its hiding place. when the beast is out and the player brings the power back on, the beast will escape to its hiding place, upon reaching its hiding place the beast will enter sleep state



"
descriptive,write about the Main game loop in Enlighten,"- player enters a closed environment (like a building), the area contains multiple puzzles, solving all of them will result in the main door of the area being unlocked so that the player can proceed through the game and enter the next area
- every 3 minutes all the lights will be turned off and the beast will be unleashed. when the beast is out, player needs to sneak around and bring the power back on (by flipping power switches around the site) when power is back beast will escape and the light will be turned on again and the 3 minutes timer until the next release of the beast will restart

so the game loop is like this:
- player enters a closed environment
- inner loop [
    - player is solving puzzles
    - power goes out and the beast is unleashed
    - player escapes the beast and brings the power back on
    - repeat ]
- player solves all the puzzles and the main door is unlocked
- player enters the next area
- repeat

*Power:
- each area has a few power switches that can be flipped to turn the power on
- when the power is on, the lights are on and the beast is not active
- when the power is out, the lights are off and the beast is active
- when the power is out, player can't solve puzzles , player can't use the light gun but player can use the teleporting device
- when the power is out, player needs to bring the power back on by flipping power switches around the map



"
descriptive,write about the NPC in Enlighten,"*Kits:
- Kits is a cute girl with a cat mask on
- she is an NPC, that follows the player around
- she can't be hurt by the beast and she can't die 
- she can't solve puzzles,use items or interact with objects
- she can't speak

*Friend:
- friend is a voice that helps and guids the player
- she is like a spirit and is trapped inside the player
- she is Kits's friend



"
descriptive,write about the Scripts in Enlighten,"- void Awake() : called when the script instance is being loaded - it is used to set dependencies between scripts and objects
- void OnEnable() : called when the object becomes enabled and active - it is used to subscribe to events 
- void Start() : called once at the start of the MonoBehaviour life cycle - it is used to initialize variables and objects
- void FixedUpdate() : called once per fixed frame
- void Update() : called once per frame
- void LateUpdate() : called once per frame after Update() has finished
- void OnDisable() : called when the object becomes disabled and inactive - it is used to unsubscribe to events 
- void OnDestroy() : called when the object is being destroyed
- order of execution : Awake() -> OnEnable() -> Start() ->  Update() -> LateUpdate() -> OnDisable() -> OnDestroy()
- [Serializable] attribute is used to make the class serializable, so that it can be shown in the inspector
- [SerializeField] attribute is used to make a private field serializable, so that it can be shown in the inspector
- SingletonMonoBehaviour<T> : is a generic class that makes sure that only one instance of the class exists in the scene. singletons can be accessed through T.Instance

*EventHubs
- EventHub is a design pattern that allows communication between components without having to reference each other - is is observer or listener pattern
- first we have the event itself, which is a delegate(C sharp Action) that holds a reference to a method that will be called when the event is triggered
any class can subscribe to the event by adding a method to the event delegate
public static event Action eventName;
- second we have the method that triggers the event, which is a static method that invokes the event delegate
any class can trigger the event by calling the static method
public static void EventName() => eventName?.Invoke();

"
